
unix_time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006314  08006314  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006314  08006314  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006314  08006314  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006314  08006314  00016314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800631c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000070  0800638c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0800638c  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0fd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002257  00000000  00000000  0002e196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000303f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000311c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185cb  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f23f  00000000  00000000  0004a493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1e5  00000000  00000000  000596d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e68b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e54  00000000  00000000  000e690c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080061a4 	.word	0x080061a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080061a4 	.word	0x080061a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr
 800093c:	0000      	movs	r0, r0
	...

08000940 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af02      	add	r7, sp, #8
 8000946:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4ab8      	ldr	r2, [pc, #736]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	f040 84f1 	bne.w	8001336 <HAL_TIM_PeriodElapsedCallback+0x9f6>
        {

       high1 =  RTC->CNTH & RTC_CNTH_RTC_CNT;
 8000954:	4bb7      	ldr	r3, [pc, #732]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	b29a      	uxth	r2, r3
 800095a:	4bb7      	ldr	r3, [pc, #732]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800095c:	801a      	strh	r2, [r3, #0]
       low   =  RTC->CNTL & RTC_CNTL_RTC_CNT;
 800095e:	4bb5      	ldr	r3, [pc, #724]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	b29a      	uxth	r2, r3
 8000964:	4bb5      	ldr	r3, [pc, #724]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000966:	801a      	strh	r2, [r3, #0]
       high2 =  RTC->CNTH & RTC_CNTH_RTC_CNT;
 8000968:	4bb2      	ldr	r3, [pc, #712]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	b29a      	uxth	r2, r3
 800096e:	4bb4      	ldr	r3, [pc, #720]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000970:	801a      	strh	r2, [r3, #0]
        		   if (high1 != high2)
 8000972:	4bb1      	ldr	r3, [pc, #708]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000974:	881a      	ldrh	r2, [r3, #0]
 8000976:	4bb2      	ldr	r3, [pc, #712]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	429a      	cmp	r2, r3
 800097c:	d00a      	beq.n	8000994 <HAL_TIM_PeriodElapsedCallback+0x54>
        		    {
        		      /* In this case the counter roll over during reading of CNTL and CNTH registers,
        		         read again CNTL register then return the counter value */
        		      timecounter = ((uint32_t) high2 << 16U) +  (RTC->CNTL & RTC_CNTL_RTC_CNT);
 800097e:	4bb0      	ldr	r3, [pc, #704]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	041a      	lsls	r2, r3, #16
 8000984:	4bab      	ldr	r3, [pc, #684]	; (8000c34 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	b29b      	uxth	r3, r3
 800098a:	4413      	add	r3, r2
 800098c:	461a      	mov	r2, r3
 800098e:	4bad      	ldr	r3, [pc, #692]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	e008      	b.n	80009a6 <HAL_TIM_PeriodElapsedCallback+0x66>
        		    }
        		    else
        		    {
        		      /* No counter roll over during reading of CNTL and CNTH registers, counter
        		         value is equal to first value of CNTL and CNTH */
        		      timecounter = (((uint32_t) high1 << 16U) | low);
 8000994:	4ba8      	ldr	r3, [pc, #672]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	041b      	lsls	r3, r3, #16
 800099a:	4aa8      	ldr	r2, [pc, #672]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	4313      	orrs	r3, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4ba8      	ldr	r3, [pc, #672]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80009a4:	601a      	str	r2, [r3, #0]
        		    }
        		   b = 0;
 80009a6:	4ba8      	ldr	r3, [pc, #672]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
                   day = 0;
 80009ac:	4ba7      	ldr	r3, [pc, #668]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
                   month = 0;
 80009b2:	4ba7      	ldr	r3, [pc, #668]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	801a      	strh	r2, [r3, #0]
                   year = 0;
 80009b8:	4ba6      	ldr	r3, [pc, #664]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	801a      	strh	r2, [r3, #0]
                   cnt_vis = 0;
 80009be:	4ba6      	ldr	r3, [pc, #664]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
                   a_sec = 0;
 80009c4:	4ba5      	ldr	r3, [pc, #660]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
                   a_sec_month = 0;
 80009ca:	4ba5      	ldr	r3, [pc, #660]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
                   a_sec_day = 0;
 80009d0:	4ba4      	ldr	r3, [pc, #656]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
                   a_sec_hour = 0;
 80009d6:	4ba4      	ldr	r3, [pc, #656]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
                   a_sec_min = 0;
 80009dc:	4ba3      	ldr	r3, [pc, #652]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
                   cnt_day = 0;
 80009e2:	4ba3      	ldr	r3, [pc, #652]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
                   cnt_hour = 0;
 80009e8:	4ba2      	ldr	r3, [pc, #648]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
                   cnt_min = 0;
 80009ee:	4ba2      	ldr	r3, [pc, #648]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]
                   cnt_sec = 0;
 80009f4:	4ba1      	ldr	r3, [pc, #644]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]


                   //   day_sec = 0;
                 //  month_sec = 0;
                  // year_sec = 0;
                   a = timecounter;
 80009fa:	4b92      	ldr	r3, [pc, #584]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b9f      	ldr	r3, [pc, #636]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000a02:	601a      	str	r2, [r3, #0]
        		   year = a/(3600*24*365.25) - 30;
 8000a04:	4b9e      	ldr	r3, [pc, #632]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fceb 	bl	80003e4 <__aeabi_ui2d>
 8000a0e:	a386      	add	r3, pc, #536	; (adr r3, 8000c28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8000a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a14:	f7ff fe8a 	bl	800072c <__aeabi_ddiv>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f04f 0200 	mov.w	r2, #0
 8000a24:	4b97      	ldr	r3, [pc, #604]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8000a26:	f7ff fb9f 	bl	8000168 <__aeabi_dsub>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	f7ff ff63 	bl	80008fc <__aeabi_d2uiz>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b86      	ldr	r3, [pc, #536]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000a3c:	801a      	strh	r2, [r3, #0]
        		   switch(year)
 8000a3e:	4b85      	ldr	r3, [pc, #532]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b2a      	cmp	r3, #42	; 0x2a
 8000a44:	f200 81c1 	bhi.w	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000afd 	.word	0x08000afd
 8000a54:	08000b0b 	.word	0x08000b0b
 8000a58:	08000b19 	.word	0x08000b19
 8000a5c:	08000b27 	.word	0x08000b27
 8000a60:	08000b35 	.word	0x08000b35
 8000a64:	08000b43 	.word	0x08000b43
 8000a68:	08000b51 	.word	0x08000b51
 8000a6c:	08000b5f 	.word	0x08000b5f
 8000a70:	08000b6d 	.word	0x08000b6d
 8000a74:	08000b7b 	.word	0x08000b7b
 8000a78:	08000b89 	.word	0x08000b89
 8000a7c:	08000b97 	.word	0x08000b97
 8000a80:	08000ba5 	.word	0x08000ba5
 8000a84:	08000bb3 	.word	0x08000bb3
 8000a88:	08000bc1 	.word	0x08000bc1
 8000a8c:	08000bcf 	.word	0x08000bcf
 8000a90:	08000bdd 	.word	0x08000bdd
 8000a94:	08000beb 	.word	0x08000beb
 8000a98:	08000bf9 	.word	0x08000bf9
 8000a9c:	08000c07 	.word	0x08000c07
 8000aa0:	08000c15 	.word	0x08000c15
 8000aa4:	08000c8d 	.word	0x08000c8d
 8000aa8:	08000c9b 	.word	0x08000c9b
 8000aac:	08000ca9 	.word	0x08000ca9
 8000ab0:	08000cb7 	.word	0x08000cb7
 8000ab4:	08000cc5 	.word	0x08000cc5
 8000ab8:	08000cd3 	.word	0x08000cd3
 8000abc:	08000ce1 	.word	0x08000ce1
 8000ac0:	08000cef 	.word	0x08000cef
 8000ac4:	08000cfd 	.word	0x08000cfd
 8000ac8:	08000d0b 	.word	0x08000d0b
 8000acc:	08000d19 	.word	0x08000d19
 8000ad0:	08000d27 	.word	0x08000d27
 8000ad4:	08000d35 	.word	0x08000d35
 8000ad8:	08000d43 	.word	0x08000d43
 8000adc:	08000d51 	.word	0x08000d51
 8000ae0:	08000d5f 	.word	0x08000d5f
 8000ae4:	08000d6d 	.word	0x08000d6d
 8000ae8:	08000d7b 	.word	0x08000d7b
 8000aec:	08000d89 	.word	0x08000d89
 8000af0:	08000d97 	.word	0x08000d97
 8000af4:	08000da5 	.word	0x08000da5
 8000af8:	08000dbd 	.word	0x08000dbd
        		   {
        		  case 0:
        		  cnt_vis = 7;
 8000afc:	4b56      	ldr	r3, [pc, #344]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 23;
 8000b02:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b04:	2217      	movs	r2, #23
 8000b06:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b08:	e15f      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 1:
        		  cnt_vis = 8;
 8000b0a:	4b53      	ldr	r3, [pc, #332]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 23;
 8000b10:	4b5d      	ldr	r3, [pc, #372]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b12:	2217      	movs	r2, #23
 8000b14:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b16:	e158      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 2:
        		  cnt_vis = 8;
 8000b18:	4b4f      	ldr	r3, [pc, #316]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 24;
 8000b1e:	4b5a      	ldr	r3, [pc, #360]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b20:	2218      	movs	r2, #24
 8000b22:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b24:	e151      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 3:
        		  cnt_vis = 8;
 8000b26:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b28:	2208      	movs	r2, #8
 8000b2a:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 25;
 8000b2c:	4b56      	ldr	r3, [pc, #344]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b2e:	2219      	movs	r2, #25
 8000b30:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b32:	e14a      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 4:
        		  cnt_vis = 8;
 8000b34:	4b48      	ldr	r3, [pc, #288]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b36:	2208      	movs	r2, #8
 8000b38:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 26;
 8000b3a:	4b53      	ldr	r3, [pc, #332]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b3c:	221a      	movs	r2, #26
 8000b3e:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b40:	e143      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 5:
        		  cnt_vis = 9;
 8000b42:	4b45      	ldr	r3, [pc, #276]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b44:	2209      	movs	r2, #9
 8000b46:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 26;
 8000b48:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b4a:	221a      	movs	r2, #26
 8000b4c:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b4e:	e13c      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 6:
        		  cnt_vis = 9;
 8000b50:	4b41      	ldr	r3, [pc, #260]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b52:	2209      	movs	r2, #9
 8000b54:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 27;
 8000b56:	4b4c      	ldr	r3, [pc, #304]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b58:	221b      	movs	r2, #27
 8000b5a:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b5c:	e135      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 7:
        		  cnt_vis = 9;
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b60:	2209      	movs	r2, #9
 8000b62:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 28;
 8000b64:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b66:	221c      	movs	r2, #28
 8000b68:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b6a:	e12e      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 8:
        		  cnt_vis = 9;
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b6e:	2209      	movs	r2, #9
 8000b70:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 29;
 8000b72:	4b45      	ldr	r3, [pc, #276]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b74:	221d      	movs	r2, #29
 8000b76:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b78:	e127      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 9:
        		  cnt_vis = 10;
 8000b7a:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 29;
 8000b80:	4b41      	ldr	r3, [pc, #260]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b82:	221d      	movs	r2, #29
 8000b84:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b86:	e120      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 10:
        		  cnt_vis = 10;
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b8a:	220a      	movs	r2, #10
 8000b8c:	701a      	strb	r2, [r3, #0]
        		  cnt_ob =  30;
 8000b8e:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b90:	221e      	movs	r2, #30
 8000b92:	701a      	strb	r2, [r3, #0]
        		  break;
 8000b94:	e119      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 11:
        		  cnt_vis = 10;
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 31;
 8000b9c:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000b9e:	221f      	movs	r2, #31
 8000ba0:	701a      	strb	r2, [r3, #0]
        		  break;
 8000ba2:	e112      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 12:
        		  cnt_vis = 10;
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000ba6:	220a      	movs	r2, #10
 8000ba8:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 32;
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bac:	2220      	movs	r2, #32
 8000bae:	701a      	strb	r2, [r3, #0]
        		  break;
 8000bb0:	e10b      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 13:
        		  cnt_vis = 11;
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bb4:	220b      	movs	r2, #11
 8000bb6:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 32;
 8000bb8:	4b33      	ldr	r3, [pc, #204]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bba:	2220      	movs	r2, #32
 8000bbc:	701a      	strb	r2, [r3, #0]
        		  break;
 8000bbe:	e104      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        	      case 14:
        		  cnt_vis = 11;
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bc2:	220b      	movs	r2, #11
 8000bc4:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 33;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bc8:	2221      	movs	r2, #33	; 0x21
 8000bca:	701a      	strb	r2, [r3, #0]
        		  break;
 8000bcc:	e0fd      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 15:
        		  cnt_vis = 11;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bd0:	220b      	movs	r2, #11
 8000bd2:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 34;
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bd6:	2222      	movs	r2, #34	; 0x22
 8000bd8:	701a      	strb	r2, [r3, #0]
        		  break;
 8000bda:	e0f6      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 16:
        		  cnt_vis = 11;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bde:	220b      	movs	r2, #11
 8000be0:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 35;
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000be4:	2223      	movs	r2, #35	; 0x23
 8000be6:	701a      	strb	r2, [r3, #0]
        		  break;
 8000be8:	e0ef      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 17:
        		  cnt_vis = 12;
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bec:	220c      	movs	r2, #12
 8000bee:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 35;
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000bf2:	2223      	movs	r2, #35	; 0x23
 8000bf4:	701a      	strb	r2, [r3, #0]
        	      break;
 8000bf6:	e0e8      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 18:
        		  cnt_vis = 12;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 36;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c00:	2224      	movs	r2, #36	; 0x24
 8000c02:	701a      	strb	r2, [r3, #0]
        		  break;
 8000c04:	e0e1      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 19:
        		  cnt_vis = 12;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000c08:	220c      	movs	r2, #12
 8000c0a:	701a      	strb	r2, [r3, #0]
                  cnt_ob = 37;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c0e:	2225      	movs	r2, #37	; 0x25
 8000c10:	701a      	strb	r2, [r3, #0]
        		  break;
 8000c12:	e0da      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        	      case 20:
        		  cnt_vis = 12;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 38;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8000c1c:	2226      	movs	r2, #38	; 0x26
 8000c1e:	701a      	strb	r2, [r3, #0]
        		  break;
 8000c20:	e0d3      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
 8000c22:	bf00      	nop
 8000c24:	f3af 8000 	nop.w
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	417e187e 	.word	0x417e187e
 8000c30:	40012c00 	.word	0x40012c00
 8000c34:	40002800 	.word	0x40002800
 8000c38:	200000cc 	.word	0x200000cc
 8000c3c:	200000d0 	.word	0x200000d0
 8000c40:	200000ce 	.word	0x200000ce
 8000c44:	200001d0 	.word	0x200001d0
 8000c48:	200000d2 	.word	0x200000d2
 8000c4c:	2000024c 	.word	0x2000024c
 8000c50:	2000017c 	.word	0x2000017c
 8000c54:	20000242 	.word	0x20000242
 8000c58:	200000d3 	.word	0x200000d3
 8000c5c:	200001d4 	.word	0x200001d4
 8000c60:	2000023c 	.word	0x2000023c
 8000c64:	200001f0 	.word	0x200001f0
 8000c68:	2000025c 	.word	0x2000025c
 8000c6c:	2000026c 	.word	0x2000026c
 8000c70:	20000168 	.word	0x20000168
 8000c74:	20000170 	.word	0x20000170
 8000c78:	20000260 	.word	0x20000260
 8000c7c:	20000184 	.word	0x20000184
 8000c80:	20000264 	.word	0x20000264
 8000c84:	403e0000 	.word	0x403e0000
 8000c88:	200000d4 	.word	0x200000d4
        		  case 21:
        		  cnt_vis = 13;
 8000c8c:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000c8e:	220d      	movs	r2, #13
 8000c90:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 38;
 8000c92:	4b49      	ldr	r3, [pc, #292]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000c94:	2226      	movs	r2, #38	; 0x26
 8000c96:	701a      	strb	r2, [r3, #0]
        		  break;
 8000c98:	e097      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 22:
        		  cnt_vis = 13;
 8000c9a:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000c9c:	220d      	movs	r2, #13
 8000c9e:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 39;
 8000ca0:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000ca2:	2227      	movs	r2, #39	; 0x27
 8000ca4:	701a      	strb	r2, [r3, #0]
        		  break;
 8000ca6:	e090      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 23:
        		  cnt_vis = 13;
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000caa:	220d      	movs	r2, #13
 8000cac:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 40;
 8000cae:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000cb0:	2228      	movs	r2, #40	; 0x28
 8000cb2:	701a      	strb	r2, [r3, #0]
        		  break;
 8000cb4:	e089      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 24:
        		  cnt_vis = 13;
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000cb8:	220d      	movs	r2, #13
 8000cba:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 41;
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000cbe:	2229      	movs	r2, #41	; 0x29
 8000cc0:	701a      	strb	r2, [r3, #0]
        		  break;
 8000cc2:	e082      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>

        		  case 25:
        		  cnt_vis = 14;
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000cc6:	220e      	movs	r2, #14
 8000cc8:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 41;
 8000cca:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000ccc:	2229      	movs	r2, #41	; 0x29
 8000cce:	701a      	strb	r2, [r3, #0]
        		  break;
 8000cd0:	e07b      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 26:
        		  cnt_vis = 14;
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000cd4:	220e      	movs	r2, #14
 8000cd6:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 42;
 8000cd8:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000cda:	222a      	movs	r2, #42	; 0x2a
 8000cdc:	701a      	strb	r2, [r3, #0]
        		  break;
 8000cde:	e074      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 27:
        		  cnt_vis = 14;
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000ce2:	220e      	movs	r2, #14
 8000ce4:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 43;
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000ce8:	222b      	movs	r2, #43	; 0x2b
 8000cea:	701a      	strb	r2, [r3, #0]
        		  break;
 8000cec:	e06d      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 28:
        		  cnt_vis = 14;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000cf0:	220e      	movs	r2, #14
 8000cf2:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 44;
 8000cf4:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000cf6:	222c      	movs	r2, #44	; 0x2c
 8000cf8:	701a      	strb	r2, [r3, #0]
        		  break;
 8000cfa:	e066      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>

        		  case 29:
        		  cnt_vis = 15;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000cfe:	220f      	movs	r2, #15
 8000d00:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 44;
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d04:	222c      	movs	r2, #44	; 0x2c
 8000d06:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d08:	e05f      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 30:
        		  cnt_vis = 15;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 45;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d12:	222d      	movs	r2, #45	; 0x2d
 8000d14:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d16:	e058      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 31:
        		  cnt_vis = 15;
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d1a:	220f      	movs	r2, #15
 8000d1c:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 46;
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d20:	222e      	movs	r2, #46	; 0x2e
 8000d22:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d24:	e051      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 32:
        		  cnt_vis = 15;
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d28:	220f      	movs	r2, #15
 8000d2a:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 47;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d2e:	222f      	movs	r2, #47	; 0x2f
 8000d30:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d32:	e04a      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 33:
        		  cnt_vis = 16;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d36:	2210      	movs	r2, #16
 8000d38:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 47;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d3c:	222f      	movs	r2, #47	; 0x2f
 8000d3e:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d40:	e043      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 34:
        		  cnt_vis = 16;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d44:	2210      	movs	r2, #16
 8000d46:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 48;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d4a:	2230      	movs	r2, #48	; 0x30
 8000d4c:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d4e:	e03c      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 35:
        		  cnt_vis = 16;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d52:	2210      	movs	r2, #16
 8000d54:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 49;
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d58:	2231      	movs	r2, #49	; 0x31
 8000d5a:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d5c:	e035      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 36:
        		  cnt_vis = 16;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d60:	2210      	movs	r2, #16
 8000d62:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 50;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d66:	2232      	movs	r2, #50	; 0x32
 8000d68:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d6a:	e02e      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>

        		  case 37:
        		  cnt_vis = 17;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d6e:	2211      	movs	r2, #17
 8000d70:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 50;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d74:	2232      	movs	r2, #50	; 0x32
 8000d76:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d78:	e027      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 38:
        		  cnt_vis = 17;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d7c:	2211      	movs	r2, #17
 8000d7e:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 51;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d82:	2233      	movs	r2, #51	; 0x33
 8000d84:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d86:	e020      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 39:
        		  cnt_vis = 17;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d8a:	2211      	movs	r2, #17
 8000d8c:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 52;
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d90:	2234      	movs	r2, #52	; 0x34
 8000d92:	701a      	strb	r2, [r3, #0]
        		  break;
 8000d94:	e019      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 40:
        		  cnt_vis = 17;
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000d98:	2211      	movs	r2, #17
 8000d9a:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 53;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000d9e:	2235      	movs	r2, #53	; 0x35
 8000da0:	701a      	strb	r2, [r3, #0]
        		  break;
 8000da2:	e012      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
        		  case 41:
        		  cnt_vis = 18;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8000da6:	2212      	movs	r2, #18
 8000da8:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 53;
 8000daa:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8000dac:	2235      	movs	r2, #53	; 0x35
 8000dae:	701a      	strb	r2, [r3, #0]
        		  break;
 8000db0:	e00b      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x48a>
 8000db2:	bf00      	nop
 8000db4:	200000d3 	.word	0x200000d3
 8000db8:	200000d4 	.word	0x200000d4
        		  case 42:
        		  cnt_vis = 18;
 8000dbc:	4b5b      	ldr	r3, [pc, #364]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000dbe:	2212      	movs	r2, #18
 8000dc0:	701a      	strb	r2, [r3, #0]
        		  cnt_ob = 54;
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000dc4:	2236      	movs	r2, #54	; 0x36
 8000dc6:	701a      	strb	r2, [r3, #0]
        		  break;
 8000dc8:	bf00      	nop

        		  	}///switch



        		  a_sec = a - (cnt_vis*year_vis + cnt_ob*year_ob); ///вычисляем число секунд после прошедших лет
 8000dca:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a57      	ldr	r2, [pc, #348]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a58      	ldr	r2, [pc, #352]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8000dd6:	fb02 f101 	mul.w	r1, r2, r1
 8000dda:	4a55      	ldr	r2, [pc, #340]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	4610      	mov	r0, r2
 8000de0:	4a56      	ldr	r2, [pc, #344]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8000de2:	fb02 f200 	mul.w	r2, r2, r0
 8000de6:	440a      	add	r2, r1
 8000de8:	1a9b      	subs	r3, r3, r2
 8000dea:	4a55      	ldr	r2, [pc, #340]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8000dec:	6013      	str	r3, [r2, #0]
        		  day = a_sec/86400 + 1; ///число дней
 8000dee:	4b54      	ldr	r3, [pc, #336]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c1b      	lsrs	r3, r3, #16
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	b29a      	uxth	r2, r3
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e02:	801a      	strh	r2, [r3, #0]
        		 // c = year%4; /// год високосный или нет.



        		  if((day>0) && (day<=31) )
 8000e04:	4b50      	ldr	r3, [pc, #320]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x4da>
 8000e0c:	4b4e      	ldr	r3, [pc, #312]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	2b1f      	cmp	r3, #31
 8000e12:	d802      	bhi.n	8000e1a <HAL_TIM_PeriodElapsedCallback+0x4da>
        		  {
        			  month = 1;
 8000e14:	4b4d      	ldr	r3, [pc, #308]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	801a      	strh	r2, [r3, #0]
        		  }


        		  if(!year%4)/// год високосный
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8098 	bne.w	8000f54 <HAL_TIM_PeriodElapsedCallback+0x614>
        		  {
        		  if((day>31) && (day<=60) )
 8000e24:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	d906      	bls.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x4fa>
 8000e2c:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	2b3c      	cmp	r3, #60	; 0x3c
 8000e32:	d802      	bhi.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x4fa>
        		        		  {
        		        			  month = 2;
 8000e34:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000e36:	2202      	movs	r2, #2
 8000e38:	801a      	strh	r2, [r3, #0]
        		        		  }

        		  if((day>60) && (day<=91) )
 8000e3a:	4b43      	ldr	r3, [pc, #268]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	2b3c      	cmp	r3, #60	; 0x3c
 8000e40:	d906      	bls.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x510>
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	2b5b      	cmp	r3, #91	; 0x5b
 8000e48:	d802      	bhi.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0x510>
        		        		        		  {
        		        		        			  month = 3;
 8000e4a:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	801a      	strh	r2, [r3, #0]
        		        		        		  }

        		  if((day>91) && (day<=121) )
 8000e50:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	2b5b      	cmp	r3, #91	; 0x5b
 8000e56:	d906      	bls.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x526>
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	2b79      	cmp	r3, #121	; 0x79
 8000e5e:	d802      	bhi.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x526>
              		        		  {
        		        		 month = 4;
 8000e60:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000e62:	2204      	movs	r2, #4
 8000e64:	801a      	strh	r2, [r3, #0]
         		        		  }
        		  if((day>121) && (day<=152) )
 8000e66:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	2b79      	cmp	r3, #121	; 0x79
 8000e6c:	d906      	bls.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x53c>
 8000e6e:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	2b98      	cmp	r3, #152	; 0x98
 8000e74:	d802      	bhi.n	8000e7c <HAL_TIM_PeriodElapsedCallback+0x53c>
        		               		        		  {
        		         		        		 month = 5;
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000e78:	2205      	movs	r2, #5
 8000e7a:	801a      	strh	r2, [r3, #0]
        		          		        		  }
        		  if((day>152) && (day<=182) )
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	2b98      	cmp	r3, #152	; 0x98
 8000e82:	d906      	bls.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x552>
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	2bb6      	cmp	r3, #182	; 0xb6
 8000e8a:	d802      	bhi.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x552>
        		        {
        		         month = 6;
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000e8e:	2206      	movs	r2, #6
 8000e90:	801a      	strh	r2, [r3, #0]
        		          }
        		  if((day>182) && (day<=213) )
 8000e92:	4b2d      	ldr	r3, [pc, #180]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2bb6      	cmp	r3, #182	; 0xb6
 8000e98:	d906      	bls.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x568>
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	2bd5      	cmp	r3, #213	; 0xd5
 8000ea0:	d802      	bhi.n	8000ea8 <HAL_TIM_PeriodElapsedCallback+0x568>
        		         		        {
        		         		         month = 7;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	801a      	strh	r2, [r3, #0]
        		         		          }
        		  if((day>213) && (day<=244) )
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	2bd5      	cmp	r3, #213	; 0xd5
 8000eae:	d906      	bls.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x57e>
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	2bf4      	cmp	r3, #244	; 0xf4
 8000eb6:	d802      	bhi.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x57e>

        		                    {
        		         		    month = 8;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	801a      	strh	r2, [r3, #0]
        		         		     }
        		  if((day>244) && (day<=274) )
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	2bf4      	cmp	r3, #244	; 0xf4
 8000ec4:	d907      	bls.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x596>
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000ece:	d802      	bhi.n	8000ed6 <HAL_TIM_PeriodElapsedCallback+0x596>
        		         {
        		        month = 9;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000ed2:	2209      	movs	r2, #9
 8000ed4:	801a      	strh	r2, [r3, #0]
        		         		 }
        		  if((day>274) && (day<=305) )
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000ede:	d907      	bls.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000ee8:	d202      	bcs.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x5b0>
        		         		         {
        		         		        month = 10;
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000eec:	220a      	movs	r2, #10
 8000eee:	801a      	strh	r2, [r3, #0]
        		         		         		 }
        		  if((day>305) && (day<=335) )
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000ef8:	d307      	bcc.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x5ca>
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000f02:	d202      	bcs.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x5ca>
        		         		         {
        		         		        month = 11;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000f06:	220b      	movs	r2, #11
 8000f08:	801a      	strh	r2, [r3, #0]
        		         		         		 }
        		  if((day>335) && (day<=366) )
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000f12:	f0c0 809f 	bcc.w	8001054 <HAL_TIM_PeriodElapsedCallback+0x714>
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8000f1e:	f200 8099 	bhi.w	8001054 <HAL_TIM_PeriodElapsedCallback+0x714>
        		          		         		         {
        		          		         		        month = 12;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8000f24:	220c      	movs	r2, #12
 8000f26:	801a      	strh	r2, [r3, #0]
 8000f28:	e094      	b.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x714>
 8000f2a:	bf00      	nop
 8000f2c:	200000d3 	.word	0x200000d3
 8000f30:	200000d4 	.word	0x200000d4
 8000f34:	20000264 	.word	0x20000264
 8000f38:	01e28500 	.word	0x01e28500
 8000f3c:	01e13380 	.word	0x01e13380
 8000f40:	200001d4 	.word	0x200001d4
 8000f44:	c22e4507 	.word	0xc22e4507
 8000f48:	2000024c 	.word	0x2000024c
 8000f4c:	2000017c 	.word	0x2000017c
 8000f50:	20000242 	.word	0x20000242

        		  }

        		  else ///c!=0 год невисокосный
        		  {
        			  if((day>31) && (day<=59) )
 8000f54:	4b8e      	ldr	r3, [pc, #568]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	2b1f      	cmp	r3, #31
 8000f5a:	d906      	bls.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x62a>
 8000f5c:	4b8c      	ldr	r3, [pc, #560]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	2b3b      	cmp	r3, #59	; 0x3b
 8000f62:	d802      	bhi.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x62a>
        			          		        		  {
        			          		        			  month = 2;
 8000f64:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000f66:	2202      	movs	r2, #2
 8000f68:	801a      	strh	r2, [r3, #0]
        			          		        		  }

        			          		  if((day>59) && (day<=90) )
 8000f6a:	4b89      	ldr	r3, [pc, #548]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f70:	d906      	bls.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x640>
 8000f72:	4b87      	ldr	r3, [pc, #540]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	2b5a      	cmp	r3, #90	; 0x5a
 8000f78:	d802      	bhi.n	8000f80 <HAL_TIM_PeriodElapsedCallback+0x640>
        			          		        		        		  {
        			          		        		        			  month = 3;
 8000f7a:	4b86      	ldr	r3, [pc, #536]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	801a      	strh	r2, [r3, #0]
        			          		        		        		  }

        			          		  if((day>90) && (day<=120) )
 8000f80:	4b83      	ldr	r3, [pc, #524]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	2b5a      	cmp	r3, #90	; 0x5a
 8000f86:	d906      	bls.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x656>
 8000f88:	4b81      	ldr	r3, [pc, #516]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	2b78      	cmp	r3, #120	; 0x78
 8000f8e:	d802      	bhi.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x656>
        			                		        		  {
        			          		        		 month = 4;
 8000f90:	4b80      	ldr	r3, [pc, #512]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000f92:	2204      	movs	r2, #4
 8000f94:	801a      	strh	r2, [r3, #0]
        			           		        		  }
        			          		  if((day>120) && (day<=151) )
 8000f96:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	2b78      	cmp	r3, #120	; 0x78
 8000f9c:	d906      	bls.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x66c>
 8000f9e:	4b7c      	ldr	r3, [pc, #496]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b97      	cmp	r3, #151	; 0x97
 8000fa4:	d802      	bhi.n	8000fac <HAL_TIM_PeriodElapsedCallback+0x66c>
        			          		               		        		  {
        			          		         		        		 month = 5;
 8000fa6:	4b7b      	ldr	r3, [pc, #492]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000fa8:	2205      	movs	r2, #5
 8000faa:	801a      	strh	r2, [r3, #0]
        			          		          		        		  }
        			          		  if((day>151) && (day<=181) )
 8000fac:	4b78      	ldr	r3, [pc, #480]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	2b97      	cmp	r3, #151	; 0x97
 8000fb2:	d906      	bls.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x682>
 8000fb4:	4b76      	ldr	r3, [pc, #472]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	2bb5      	cmp	r3, #181	; 0xb5
 8000fba:	d802      	bhi.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x682>
        			          		        {
        			          		         month = 6;
 8000fbc:	4b75      	ldr	r3, [pc, #468]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	801a      	strh	r2, [r3, #0]
        			          		          }
        			          		  if((day>181) && (day<=212) )
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	2bb5      	cmp	r3, #181	; 0xb5
 8000fc8:	d906      	bls.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x698>
 8000fca:	4b71      	ldr	r3, [pc, #452]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2bd4      	cmp	r3, #212	; 0xd4
 8000fd0:	d802      	bhi.n	8000fd8 <HAL_TIM_PeriodElapsedCallback+0x698>
        			          		         		        {
        			          		         		         month = 7;
 8000fd2:	4b70      	ldr	r3, [pc, #448]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	801a      	strh	r2, [r3, #0]
        			          		         		          }
        			          		  if((day>212) && (day<=243) )
 8000fd8:	4b6d      	ldr	r3, [pc, #436]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	2bd4      	cmp	r3, #212	; 0xd4
 8000fde:	d906      	bls.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x6ae>
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	2bf3      	cmp	r3, #243	; 0xf3
 8000fe6:	d802      	bhi.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x6ae>

        			          		                    {
        			          		         		    month = 8;
 8000fe8:	4b6a      	ldr	r3, [pc, #424]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8000fea:	2208      	movs	r2, #8
 8000fec:	801a      	strh	r2, [r3, #0]
        			          		         		     }
        			          		  if((day>243) && (day<=273) )
 8000fee:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2bf3      	cmp	r3, #243	; 0xf3
 8000ff4:	d907      	bls.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x6c6>
 8000ff6:	4b66      	ldr	r3, [pc, #408]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000ffe:	d202      	bcs.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x6c6>
        			          		         {
        			          		        month = 9;
 8001000:	4b64      	ldr	r3, [pc, #400]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001002:	2209      	movs	r2, #9
 8001004:	801a      	strh	r2, [r3, #0]
        			          		         		 }
        			          		  if((day>273) && (day<=304) )
 8001006:	4b62      	ldr	r3, [pc, #392]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800100e:	d307      	bcc.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8001010:	4b5f      	ldr	r3, [pc, #380]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001018:	d802      	bhi.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x6e0>
        			          		         		         {
        			          		         		        month = 10;
 800101a:	4b5e      	ldr	r3, [pc, #376]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 800101c:	220a      	movs	r2, #10
 800101e:	801a      	strh	r2, [r3, #0]
        			          		         		         		 }
        			          		  if((day>304) && (day<=334) )
 8001020:	4b5b      	ldr	r3, [pc, #364]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001028:	d907      	bls.n	800103a <HAL_TIM_PeriodElapsedCallback+0x6fa>
 800102a:	4b59      	ldr	r3, [pc, #356]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8001032:	d802      	bhi.n	800103a <HAL_TIM_PeriodElapsedCallback+0x6fa>
        			          		         		         {
        			          		         		        month = 11;
 8001034:	4b57      	ldr	r3, [pc, #348]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001036:	220b      	movs	r2, #11
 8001038:	801a      	strh	r2, [r3, #0]
        			          		         		         		 }
        			          		  if((day>334) && (day<=365) )
 800103a:	4b55      	ldr	r3, [pc, #340]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 8001042:	d907      	bls.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x714>
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 800104c:	d202      	bcs.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x714>
        			          		          		         		         {
        			          		          		         		        month = 12;
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001050:	220c      	movs	r2, #12
 8001052:	801a      	strh	r2, [r3, #0]
        			          		          		         		         		 }
        		  }



        		  switch(month)
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001056:	881b      	ldrh	r3, [r3, #0]
 8001058:	3b01      	subs	r3, #1
 800105a:	2b0b      	cmp	r3, #11
 800105c:	f200 80cc 	bhi.w	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
 8001060:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001099 	.word	0x08001099
 800106c:	080010a1 	.word	0x080010a1
 8001070:	080010a9 	.word	0x080010a9
 8001074:	080010c1 	.word	0x080010c1
 8001078:	080010d9 	.word	0x080010d9
 800107c:	080010f1 	.word	0x080010f1
 8001080:	08001109 	.word	0x08001109
 8001084:	08001121 	.word	0x08001121
 8001088:	08001139 	.word	0x08001139
 800108c:	08001151 	.word	0x08001151
 8001090:	08001169 	.word	0x08001169
 8001094:	08001181 	.word	0x08001181
        		  {
        		  case 1:
        		  a_sec_month = 0;
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
        		  break;
 800109e:	e0ab      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
        		  case 2:
        		  a_sec_month = 2678400;
 80010a0:	4b3d      	ldr	r3, [pc, #244]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010a2:	4a3e      	ldr	r2, [pc, #248]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 80010a4:	601a      	str	r2, [r3, #0]
        		  break;
 80010a6:	e0a7      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
        		  case 3:
        			  if(!year%4)
 80010a8:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d103      	bne.n	80010b8 <HAL_TIM_PeriodElapsedCallback+0x778>
					  {
        		         		  a_sec_month = 60*86400;
 80010b0:	4b39      	ldr	r3, [pc, #228]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010b2:	4a3c      	ldr	r2, [pc, #240]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x864>)
 80010b4:	601a      	str	r2, [r3, #0]
					  }
        			  else
        			  {
        				  a_sec_month = 59*86400;
        			  }
        		     break;
 80010b6:	e09f      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
        				  a_sec_month = 59*86400;
 80010b8:	4b37      	ldr	r3, [pc, #220]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010ba:	4a3b      	ldr	r2, [pc, #236]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x868>)
 80010bc:	601a      	str	r2, [r3, #0]
        		     break;
 80010be:	e09b      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>

case 4:
if(!year%4)
 80010c0:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0x790>
{
a_sec_month = 91*86400;
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010ca:	4a38      	ldr	r2, [pc, #224]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x86c>)
 80010cc:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 90*86400;
}
break;
 80010ce:	e093      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 90*86400;
 80010d0:	4b31      	ldr	r3, [pc, #196]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010d2:	4a37      	ldr	r2, [pc, #220]	; (80011b0 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80010d4:	601a      	str	r2, [r3, #0]
break;
 80010d6:	e08f      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 5:
if(!year%4)
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <HAL_TIM_PeriodElapsedCallback+0x7a8>
{
a_sec_month = 121*86400;
 80010e0:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x874>)
 80010e4:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 120*86400;
}
break;
 80010e6:	e087      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 120*86400;
 80010e8:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010ea:	4a33      	ldr	r2, [pc, #204]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80010ec:	601a      	str	r2, [r3, #0]
break;
 80010ee:	e083      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 6:
if(!year%4)
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d103      	bne.n	8001100 <HAL_TIM_PeriodElapsedCallback+0x7c0>
{
a_sec_month = 152*86400;
 80010f8:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 80010fa:	4a30      	ldr	r2, [pc, #192]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80010fc:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 151*86400;
}
break;
 80010fe:	e07b      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 151*86400;
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001104:	601a      	str	r2, [r3, #0]
break;
 8001106:	e077      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 7:
if(!year%4)
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <HAL_TIM_PeriodElapsedCallback+0x7d8>
{
a_sec_month = 182*86400;
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001114:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 181*86400;
}
break;
 8001116:	e06f      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 181*86400;
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800111a:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800111c:	601a      	str	r2, [r3, #0]
break;
 800111e:	e06b      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 8:
if(!year%4)
 8001120:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <HAL_TIM_PeriodElapsedCallback+0x7f0>
{
a_sec_month = 213*86400;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800112a:	4a28      	ldr	r2, [pc, #160]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800112c:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 212*86400;
}
break;
 800112e:	e063      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 212*86400;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001134:	601a      	str	r2, [r3, #0]
break;
 8001136:	e05f      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 9:
if(!year%4)
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d103      	bne.n	8001148 <HAL_TIM_PeriodElapsedCallback+0x808>
{
a_sec_month = 244*86400;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001142:	4a24      	ldr	r2, [pc, #144]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001144:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 243*86400;
}
break;
 8001146:	e057      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 243*86400;
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x898>)
 800114c:	601a      	str	r2, [r3, #0]
break;
 800114e:	e053      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 10:
if(!year%4)
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x820>
{
a_sec_month = 274*86400;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800115a:	4a20      	ldr	r2, [pc, #128]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800115c:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 273*86400;
}
break;
 800115e:	e04b      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 273*86400;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8001164:	601a      	str	r2, [r3, #0]
break;
 8001166:	e047      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 11:
if(!year%4)
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d103      	bne.n	8001178 <HAL_TIM_PeriodElapsedCallback+0x838>
{
a_sec_month = 305*86400;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8001174:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 304*86400;
}
break;
 8001176:	e03f      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
a_sec_month = 304*86400;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800117a:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 800117c:	601a      	str	r2, [r3, #0]
break;
 800117e:	e03b      	b.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x8b8>
case 12:
if(!year%4)
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d133      	bne.n	80011f0 <HAL_TIM_PeriodElapsedCallback+0x8b0>
{
a_sec_month = 335*86400;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x858>)
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800118c:	601a      	str	r2, [r3, #0]
}
else
{
a_sec_month = 334*86400;
}
break;
 800118e:	e032      	b.n	80011f6 <HAL_TIM_PeriodElapsedCallback+0x8b6>
 8001190:	2000024c 	.word	0x2000024c
 8001194:	2000017c 	.word	0x2000017c
 8001198:	2000023c 	.word	0x2000023c
 800119c:	0028de80 	.word	0x0028de80
 80011a0:	20000242 	.word	0x20000242
 80011a4:	004f1a00 	.word	0x004f1a00
 80011a8:	004dc880 	.word	0x004dc880
 80011ac:	0077f880 	.word	0x0077f880
 80011b0:	0076a700 	.word	0x0076a700
 80011b4:	009f8580 	.word	0x009f8580
 80011b8:	009e3400 	.word	0x009e3400
 80011bc:	00c86400 	.word	0x00c86400
 80011c0:	00c71280 	.word	0x00c71280
 80011c4:	00eff100 	.word	0x00eff100
 80011c8:	00ee9f80 	.word	0x00ee9f80
 80011cc:	0118cf80 	.word	0x0118cf80
 80011d0:	01177e00 	.word	0x01177e00
 80011d4:	0141ae00 	.word	0x0141ae00
 80011d8:	01405c80 	.word	0x01405c80
 80011dc:	01693b00 	.word	0x01693b00
 80011e0:	0167e980 	.word	0x0167e980
 80011e4:	01921980 	.word	0x01921980
 80011e8:	0190c800 	.word	0x0190c800
 80011ec:	01b9a680 	.word	0x01b9a680
a_sec_month = 334*86400;
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80011f2:	4a54      	ldr	r2, [pc, #336]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 80011f4:	601a      	str	r2, [r3, #0]
break;
 80011f6:	bf00      	nop

        		  }


        		  a_sec_day = a_sec - a_sec_month;
 80011f8:	4b53      	ldr	r3, [pc, #332]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	4a52      	ldr	r2, [pc, #328]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001204:	6013      	str	r3, [r2, #0]
                  cnt_day = a_sec_day/86400 + 1;
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a51      	ldr	r2, [pc, #324]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	b2db      	uxtb	r3, r3
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800121a:	701a      	strb	r2, [r3, #0]
                  a_sec_hour = a_sec_day - (cnt_day -1)*86400;
 800121c:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a4c      	ldr	r2, [pc, #304]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001222:	7812      	ldrb	r2, [r2, #0]
 8001224:	3a01      	subs	r2, #1
 8001226:	494c      	ldr	r1, [pc, #304]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001228:	fb01 f202 	mul.w	r2, r1, r2
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001230:	6013      	str	r3, [r2, #0]
                  cnt_hour = a_sec_hour/3600;
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8001238:	fba2 2303 	umull	r2, r3, r2, r3
 800123c:	0adb      	lsrs	r3, r3, #11
 800123e:	b2da      	uxtb	r2, r3
 8001240:	4b48      	ldr	r3, [pc, #288]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8001242:	701a      	strb	r2, [r3, #0]
                  a_sec_min = a_sec_hour - cnt_hour*3600;
 8001244:	4b45      	ldr	r3, [pc, #276]	; (800135c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a46      	ldr	r2, [pc, #280]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 800124a:	7812      	ldrb	r2, [r2, #0]
 800124c:	4611      	mov	r1, r2
 800124e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001252:	fb02 f201 	mul.w	r2, r2, r1
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800125a:	6013      	str	r3, [r2, #0]
                  cnt_min = a_sec_min/60;
 800125c:	4b42      	ldr	r3, [pc, #264]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a42      	ldr	r2, [pc, #264]	; (800136c <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800126c:	701a      	strb	r2, [r3, #0]
                  cnt_sec = a_sec_min - cnt_min*60;
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b3e      	ldr	r3, [pc, #248]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	0109      	lsls	r1, r1, #4
 800127c:	1acb      	subs	r3, r1, r3
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8001288:	701a      	strb	r2, [r3, #0]

        		// snprintf(trans_str, 63, "Time s registra %d\n", timecounter);
             ///	 HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);

             	 snprintf(trans_str, 63, "Day, month, year %d/%d/20%d\n",   cnt_day, month, year);
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	460b      	mov	r3, r1
 80012a0:	4a37      	ldr	r2, [pc, #220]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 80012a2:	213f      	movs	r1, #63	; 0x3f
 80012a4:	4837      	ldr	r0, [pc, #220]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012a6:	f004 fb2f 	bl	8005908 <sniprintf>
             	 HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80012aa:	4836      	ldr	r0, [pc, #216]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012ac:	f7fe ff50 	bl	8000150 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	4932      	ldr	r1, [pc, #200]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012ba:	4833      	ldr	r0, [pc, #204]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80012bc:	f004 f987 	bl	80055ce <HAL_UART_Transmit>
             	 snprintf(trans_str, 63, "Hour, min, sec %d:%d:%d\n",   cnt_hour, cnt_min, cnt_sec);
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	460b      	mov	r3, r1
 80012d6:	4a2d      	ldr	r2, [pc, #180]	; (800138c <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 80012d8:	213f      	movs	r1, #63	; 0x3f
 80012da:	482a      	ldr	r0, [pc, #168]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012dc:	f004 fb14 	bl	8005908 <sniprintf>
             	 HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80012e0:	4828      	ldr	r0, [pc, #160]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012e2:	f7fe ff35 	bl	8000150 <strlen>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	4925      	ldr	r1, [pc, #148]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012f0:	4825      	ldr	r0, [pc, #148]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80012f2:	f004 f96c 	bl	80055ce <HAL_UART_Transmit>

             	 snprintf(trans_str, 63, "Set time v formate xx/xx/xx - date xx:xx:xx - time\n");
 80012f6:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 80012f8:	213f      	movs	r1, #63	; 0x3f
 80012fa:	4822      	ldr	r0, [pc, #136]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80012fc:	f004 fb04 	bl	8005908 <sniprintf>
             	 HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001300:	4820      	ldr	r0, [pc, #128]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001302:	f7fe ff25 	bl	8000150 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	b29a      	uxth	r2, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	491d      	ldr	r1, [pc, #116]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8001312:	f004 f95c 	bl	80055ce <HAL_UART_Transmit>
             	 snprintf(trans_str, 63, "Example 01/08/22 10:12:58\n" );
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8001318:	213f      	movs	r1, #63	; 0x3f
 800131a:	481a      	ldr	r0, [pc, #104]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800131c:	f004 faf4 	bl	8005908 <sniprintf>
             	 HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001322:	f7fe ff15 	bl	8000150 <strlen>
 8001326:	4603      	mov	r3, r0
 8001328:	b29a      	uxth	r2, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	4915      	ldr	r1, [pc, #84]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001330:	4815      	ldr	r0, [pc, #84]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8001332:	f004 f94c 	bl	80055ce <HAL_UART_Transmit>
    //   HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
    //   snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
    //   HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);

        }
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000023c 	.word	0x2000023c
 8001344:	01b85500 	.word	0x01b85500
 8001348:	200001d4 	.word	0x200001d4
 800134c:	200001f0 	.word	0x200001f0
 8001350:	c22e4507 	.word	0xc22e4507
 8001354:	20000168 	.word	0x20000168
 8001358:	00015180 	.word	0x00015180
 800135c:	2000025c 	.word	0x2000025c
 8001360:	91a2b3c5 	.word	0x91a2b3c5
 8001364:	20000170 	.word	0x20000170
 8001368:	2000026c 	.word	0x2000026c
 800136c:	88888889 	.word	0x88888889
 8001370:	20000260 	.word	0x20000260
 8001374:	20000184 	.word	0x20000184
 8001378:	2000017c 	.word	0x2000017c
 800137c:	20000242 	.word	0x20000242
 8001380:	080061bc 	.word	0x080061bc
 8001384:	2000008c 	.word	0x2000008c
 8001388:	20000188 	.word	0x20000188
 800138c:	080061dc 	.word	0x080061dc
 8001390:	080061f8 	.word	0x080061f8
 8001394:	0800622c 	.word	0x0800622c

08001398 <DWT_Init>:




void DWT_Init(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <DWT_Init+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <DWT_Init+0x24>)
 80013a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013a6:	6013      	str	r3, [r2, #0]
    DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <DWT_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DWT_Init+0x28>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000edfc 	.word	0xe000edfc
 80013c0:	e0001000 	.word	0xe0001000

080013c4 <delay_micros>:

void delay_micros(uint32_t us)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000); // получаем кол-во тактов за 1 мкс и умножаем на наше значение
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <delay_micros+0x3c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <delay_micros+0x40>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <delay_micros+0x44>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80013e6:	bf00      	nop
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <delay_micros+0x44>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d8fa      	bhi.n	80013e8 <delay_micros+0x24>
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	431bde83 	.word	0x431bde83
 8001408:	e0001000 	.word	0xe0001000

0800140c <lcd_com>:

void  lcd_com (unsigned char cmd);
  void  lcd_com (unsigned char cmd)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
	  if ((cmd & 0x80) == 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db06      	blt.n	800142c <lcd_com+0x20>
	  {
		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001424:	4856      	ldr	r0, [pc, #344]	; (8001580 <lcd_com+0x174>)
 8001426:	f002 fd7a 	bl	8003f1e <HAL_GPIO_WritePin>
 800142a:	e005      	b.n	8001438 <lcd_com+0x2c>
	  }

	  else
	  {
		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001432:	4853      	ldr	r0, [pc, #332]	; (8001580 <lcd_com+0x174>)
 8001434:	f002 fd73 	bl	8003f1e <HAL_GPIO_WritePin>
	  }

	  if ((cmd & 0x40) == 0)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <lcd_com+0x44>
	 	  {
	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001448:	484d      	ldr	r0, [pc, #308]	; (8001580 <lcd_com+0x174>)
 800144a:	f002 fd68 	bl	8003f1e <HAL_GPIO_WritePin>
 800144e:	e005      	b.n	800145c <lcd_com+0x50>
	 	  }

	 	  else
	 	  {
	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001456:	484a      	ldr	r0, [pc, #296]	; (8001580 <lcd_com+0x174>)
 8001458:	f002 fd61 	bl	8003f1e <HAL_GPIO_WritePin>
	 	  }

	  if ((cmd & 0x20) == 0)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	2b00      	cmp	r3, #0
 8001464:	d105      	bne.n	8001472 <lcd_com+0x66>
		  {
			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	4845      	ldr	r0, [pc, #276]	; (8001580 <lcd_com+0x174>)
 800146c:	f002 fd57 	bl	8003f1e <HAL_GPIO_WritePin>
 8001470:	e004      	b.n	800147c <lcd_com+0x70>
		  }

		  else
		  {
			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	4842      	ldr	r0, [pc, #264]	; (8001580 <lcd_com+0x174>)
 8001478:	f002 fd51 	bl	8003f1e <HAL_GPIO_WritePin>
		  }

		  if ((cmd & 0x10) == 0)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <lcd_com+0x86>
		 	  {
		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	483d      	ldr	r0, [pc, #244]	; (8001580 <lcd_com+0x174>)
 800148c:	f002 fd47 	bl	8003f1e <HAL_GPIO_WritePin>
 8001490:	e004      	b.n	800149c <lcd_com+0x90>
		 	  }

		 	  else
		 	  {
		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2120      	movs	r1, #32
 8001496:	483a      	ldr	r0, [pc, #232]	; (8001580 <lcd_com+0x174>)
 8001498:	f002 fd41 	bl	8003f1e <HAL_GPIO_WritePin>
		 	  }



      // PORTB = (cmd & 0xF0);
       RS0;   /*Для передачи команды*/
 800149c:	2200      	movs	r2, #0
 800149e:	2108      	movs	r1, #8
 80014a0:	4837      	ldr	r0, [pc, #220]	; (8001580 <lcd_com+0x174>)
 80014a2:	f002 fd3c 	bl	8003f1e <HAL_GPIO_WritePin>
       E1;     /*Подтверждение передачи данных*/
 80014a6:	2201      	movs	r2, #1
 80014a8:	2110      	movs	r1, #16
 80014aa:	4835      	ldr	r0, [pc, #212]	; (8001580 <lcd_com+0x174>)
 80014ac:	f002 fd37 	bl	8003f1e <HAL_GPIO_WritePin>
       delay_micros(1000);
 80014b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b4:	f7ff ff86 	bl	80013c4 <delay_micros>
    //   delay_us (50);
       E0;
 80014b8:	2200      	movs	r2, #0
 80014ba:	2110      	movs	r1, #16
 80014bc:	4830      	ldr	r0, [pc, #192]	; (8001580 <lcd_com+0x174>)
 80014be:	f002 fd2e 	bl	8003f1e <HAL_GPIO_WritePin>
       if ((cmd & 0x08) == 0)
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <lcd_com+0xce>
      	  {
      		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d2:	482b      	ldr	r0, [pc, #172]	; (8001580 <lcd_com+0x174>)
 80014d4:	f002 fd23 	bl	8003f1e <HAL_GPIO_WritePin>
 80014d8:	e005      	b.n	80014e6 <lcd_com+0xda>
      	  }

      	  else
      	  {
      		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_SET);
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e0:	4827      	ldr	r0, [pc, #156]	; (8001580 <lcd_com+0x174>)
 80014e2:	f002 fd1c 	bl	8003f1e <HAL_GPIO_WritePin>
      	  }

      	  if ((cmd & 0x04) == 0)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d106      	bne.n	80014fe <lcd_com+0xf2>
      	 	  {
      	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f6:	4822      	ldr	r0, [pc, #136]	; (8001580 <lcd_com+0x174>)
 80014f8:	f002 fd11 	bl	8003f1e <HAL_GPIO_WritePin>
 80014fc:	e005      	b.n	800150a <lcd_com+0xfe>
      	 	  }

      	 	  else
      	 	  {
      	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001504:	481e      	ldr	r0, [pc, #120]	; (8001580 <lcd_com+0x174>)
 8001506:	f002 fd0a 	bl	8003f1e <HAL_GPIO_WritePin>
      	 	  }

      	  if ((cmd & 0x02) == 0)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <lcd_com+0x114>
      		  {
      			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4819      	ldr	r0, [pc, #100]	; (8001580 <lcd_com+0x174>)
 800151a:	f002 fd00 	bl	8003f1e <HAL_GPIO_WritePin>
 800151e:	e004      	b.n	800152a <lcd_com+0x11e>
      		  }

      		  else
      		  {
      			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	4816      	ldr	r0, [pc, #88]	; (8001580 <lcd_com+0x174>)
 8001526:	f002 fcfa 	bl	8003f1e <HAL_GPIO_WritePin>
      		  }

      		  if ((cmd & 0x01) == 0)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <lcd_com+0x134>
      		 	  {
      		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2120      	movs	r1, #32
 8001538:	4811      	ldr	r0, [pc, #68]	; (8001580 <lcd_com+0x174>)
 800153a:	f002 fcf0 	bl	8003f1e <HAL_GPIO_WritePin>
 800153e:	e004      	b.n	800154a <lcd_com+0x13e>
      		 	  }

      		 	  else
      		 	  {
      		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2120      	movs	r1, #32
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <lcd_com+0x174>)
 8001546:	f002 fcea 	bl	8003f1e <HAL_GPIO_WritePin>
      		 	  }


       /*Передаем младший полубайт * 0000 1111*/
       RS0;
 800154a:	2200      	movs	r2, #0
 800154c:	2108      	movs	r1, #8
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <lcd_com+0x174>)
 8001550:	f002 fce5 	bl	8003f1e <HAL_GPIO_WritePin>
       E1;
 8001554:	2201      	movs	r2, #1
 8001556:	2110      	movs	r1, #16
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <lcd_com+0x174>)
 800155a:	f002 fce0 	bl	8003f1e <HAL_GPIO_WritePin>
       delay_micros(1000);
 800155e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001562:	f7ff ff2f 	bl	80013c4 <delay_micros>
    ///  delay_us (50);
      E0;
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <lcd_com+0x174>)
 800156c:	f002 fcd7 	bl	8003f1e <HAL_GPIO_WritePin>
      delay_micros(1000);
 8001570:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001574:	f7ff ff26 	bl	80013c4 <delay_micros>
    ///  delay_us (50);
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40010c00 	.word	0x40010c00

08001584 <lcd_dat>:

  void  lcd_dat (unsigned char data);
  void  lcd_dat (unsigned char data)
  {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]

	  if ((data & 0x80) == 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db06      	blt.n	80015a4 <lcd_dat+0x20>
	 	  {
	 		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	4856      	ldr	r0, [pc, #344]	; (80016f8 <lcd_dat+0x174>)
 800159e:	f002 fcbe 	bl	8003f1e <HAL_GPIO_WritePin>
 80015a2:	e005      	b.n	80015b0 <lcd_dat+0x2c>
	 	  }

	 	  else
	 	  {
	 		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015aa:	4853      	ldr	r0, [pc, #332]	; (80016f8 <lcd_dat+0x174>)
 80015ac:	f002 fcb7 	bl	8003f1e <HAL_GPIO_WritePin>
	 	  }

	 	  if ((data & 0x40) == 0)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <lcd_dat+0x44>
	 	 	  {
	 	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c0:	484d      	ldr	r0, [pc, #308]	; (80016f8 <lcd_dat+0x174>)
 80015c2:	f002 fcac 	bl	8003f1e <HAL_GPIO_WritePin>
 80015c6:	e005      	b.n	80015d4 <lcd_dat+0x50>
	 	 	  }

	 	 	  else
	 	 	  {
	 	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ce:	484a      	ldr	r0, [pc, #296]	; (80016f8 <lcd_dat+0x174>)
 80015d0:	f002 fca5 	bl	8003f1e <HAL_GPIO_WritePin>
	 	 	  }

	 	  if ((data & 0x20) == 0)
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d105      	bne.n	80015ea <lcd_dat+0x66>
	 		  {
	 			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2140      	movs	r1, #64	; 0x40
 80015e2:	4845      	ldr	r0, [pc, #276]	; (80016f8 <lcd_dat+0x174>)
 80015e4:	f002 fc9b 	bl	8003f1e <HAL_GPIO_WritePin>
 80015e8:	e004      	b.n	80015f4 <lcd_dat+0x70>
	 		  }

	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	4842      	ldr	r0, [pc, #264]	; (80016f8 <lcd_dat+0x174>)
 80015f0:	f002 fc95 	bl	8003f1e <HAL_GPIO_WritePin>
	 		  }

	 		  if ((data & 0x10) == 0)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <lcd_dat+0x86>
	 		 	  {
	 		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	483d      	ldr	r0, [pc, #244]	; (80016f8 <lcd_dat+0x174>)
 8001604:	f002 fc8b 	bl	8003f1e <HAL_GPIO_WritePin>
 8001608:	e004      	b.n	8001614 <lcd_dat+0x90>
	 		 	  }

	 		 	  else
	 		 	  {
	 		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2120      	movs	r1, #32
 800160e:	483a      	ldr	r0, [pc, #232]	; (80016f8 <lcd_dat+0x174>)
 8001610:	f002 fc85 	bl	8003f1e <HAL_GPIO_WritePin>
	 		 	  }
           RS1;
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	4837      	ldr	r0, [pc, #220]	; (80016f8 <lcd_dat+0x174>)
 800161a:	f002 fc80 	bl	8003f1e <HAL_GPIO_WritePin>
           E1;
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	4835      	ldr	r0, [pc, #212]	; (80016f8 <lcd_dat+0x174>)
 8001624:	f002 fc7b 	bl	8003f1e <HAL_GPIO_WritePin>
           delay_micros(1000);
 8001628:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800162c:	f7ff feca 	bl	80013c4 <delay_micros>
         ///  delay_us (50);

           E0;
 8001630:	2200      	movs	r2, #0
 8001632:	2110      	movs	r1, #16
 8001634:	4830      	ldr	r0, [pc, #192]	; (80016f8 <lcd_dat+0x174>)
 8001636:	f002 fc72 	bl	8003f1e <HAL_GPIO_WritePin>
           if ((data & 0x08) == 0)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <lcd_dat+0xce>
                	  {
                		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164a:	482b      	ldr	r0, [pc, #172]	; (80016f8 <lcd_dat+0x174>)
 800164c:	f002 fc67 	bl	8003f1e <HAL_GPIO_WritePin>
 8001650:	e005      	b.n	800165e <lcd_dat+0xda>
                	  }

                	  else
                	  {
                		  HAL_GPIO_WritePin(B7_GPIO_Port, B7_Pin, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001658:	4827      	ldr	r0, [pc, #156]	; (80016f8 <lcd_dat+0x174>)
 800165a:	f002 fc60 	bl	8003f1e <HAL_GPIO_WritePin>
                	  }

                	  if ((data & 0x04) == 0)
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d106      	bne.n	8001676 <lcd_dat+0xf2>
                	 	  {
                	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166e:	4822      	ldr	r0, [pc, #136]	; (80016f8 <lcd_dat+0x174>)
 8001670:	f002 fc55 	bl	8003f1e <HAL_GPIO_WritePin>
 8001674:	e005      	b.n	8001682 <lcd_dat+0xfe>
                	 	  }

                	 	  else
                	 	  {
                	 		  HAL_GPIO_WritePin(B6_GPIO_Port, B6_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	481e      	ldr	r0, [pc, #120]	; (80016f8 <lcd_dat+0x174>)
 800167e:	f002 fc4e 	bl	8003f1e <HAL_GPIO_WritePin>
                	 	  }

                	  if ((data & 0x02) == 0)
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d105      	bne.n	8001698 <lcd_dat+0x114>
                		  {
                			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <lcd_dat+0x174>)
 8001692:	f002 fc44 	bl	8003f1e <HAL_GPIO_WritePin>
 8001696:	e004      	b.n	80016a2 <lcd_dat+0x11e>
                		  }

                		  else
                		  {
                			  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	4816      	ldr	r0, [pc, #88]	; (80016f8 <lcd_dat+0x174>)
 800169e:	f002 fc3e 	bl	8003f1e <HAL_GPIO_WritePin>
                		  }

                		  if ((data & 0x01) == 0)
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <lcd_dat+0x134>
                		 	  {
                		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	4811      	ldr	r0, [pc, #68]	; (80016f8 <lcd_dat+0x174>)
 80016b2:	f002 fc34 	bl	8003f1e <HAL_GPIO_WritePin>
 80016b6:	e004      	b.n	80016c2 <lcd_dat+0x13e>
                		 	  }

                		 	  else
                		 	  {
                		 		  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	480e      	ldr	r0, [pc, #56]	; (80016f8 <lcd_dat+0x174>)
 80016be:	f002 fc2e 	bl	8003f1e <HAL_GPIO_WritePin>
                		 	  }
           RS1;
 80016c2:	2201      	movs	r2, #1
 80016c4:	2108      	movs	r1, #8
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <lcd_dat+0x174>)
 80016c8:	f002 fc29 	bl	8003f1e <HAL_GPIO_WritePin>
           E1;
 80016cc:	2201      	movs	r2, #1
 80016ce:	2110      	movs	r1, #16
 80016d0:	4809      	ldr	r0, [pc, #36]	; (80016f8 <lcd_dat+0x174>)
 80016d2:	f002 fc24 	bl	8003f1e <HAL_GPIO_WritePin>
           delay_micros(1000);
 80016d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016da:	f7ff fe73 	bl	80013c4 <delay_micros>
         //  delay_us (50);
           E0;
 80016de:	2200      	movs	r2, #0
 80016e0:	2110      	movs	r1, #16
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <lcd_dat+0x174>)
 80016e4:	f002 fc1b 	bl	8003f1e <HAL_GPIO_WritePin>
           delay_micros(1000);
 80016e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ec:	f7ff fe6a 	bl	80013c4 <delay_micros>
         // delay_us (50);
  }
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40010c00 	.word	0x40010c00

080016fc <Initialization>:


  void Initialization (void);
  void Initialization (void) /*Определяем функцию инициализации */
  {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

   // DDRD = 0xF3;

   // PORTD = 0x00;

	  HAL_GPIO_WritePin(B5_GPIO_Port, B5_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	481c      	ldr	r0, [pc, #112]	; (8001778 <Initialization+0x7c>)
 8001706:	f002 fc0a 	bl	8003f1e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(B4_GPIO_Port, B4_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2120      	movs	r1, #32
 800170e:	481a      	ldr	r0, [pc, #104]	; (8001778 <Initialization+0x7c>)
 8001710:	f002 fc05 	bl	8003f1e <HAL_GPIO_WritePin>
   //  PORTD.4 = 0;



  // Активизация четырехразрядного режима
       E1;
 8001714:	2201      	movs	r2, #1
 8001716:	2110      	movs	r1, #16
 8001718:	4817      	ldr	r0, [pc, #92]	; (8001778 <Initialization+0x7c>)
 800171a:	f002 fc00 	bl	8003f1e <HAL_GPIO_WritePin>
       delay_micros(5000);
 800171e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001722:	f7ff fe4f 	bl	80013c4 <delay_micros>
      // HAL_Delay(5);
     //  delay_ms(5);
        E0;
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	4813      	ldr	r0, [pc, #76]	; (8001778 <Initialization+0x7c>)
 800172c:	f002 fbf7 	bl	8003f1e <HAL_GPIO_WritePin>
   lcd_com(0x08); // Полное выключение дисплея
 8001730:	2008      	movs	r0, #8
 8001732:	f7ff fe6b 	bl	800140c <lcd_com>
   delay_micros(5000);
 8001736:	f241 3088 	movw	r0, #5000	; 0x1388
 800173a:	f7ff fe43 	bl	80013c4 <delay_micros>
  // HAL_Delay(5);
   // delay_ms(5);
  lcd_com(0x2A); // Шина 4 бит, LCD - 2 строки
 800173e:	202a      	movs	r0, #42	; 0x2a
 8001740:	f7ff fe64 	bl	800140c <lcd_com>
  delay_micros(10000);
 8001744:	f242 7010 	movw	r0, #10000	; 0x2710
 8001748:	f7ff fe3c 	bl	80013c4 <delay_micros>
//  HAL_Delay(10);
  //delay_ms(10);
  lcd_com(0x2A); // Шина 4 бит, LCD - 2 строки
 800174c:	202a      	movs	r0, #42	; 0x2a
 800174e:	f7ff fe5d 	bl	800140c <lcd_com>

  lcd_com(0x01); // Очистка дисплея
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff fe5a 	bl	800140c <lcd_com>
  delay_micros(1000);
 8001758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175c:	f7ff fe32 	bl	80013c4 <delay_micros>
//  HAL_Delay(1);
 // delay_us(300);
  lcd_com(0x06); // Сдвиг курсора вправо
 8001760:	2006      	movs	r0, #6
 8001762:	f7ff fe53 	bl	800140c <lcd_com>
  delay_micros(10000);
 8001766:	f242 7010 	movw	r0, #10000	; 0x2710
 800176a:	f7ff fe2b 	bl	80013c4 <delay_micros>
//  HAL_Delay(10);
 // delay_ms(10);
  lcd_com(0x0C); // Включение дисплея, курсор не видим
 800176e:	200c      	movs	r0, #12
 8001770:	f7ff fe4c 	bl	800140c <lcd_com>
  }
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40010c00 	.word	0x40010c00

0800177c <InstallationCursor>:


  void InstallationCursor (unsigned char x, unsigned char y);
  void InstallationCursor (unsigned char x, unsigned char y) /*пердаем в функцию номер символа(знакогенератора ) в строке, и номер строки.*/
  {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
             unsigned char adr;

             x--;    /*уменьшаем номер ячейки в строке так как начинается с 00*/
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	3b01      	subs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
             if (y > 1)
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d903      	bls.n	80017a0 <InstallationCursor+0x24>
               {
              adr = x + 64;
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	3340      	adds	r3, #64	; 0x40
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e001      	b.n	80017a4 <InstallationCursor+0x28>
               }  /*если вторая строка, то переводим символ на вторую строку, 64- в десятичной ,соответствует 40 в 16-ричной*/
              else
              {
              adr = x;
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	73fb      	strb	r3, [r7, #15]
              }    /* иначе присваиваем переменной позицию курсора в первой строке, добавляя максимальную длину строки*/
  /*Передаем номер ячейки  индикатору для этого проведем побитовое сложение*/
               adr = adr|0x80;    /*0xxx xxxx | 1000 0000*/
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017aa:	73fb      	strb	r3, [r7, #15]
               lcd_com (adr);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fe2c 	bl	800140c <lcd_com>

  }
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <PrintString>:

  void PrintString (char *sign);
   void PrintString (char *sign)
   {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
            unsigned char i;
            for (i=1;i<16;i++)  /* максимальное количество символов в строке, в шестнадцатеричной форме */
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e00e      	b.n	80017e8 <PrintString+0x2c>
             {
                   if (*sign == 0x00)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00e      	beq.n	80017f0 <PrintString+0x34>

                   break; /*Если передаваемый символ равен 0, конец строки, выход*/
                    }
                    else
                   {
                   lcd_dat (*sign);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fed4 	bl	8001584 <lcd_dat>
                   }  /*иначе передаем код символа индикатору, который распознает его, в соответствии с таблицей символов и выводит соответствующий*/

                   sign++; //переходим на следующий элемент массива
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
            for (i=1;i<16;i++)  /* максимальное количество символов в строке, в шестнадцатеричной форме */
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d9ed      	bls.n	80017ca <PrintString+0xe>
              }



   }
 80017ee:	e000      	b.n	80017f2 <PrintString+0x36>
                   break; /*Если передаваемый символ равен 0, конец строки, выход*/
 80017f0:	bf00      	nop
   }
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <Clear>:


   void Clear (void);
   void Clear (void)
   {
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
               lcd_com (0x01);
 80017fe:	2001      	movs	r0, #1
 8001800:	f7ff fe04 	bl	800140c <lcd_com>
               delay_micros(2000);
 8001804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001808:	f7ff fddc 	bl	80013c4 <delay_micros>
             //  delay_us (2000);
   }
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b08b      	sub	sp, #44	; 0x2c
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001816:	f002 f853 	bl	80038c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181a:	f000 fd7d 	bl	8002318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800181e:	f000 fe71 	bl	8002504 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001822:	f000 fe45 	bl	80024b0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001826:	f000 fdf1 	bl	800240c <MX_TIM1_Init>
  MX_RTC_Init();
 800182a:	f000 fdd3 	bl	80023d4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&MYUART, UART_IT_RXNE); // включить прерывания usart'
 800182e:	4baf      	ldr	r3, [pc, #700]	; (8001aec <main+0x2dc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4bad      	ldr	r3, [pc, #692]	; (8001aec <main+0x2dc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim1);
 800183e:	48ac      	ldr	r0, [pc, #688]	; (8001af0 <main+0x2e0>)
 8001840:	f003 faa0 	bl	8004d84 <HAL_TIM_Base_Start_IT>
  DWT_Init();
 8001844:	f7ff fda8 	bl	8001398 <DWT_Init>
  Initialization ();
 8001848:	f7ff ff58 	bl	80016fc <Initialization>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
		                  InstallationCursor (1, 1);
 800184c:	2101      	movs	r1, #1
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff ff94 	bl	800177c <InstallationCursor>
	             		  lcd_dat((cnt_hour/10)%10 +'0'); // Выделяем десятки
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <main+0x2e4>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	4aa7      	ldr	r2, [pc, #668]	; (8001af8 <main+0x2e8>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4ba5      	ldr	r3, [pc, #660]	; (8001af8 <main+0x2e8>)
 8001864:	fba3 1302 	umull	r1, r3, r3, r2
 8001868:	08d9      	lsrs	r1, r3, #3
 800186a:	460b      	mov	r3, r1
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3330      	adds	r3, #48	; 0x30
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fe82 	bl	8001584 <lcd_dat>
	             		  lcd_dat(cnt_hour%10 + '0'); // Выделяем единицы
 8001880:	4b9c      	ldr	r3, [pc, #624]	; (8001af4 <main+0x2e4>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b9c      	ldr	r3, [pc, #624]	; (8001af8 <main+0x2e8>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	08d9      	lsrs	r1, r3, #3
 800188c:	460b      	mov	r3, r1
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b2db      	uxtb	r3, r3
 8001898:	3330      	adds	r3, #48	; 0x30
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe71 	bl	8001584 <lcd_dat>
	             		  PrintString (":");
 80018a2:	4896      	ldr	r0, [pc, #600]	; (8001afc <main+0x2ec>)
 80018a4:	f7ff ff8a 	bl	80017bc <PrintString>
	             		  lcd_dat((cnt_min/10)%10 + '0'); // Выделяем десятки
 80018a8:	4b95      	ldr	r3, [pc, #596]	; (8001b00 <main+0x2f0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4a92      	ldr	r2, [pc, #584]	; (8001af8 <main+0x2e8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	08db      	lsrs	r3, r3, #3
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b90      	ldr	r3, [pc, #576]	; (8001af8 <main+0x2e8>)
 80018b8:	fba3 1302 	umull	r1, r3, r3, r2
 80018bc:	08d9      	lsrs	r1, r3, #3
 80018be:	460b      	mov	r3, r1
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	3330      	adds	r3, #48	; 0x30
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fe58 	bl	8001584 <lcd_dat>
	             		  lcd_dat(cnt_min%10 + '0'); // Выделяем единицы
 80018d4:	4b8a      	ldr	r3, [pc, #552]	; (8001b00 <main+0x2f0>)
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b87      	ldr	r3, [pc, #540]	; (8001af8 <main+0x2e8>)
 80018da:	fba3 1302 	umull	r1, r3, r3, r2
 80018de:	08d9      	lsrs	r1, r3, #3
 80018e0:	460b      	mov	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3330      	adds	r3, #48	; 0x30
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe47 	bl	8001584 <lcd_dat>
	             		  PrintString (":");
 80018f6:	4881      	ldr	r0, [pc, #516]	; (8001afc <main+0x2ec>)
 80018f8:	f7ff ff60 	bl	80017bc <PrintString>
	             		  lcd_dat((cnt_sec/10)%10 + '0'); // Выделяем десятки
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <main+0x2f4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4a7d      	ldr	r2, [pc, #500]	; (8001af8 <main+0x2e8>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	08db      	lsrs	r3, r3, #3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <main+0x2e8>)
 800190c:	fba3 1302 	umull	r1, r3, r3, r2
 8001910:	08d9      	lsrs	r1, r3, #3
 8001912:	460b      	mov	r3, r1
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3330      	adds	r3, #48	; 0x30
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe2e 	bl	8001584 <lcd_dat>
	             		  lcd_dat(cnt_sec%10 + '0'); // Выделяем единицы
 8001928:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <main+0x2f4>)
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <main+0x2e8>)
 800192e:	fba3 1302 	umull	r1, r3, r3, r2
 8001932:	08d9      	lsrs	r1, r3, #3
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	3330      	adds	r3, #48	; 0x30
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe1d 	bl	8001584 <lcd_dat>

	             		  InstallationCursor (1, 2);
 800194a:	2102      	movs	r1, #2
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff ff15 	bl	800177c <InstallationCursor>
	             		  lcd_dat((cnt_day/10)%10 + '0'); // Выделяем десятки
 8001952:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <main+0x2f8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4a68      	ldr	r2, [pc, #416]	; (8001af8 <main+0x2e8>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b65      	ldr	r3, [pc, #404]	; (8001af8 <main+0x2e8>)
 8001962:	fba3 1302 	umull	r1, r3, r3, r2
 8001966:	08d9      	lsrs	r1, r3, #3
 8001968:	460b      	mov	r3, r1
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	3330      	adds	r3, #48	; 0x30
 8001976:	b2db      	uxtb	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe03 	bl	8001584 <lcd_dat>
	             		  lcd_dat(cnt_day%10 + '0'); // Выделяем единицы
 800197e:	4b62      	ldr	r3, [pc, #392]	; (8001b08 <main+0x2f8>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <main+0x2e8>)
 8001984:	fba3 1302 	umull	r1, r3, r3, r2
 8001988:	08d9      	lsrs	r1, r3, #3
 800198a:	460b      	mov	r3, r1
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3330      	adds	r3, #48	; 0x30
 8001998:	b2db      	uxtb	r3, r3
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fdf2 	bl	8001584 <lcd_dat>
	             		  PrintString ("/");
 80019a0:	485a      	ldr	r0, [pc, #360]	; (8001b0c <main+0x2fc>)
 80019a2:	f7ff ff0b 	bl	80017bc <PrintString>
	             		  lcd_dat((month/10)%10 +'0'); // Выделяем десятки
 80019a6:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <main+0x300>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	4a53      	ldr	r2, [pc, #332]	; (8001af8 <main+0x2e8>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <main+0x2e8>)
 80019b6:	fba3 1302 	umull	r1, r3, r3, r2
 80019ba:	08d9      	lsrs	r1, r3, #3
 80019bc:	460b      	mov	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3330      	adds	r3, #48	; 0x30
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fdd8 	bl	8001584 <lcd_dat>
	             		  lcd_dat(month%10 + '0'); // Выделяем единицы
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <main+0x300>)
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <main+0x2e8>)
 80019da:	fba3 1302 	umull	r1, r3, r3, r2
 80019de:	08d9      	lsrs	r1, r3, #3
 80019e0:	460b      	mov	r3, r1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3330      	adds	r3, #48	; 0x30
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fdc6 	bl	8001584 <lcd_dat>
	             		   PrintString ("/2");
 80019f8:	4846      	ldr	r0, [pc, #280]	; (8001b14 <main+0x304>)
 80019fa:	f7ff fedf 	bl	80017bc <PrintString>

	             		 lcd_dat((year/100)%10 + '0'); // Выделяем единицы
 80019fe:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <main+0x308>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <main+0x30c>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <main+0x2e8>)
 8001a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001a12:	08d9      	lsrs	r1, r3, #3
 8001a14:	460b      	mov	r3, r1
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	3330      	adds	r3, #48	; 0x30
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fdac 	bl	8001584 <lcd_dat>
	             		 lcd_dat((year/10)%10 + '0'); // Выделяем десятки
 8001a2c:	4b3a      	ldr	r3, [pc, #232]	; (8001b18 <main+0x308>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <main+0x2e8>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <main+0x2e8>)
 8001a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a40:	08d9      	lsrs	r1, r3, #3
 8001a42:	460b      	mov	r3, r1
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3330      	adds	r3, #48	; 0x30
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fd95 	bl	8001584 <lcd_dat>
	             		 lcd_dat(year%10 + '0'); // Выделяем единицы
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <main+0x308>)
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <main+0x2e8>)
 8001a60:	fba3 1302 	umull	r1, r3, r3, r2
 8001a64:	08d9      	lsrs	r1, r3, #3
 8001a66:	460b      	mov	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3330      	adds	r3, #48	; 0x30
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fd83 	bl	8001584 <lcd_dat>

	             		  HAL_Delay(1000);
 8001a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a82:	f001 ff7f 	bl	8003984 <HAL_Delay>





	  if(uart_available()) // есть ли что-то в приёмном буфере, тогда читаем
 8001a86:	f001 feb3 	bl	80037f0 <uart_available>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f43f aedd 	beq.w	800184c <main+0x3c>
  {
		   char str[SIZE_BF] = {0,};
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]
		  // char str[] = {0,};
		 	                       //    char str1[SIZE_BF] = {0,};
		    uint8_t i = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 //   uint8_t b = 0;
		                             //   uint8_t temp;
		  while(uart_available())
 8001ab0:	e015      	b.n	8001ade <main+0x2ce>
		  {
		 str[i++] = uart_read(); // читаем байт
 8001ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001abc:	461c      	mov	r4, r3
 8001abe:	f001 feaf 	bl	8003820 <uart_read>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aca:	4423      	add	r3, r4
 8001acc:	f803 2c24 	strb.w	r2, [r3, #-36]

	    if(i == SIZE_BF - 1)
 8001ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	d023      	beq.n	8001b20 <main+0x310>
	  {
		   //  str[i] = '\0';
     break;
	 }

   HAL_Delay(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f001 ff53 	bl	8003984 <HAL_Delay>
		  while(uart_available())
 8001ade:	f001 fe87 	bl	80037f0 <uart_available>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e4      	bne.n	8001ab2 <main+0x2a2>
 8001ae8:	e01b      	b.n	8001b22 <main+0x312>
 8001aea:	bf00      	nop
 8001aec:	20000188 	.word	0x20000188
 8001af0:	200001f4 	.word	0x200001f4
 8001af4:	20000170 	.word	0x20000170
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	08006248 	.word	0x08006248
 8001b00:	20000260 	.word	0x20000260
 8001b04:	20000184 	.word	0x20000184
 8001b08:	20000168 	.word	0x20000168
 8001b0c:	0800624c 	.word	0x0800624c
 8001b10:	2000017c 	.word	0x2000017c
 8001b14:	08006250 	.word	0x08006250
 8001b18:	20000242 	.word	0x20000242
 8001b1c:	51eb851f 	.word	0x51eb851f
     break;
 8001b20:	bf00      	nop

/// b = str[0];



		  if((str[2] == '/') && (str[5] == '/') &&(str[8] == ' ') &&(str[11] == ':') &&(str[14] == ':'))
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	2b2f      	cmp	r3, #47	; 0x2f
 8001b26:	f47f ae91 	bne.w	800184c <main+0x3c>
 8001b2a:	7a7b      	ldrb	r3, [r7, #9]
 8001b2c:	2b2f      	cmp	r3, #47	; 0x2f
 8001b2e:	f47f ae8d 	bne.w	800184c <main+0x3c>
 8001b32:	7b3b      	ldrb	r3, [r7, #12]
 8001b34:	2b20      	cmp	r3, #32
 8001b36:	f47f ae89 	bne.w	800184c <main+0x3c>
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b3a      	cmp	r3, #58	; 0x3a
 8001b3e:	f47f ae85 	bne.w	800184c <main+0x3c>
 8001b42:	7cbb      	ldrb	r3, [r7, #18]
 8001b44:	2b3a      	cmp	r3, #58	; 0x3a
 8001b46:	f47f ae81 	bne.w	800184c <main+0x3c>
				  {
			  hour =   10*(str[9] & 0x0F) + (str[10] & 0x0F);
 8001b4a:	7b7b      	ldrb	r3, [r7, #13]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	0092      	lsls	r2, r2, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4baf      	ldr	r3, [pc, #700]	; (8001e28 <main+0x618>)
 8001b6a:	701a      	strb	r2, [r3, #0]
			  min =   10*(str[12] & 0x0F) + (str[13] & 0x0F);
 8001b6c:	7c3b      	ldrb	r3, [r7, #16]
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	7c7b      	ldrb	r3, [r7, #17]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4ba8      	ldr	r3, [pc, #672]	; (8001e2c <main+0x61c>)
 8001b8c:	701a      	strb	r2, [r3, #0]
			  sec =   10*(str[15] & 0x0F) + (str[16] & 0x0F);
 8001b8e:	7cfb      	ldrb	r3, [r7, #19]
 8001b90:	f003 020f 	and.w	r2, r3, #15
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	7d3b      	ldrb	r3, [r7, #20]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4413      	add	r3, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4ba1      	ldr	r3, [pc, #644]	; (8001e30 <main+0x620>)
 8001baa:	601a      	str	r2, [r3, #0]
			  day_vvod = 10*(str[0] & 0x0F) + (str[1] & 0x0F);
 8001bac:	793b      	ldrb	r3, [r7, #4]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	797b      	ldrb	r3, [r7, #5]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b9a      	ldr	r3, [pc, #616]	; (8001e34 <main+0x624>)
 8001bcc:	701a      	strb	r2, [r3, #0]
			  month_vvod = 10*(str[3] & 0x0F) + (str[4] & 0x0F);
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7a3b      	ldrb	r3, [r7, #8]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b92      	ldr	r3, [pc, #584]	; (8001e38 <main+0x628>)
 8001bee:	701a      	strb	r2, [r3, #0]
			  year_vvod = 	10*(str[6] & 0x0F) + (str[7] & 0x0F);
 8001bf0:	7abb      	ldrb	r3, [r7, #10]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	7afb      	ldrb	r3, [r7, #11]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <main+0x62c>)
 8001c10:	701a      	strb	r2, [r3, #0]
              day_sec = 0;
 8001c12:	4b8b      	ldr	r3, [pc, #556]	; (8001e40 <main+0x630>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
              month_sec =0;
 8001c18:	4b8a      	ldr	r3, [pc, #552]	; (8001e44 <main+0x634>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
              year_sec = 0;
 8001c1e:	4b8a      	ldr	r3, [pc, #552]	; (8001e48 <main+0x638>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]



			  if((hour > 23) || (min > 59) || (sec > 59))
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <main+0x618>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b17      	cmp	r3, #23
 8001c2a:	d807      	bhi.n	8001c3c <main+0x42c>
 8001c2c:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <main+0x61c>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b3b      	cmp	r3, #59	; 0x3b
 8001c32:	d803      	bhi.n	8001c3c <main+0x42c>
 8001c34:	4b7e      	ldr	r3, [pc, #504]	; (8001e30 <main+0x620>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b3b      	cmp	r3, #59	; 0x3b
 8001c3a:	d944      	bls.n	8001cc6 <main+0x4b6>
			  {
		      HAL_TIM_Base_Stop_IT(&htim1);
 8001c3c:	4883      	ldr	r0, [pc, #524]	; (8001e4c <main+0x63c>)
 8001c3e:	f003 f8f3 	bl	8004e28 <HAL_TIM_Base_Stop_IT>
		      snprintf(trans_str, 63, "SET ERROR TIME\n");
 8001c42:	4a83      	ldr	r2, [pc, #524]	; (8001e50 <main+0x640>)
 8001c44:	213f      	movs	r1, #63	; 0x3f
 8001c46:	4883      	ldr	r0, [pc, #524]	; (8001e54 <main+0x644>)
 8001c48:	f003 fe5e 	bl	8005908 <sniprintf>
		      HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001c4c:	4881      	ldr	r0, [pc, #516]	; (8001e54 <main+0x644>)
 8001c4e:	f7fe fa7f 	bl	8000150 <strlen>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5a:	497e      	ldr	r1, [pc, #504]	; (8001e54 <main+0x644>)
 8001c5c:	487e      	ldr	r0, [pc, #504]	; (8001e58 <main+0x648>)
 8001c5e:	f003 fcb6 	bl	80055ce <HAL_UART_Transmit>
		      HAL_Delay(1000);
 8001c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c66:	f001 fe8d 	bl	8003984 <HAL_Delay>
			  snprintf(trans_str, 63, "SET ERROR TIME\n");
 8001c6a:	4a79      	ldr	r2, [pc, #484]	; (8001e50 <main+0x640>)
 8001c6c:	213f      	movs	r1, #63	; 0x3f
 8001c6e:	4879      	ldr	r0, [pc, #484]	; (8001e54 <main+0x644>)
 8001c70:	f003 fe4a 	bl	8005908 <sniprintf>
		      HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001c74:	4877      	ldr	r0, [pc, #476]	; (8001e54 <main+0x644>)
 8001c76:	f7fe fa6b 	bl	8000150 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c82:	4974      	ldr	r1, [pc, #464]	; (8001e54 <main+0x644>)
 8001c84:	4874      	ldr	r0, [pc, #464]	; (8001e58 <main+0x648>)
 8001c86:	f003 fca2 	bl	80055ce <HAL_UART_Transmit>
		      HAL_Delay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8e:	f001 fe79 	bl	8003984 <HAL_Delay>
		      snprintf(trans_str, 63, "SET ERROR TIME\n");
 8001c92:	4a6f      	ldr	r2, [pc, #444]	; (8001e50 <main+0x640>)
 8001c94:	213f      	movs	r1, #63	; 0x3f
 8001c96:	486f      	ldr	r0, [pc, #444]	; (8001e54 <main+0x644>)
 8001c98:	f003 fe36 	bl	8005908 <sniprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001c9c:	486d      	ldr	r0, [pc, #436]	; (8001e54 <main+0x644>)
 8001c9e:	f7fe fa57 	bl	8000150 <strlen>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	496a      	ldr	r1, [pc, #424]	; (8001e54 <main+0x644>)
 8001cac:	486a      	ldr	r0, [pc, #424]	; (8001e58 <main+0x648>)
 8001cae:	f003 fc8e 	bl	80055ce <HAL_UART_Transmit>
			  HAL_Delay(1000);
 8001cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb6:	f001 fe65 	bl	8003984 <HAL_Delay>
			  b = 1;
 8001cba:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <main+0x64c>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim1);
 8001cc0:	4862      	ldr	r0, [pc, #392]	; (8001e4c <main+0x63c>)
 8001cc2:	f003 f85f 	bl	8004d84 <HAL_TIM_Base_Start_IT>
			  }

			  if(day_vvod > 31 || day_vvod == 0 || month_vvod > 12 || month_vvod == 0)
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <main+0x624>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b1f      	cmp	r3, #31
 8001ccc:	d80b      	bhi.n	8001ce6 <main+0x4d6>
 8001cce:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <main+0x624>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <main+0x4d6>
 8001cd6:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <main+0x628>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d803      	bhi.n	8001ce6 <main+0x4d6>
 8001cde:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <main+0x628>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d144      	bne.n	8001d70 <main+0x560>
		      {
			  HAL_TIM_Base_Stop_IT(&htim1);
 8001ce6:	4859      	ldr	r0, [pc, #356]	; (8001e4c <main+0x63c>)
 8001ce8:	f003 f89e 	bl	8004e28 <HAL_TIM_Base_Stop_IT>
			  snprintf(trans_str, 63, "SET ERROR DATE\n");
 8001cec:	4a5c      	ldr	r2, [pc, #368]	; (8001e60 <main+0x650>)
 8001cee:	213f      	movs	r1, #63	; 0x3f
 8001cf0:	4858      	ldr	r0, [pc, #352]	; (8001e54 <main+0x644>)
 8001cf2:	f003 fe09 	bl	8005908 <sniprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001cf6:	4857      	ldr	r0, [pc, #348]	; (8001e54 <main+0x644>)
 8001cf8:	f7fe fa2a 	bl	8000150 <strlen>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d04:	4953      	ldr	r1, [pc, #332]	; (8001e54 <main+0x644>)
 8001d06:	4854      	ldr	r0, [pc, #336]	; (8001e58 <main+0x648>)
 8001d08:	f003 fc61 	bl	80055ce <HAL_UART_Transmit>
			  HAL_Delay(1000);
 8001d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d10:	f001 fe38 	bl	8003984 <HAL_Delay>
			  snprintf(trans_str, 63, "SET ERROR DATE\n");
 8001d14:	4a52      	ldr	r2, [pc, #328]	; (8001e60 <main+0x650>)
 8001d16:	213f      	movs	r1, #63	; 0x3f
 8001d18:	484e      	ldr	r0, [pc, #312]	; (8001e54 <main+0x644>)
 8001d1a:	f003 fdf5 	bl	8005908 <sniprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001d1e:	484d      	ldr	r0, [pc, #308]	; (8001e54 <main+0x644>)
 8001d20:	f7fe fa16 	bl	8000150 <strlen>
 8001d24:	4603      	mov	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2c:	4949      	ldr	r1, [pc, #292]	; (8001e54 <main+0x644>)
 8001d2e:	484a      	ldr	r0, [pc, #296]	; (8001e58 <main+0x648>)
 8001d30:	f003 fc4d 	bl	80055ce <HAL_UART_Transmit>
			  HAL_Delay(1000);
 8001d34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d38:	f001 fe24 	bl	8003984 <HAL_Delay>
			  snprintf(trans_str, 63, "SET ERROR DATE\n");
 8001d3c:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <main+0x650>)
 8001d3e:	213f      	movs	r1, #63	; 0x3f
 8001d40:	4844      	ldr	r0, [pc, #272]	; (8001e54 <main+0x644>)
 8001d42:	f003 fde1 	bl	8005908 <sniprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8001d46:	4843      	ldr	r0, [pc, #268]	; (8001e54 <main+0x644>)
 8001d48:	f7fe fa02 	bl	8000150 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d54:	493f      	ldr	r1, [pc, #252]	; (8001e54 <main+0x644>)
 8001d56:	4840      	ldr	r0, [pc, #256]	; (8001e58 <main+0x648>)
 8001d58:	f003 fc39 	bl	80055ce <HAL_UART_Transmit>
			  HAL_Delay(1000);
 8001d5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d60:	f001 fe10 	bl	8003984 <HAL_Delay>
			  b = 1;
 8001d64:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <main+0x64c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Start_IT(&htim1);
 8001d6a:	4838      	ldr	r0, [pc, #224]	; (8001e4c <main+0x63c>)
 8001d6c:	f003 f80a 	bl	8004d84 <HAL_TIM_Base_Start_IT>





day_sec	= (day_vvod - 1)*86400;
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <main+0x624>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <main+0x654>)
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b30      	ldr	r3, [pc, #192]	; (8001e40 <main+0x630>)
 8001d80:	601a      	str	r2, [r3, #0]
switch(month_vvod)
 8001d82:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <main+0x628>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	2b0b      	cmp	r3, #11
 8001d8a:	f200 80e6 	bhi.w	8001f5a <main+0x74a>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <main+0x584>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001dc5 	.word	0x08001dc5
 8001d98:	08001dcd 	.word	0x08001dcd
 8001d9c:	08001dd5 	.word	0x08001dd5
 8001da0:	08001df3 	.word	0x08001df3
 8001da4:	08001e11 	.word	0x08001e11
 8001da8:	08001e89 	.word	0x08001e89
 8001dac:	08001ea7 	.word	0x08001ea7
 8001db0:	08001ec5 	.word	0x08001ec5
 8001db4:	08001ee3 	.word	0x08001ee3
 8001db8:	08001f01 	.word	0x08001f01
 8001dbc:	08001f1f 	.word	0x08001f1f
 8001dc0:	08001f3d 	.word	0x08001f3d
{
case 1:
month_sec = 0;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <main+0x634>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
break;
 8001dca:	e0c6      	b.n	8001f5a <main+0x74a>
case 2:
month_sec = 31*day_sr;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <main+0x634>)
 8001dce:	4a26      	ldr	r2, [pc, #152]	; (8001e68 <main+0x658>)
 8001dd0:	601a      	str	r2, [r3, #0]
break;
 8001dd2:	e0c2      	b.n	8001f5a <main+0x74a>
case 3:
if(year_vvod%4 == 0)
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <main+0x62c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <main+0x5da>
{
month_sec = 60*day_sr;
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <main+0x634>)
 8001de4:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <main+0x65c>)
 8001de6:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 59*day_sr;
}
break;
 8001de8:	e0b7      	b.n	8001f5a <main+0x74a>
month_sec = 59*day_sr;
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <main+0x634>)
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <main+0x660>)
 8001dee:	601a      	str	r2, [r3, #0]
break;
 8001df0:	e0b3      	b.n	8001f5a <main+0x74a>
case 4:
if(year_vvod%4 == 0)
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <main+0x62c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <main+0x5f8>
{
month_sec = 91*day_sr;
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <main+0x634>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <main+0x664>)
 8001e04:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 90*day_sr;
}
break;
 8001e06:	e0a8      	b.n	8001f5a <main+0x74a>
month_sec = 90*day_sr;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <main+0x634>)
 8001e0a:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <main+0x668>)
 8001e0c:	601a      	str	r2, [r3, #0]
break;
 8001e0e:	e0a4      	b.n	8001f5a <main+0x74a>
case 5:
if(year_vvod%4 == 0)
 8001e10:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <main+0x62c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d130      	bne.n	8001e80 <main+0x670>
{
month_sec = 121*day_sr;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <main+0x634>)
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <main+0x66c>)
 8001e22:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 120*day_sr;
}
break;
 8001e24:	e099      	b.n	8001f5a <main+0x74a>
 8001e26:	bf00      	nop
 8001e28:	200001d8 	.word	0x200001d8
 8001e2c:	20000240 	.word	0x20000240
 8001e30:	20000244 	.word	0x20000244
 8001e34:	20000268 	.word	0x20000268
 8001e38:	20000254 	.word	0x20000254
 8001e3c:	20000185 	.word	0x20000185
 8001e40:	20000248 	.word	0x20000248
 8001e44:	20000258 	.word	0x20000258
 8001e48:	2000016c 	.word	0x2000016c
 8001e4c:	200001f4 	.word	0x200001f4
 8001e50:	08006254 	.word	0x08006254
 8001e54:	2000008c 	.word	0x2000008c
 8001e58:	20000188 	.word	0x20000188
 8001e5c:	200000d2 	.word	0x200000d2
 8001e60:	08006264 	.word	0x08006264
 8001e64:	00015180 	.word	0x00015180
 8001e68:	0028de80 	.word	0x0028de80
 8001e6c:	004f1a00 	.word	0x004f1a00
 8001e70:	004dc880 	.word	0x004dc880
 8001e74:	0077f880 	.word	0x0077f880
 8001e78:	0076a700 	.word	0x0076a700
 8001e7c:	009f8580 	.word	0x009f8580
month_sec = 120*day_sr;
 8001e80:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <main+0x8d0>)
 8001e82:	4a98      	ldr	r2, [pc, #608]	; (80020e4 <main+0x8d4>)
 8001e84:	601a      	str	r2, [r3, #0]
break;
 8001e86:	e068      	b.n	8001f5a <main+0x74a>
case 6:
if(year_vvod%4 == 0)
 8001e88:	4b97      	ldr	r3, [pc, #604]	; (80020e8 <main+0x8d8>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <main+0x68e>
{
month_sec = 152*day_sr;
 8001e96:	4b92      	ldr	r3, [pc, #584]	; (80020e0 <main+0x8d0>)
 8001e98:	4a94      	ldr	r2, [pc, #592]	; (80020ec <main+0x8dc>)
 8001e9a:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 151*day_sr;
}
break;
 8001e9c:	e05d      	b.n	8001f5a <main+0x74a>
month_sec = 151*day_sr;
 8001e9e:	4b90      	ldr	r3, [pc, #576]	; (80020e0 <main+0x8d0>)
 8001ea0:	4a93      	ldr	r2, [pc, #588]	; (80020f0 <main+0x8e0>)
 8001ea2:	601a      	str	r2, [r3, #0]
break;
 8001ea4:	e059      	b.n	8001f5a <main+0x74a>
case 7:
if(year_vvod%4 == 0)
 8001ea6:	4b90      	ldr	r3, [pc, #576]	; (80020e8 <main+0x8d8>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <main+0x6ac>
{
month_sec = 182*day_sr;
 8001eb4:	4b8a      	ldr	r3, [pc, #552]	; (80020e0 <main+0x8d0>)
 8001eb6:	4a8f      	ldr	r2, [pc, #572]	; (80020f4 <main+0x8e4>)
 8001eb8:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 181*day_sr;
}
break;
 8001eba:	e04e      	b.n	8001f5a <main+0x74a>
month_sec = 181*day_sr;
 8001ebc:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <main+0x8d0>)
 8001ebe:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <main+0x8e8>)
 8001ec0:	601a      	str	r2, [r3, #0]
break;
 8001ec2:	e04a      	b.n	8001f5a <main+0x74a>
case 8:
if(year_vvod%4 == 0)
 8001ec4:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <main+0x8d8>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <main+0x6ca>
{
month_sec = 213*day_sr;
 8001ed2:	4b83      	ldr	r3, [pc, #524]	; (80020e0 <main+0x8d0>)
 8001ed4:	4a89      	ldr	r2, [pc, #548]	; (80020fc <main+0x8ec>)
 8001ed6:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 212*day_sr;
}
break;
 8001ed8:	e03f      	b.n	8001f5a <main+0x74a>
month_sec = 212*day_sr;
 8001eda:	4b81      	ldr	r3, [pc, #516]	; (80020e0 <main+0x8d0>)
 8001edc:	4a88      	ldr	r2, [pc, #544]	; (8002100 <main+0x8f0>)
 8001ede:	601a      	str	r2, [r3, #0]
break;
 8001ee0:	e03b      	b.n	8001f5a <main+0x74a>
case 9:
if(year_vvod%4 == 0)
 8001ee2:	4b81      	ldr	r3, [pc, #516]	; (80020e8 <main+0x8d8>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <main+0x6e8>
{
month_sec = 244*day_sr;
 8001ef0:	4b7b      	ldr	r3, [pc, #492]	; (80020e0 <main+0x8d0>)
 8001ef2:	4a84      	ldr	r2, [pc, #528]	; (8002104 <main+0x8f4>)
 8001ef4:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 243*day_sr;
}
break;
 8001ef6:	e030      	b.n	8001f5a <main+0x74a>
month_sec = 243*day_sr;
 8001ef8:	4b79      	ldr	r3, [pc, #484]	; (80020e0 <main+0x8d0>)
 8001efa:	4a83      	ldr	r2, [pc, #524]	; (8002108 <main+0x8f8>)
 8001efc:	601a      	str	r2, [r3, #0]
break;
 8001efe:	e02c      	b.n	8001f5a <main+0x74a>
case 10:
if(year_vvod%4 == 0)
 8001f00:	4b79      	ldr	r3, [pc, #484]	; (80020e8 <main+0x8d8>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <main+0x706>
{
month_sec = 274*day_sr;
 8001f0e:	4b74      	ldr	r3, [pc, #464]	; (80020e0 <main+0x8d0>)
 8001f10:	4a7e      	ldr	r2, [pc, #504]	; (800210c <main+0x8fc>)
 8001f12:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 273*day_sr;
}
break;
 8001f14:	e021      	b.n	8001f5a <main+0x74a>
month_sec = 273*day_sr;
 8001f16:	4b72      	ldr	r3, [pc, #456]	; (80020e0 <main+0x8d0>)
 8001f18:	4a7d      	ldr	r2, [pc, #500]	; (8002110 <main+0x900>)
 8001f1a:	601a      	str	r2, [r3, #0]
break;
 8001f1c:	e01d      	b.n	8001f5a <main+0x74a>
case 11:
if(year_vvod%4 == 0)
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <main+0x8d8>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d103      	bne.n	8001f34 <main+0x724>
{
month_sec = 305*day_sr;
 8001f2c:	4b6c      	ldr	r3, [pc, #432]	; (80020e0 <main+0x8d0>)
 8001f2e:	4a79      	ldr	r2, [pc, #484]	; (8002114 <main+0x904>)
 8001f30:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 304*day_sr;
}
break;
 8001f32:	e012      	b.n	8001f5a <main+0x74a>
month_sec = 304*day_sr;
 8001f34:	4b6a      	ldr	r3, [pc, #424]	; (80020e0 <main+0x8d0>)
 8001f36:	4a78      	ldr	r2, [pc, #480]	; (8002118 <main+0x908>)
 8001f38:	601a      	str	r2, [r3, #0]
break;
 8001f3a:	e00e      	b.n	8001f5a <main+0x74a>
case 12:
if(year_vvod%4 == 0)
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <main+0x8d8>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d103      	bne.n	8001f52 <main+0x742>
{
month_sec = 335*day_sr;
 8001f4a:	4b65      	ldr	r3, [pc, #404]	; (80020e0 <main+0x8d0>)
 8001f4c:	4a73      	ldr	r2, [pc, #460]	; (800211c <main+0x90c>)
 8001f4e:	601a      	str	r2, [r3, #0]
}
else
{
month_sec = 334*day_sr;
}
break;
 8001f50:	e002      	b.n	8001f58 <main+0x748>
month_sec = 334*day_sr;
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <main+0x8d0>)
 8001f54:	4a72      	ldr	r2, [pc, #456]	; (8002120 <main+0x910>)
 8001f56:	601a      	str	r2, [r3, #0]
break;
 8001f58:	bf00      	nop

}///switch


switch(year_vvod)
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <main+0x8d8>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b26      	cmp	r3, #38	; 0x26
 8001f60:	f200 8148 	bhi.w	80021f4 <main+0x9e4>
 8001f64:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <main+0x75c>)
 8001f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6a:	bf00      	nop
 8001f6c:	08002009 	.word	0x08002009
 8001f70:	08002011 	.word	0x08002011
 8001f74:	08002019 	.word	0x08002019
 8001f78:	08002021 	.word	0x08002021
 8001f7c:	08002029 	.word	0x08002029
 8001f80:	08002031 	.word	0x08002031
 8001f84:	08002039 	.word	0x08002039
 8001f88:	08002041 	.word	0x08002041
 8001f8c:	08002049 	.word	0x08002049
 8001f90:	08002051 	.word	0x08002051
 8001f94:	08002059 	.word	0x08002059
 8001f98:	08002061 	.word	0x08002061
 8001f9c:	08002069 	.word	0x08002069
 8001fa0:	08002071 	.word	0x08002071
 8001fa4:	08002079 	.word	0x08002079
 8001fa8:	08002081 	.word	0x08002081
 8001fac:	08002089 	.word	0x08002089
 8001fb0:	08002091 	.word	0x08002091
 8001fb4:	08002099 	.word	0x08002099
 8001fb8:	080020a1 	.word	0x080020a1
 8001fbc:	080020a9 	.word	0x080020a9
 8001fc0:	080020b1 	.word	0x080020b1
 8001fc4:	080020b9 	.word	0x080020b9
 8001fc8:	080020c1 	.word	0x080020c1
 8001fcc:	080020c9 	.word	0x080020c9
 8001fd0:	080020d1 	.word	0x080020d1
 8001fd4:	080020d9 	.word	0x080020d9
 8001fd8:	08002195 	.word	0x08002195
 8001fdc:	0800219d 	.word	0x0800219d
 8001fe0:	080021a5 	.word	0x080021a5
 8001fe4:	080021ad 	.word	0x080021ad
 8001fe8:	080021b5 	.word	0x080021b5
 8001fec:	080021bd 	.word	0x080021bd
 8001ff0:	080021c5 	.word	0x080021c5
 8001ff4:	080021cd 	.word	0x080021cd
 8001ff8:	080021d5 	.word	0x080021d5
 8001ffc:	080021dd 	.word	0x080021dd
 8002000:	080021e5 	.word	0x080021e5
 8002004:	080021ed 	.word	0x080021ed
{
case 0:
year_sec = 7*year_vis + 23*year_ob;
 8002008:	4b46      	ldr	r3, [pc, #280]	; (8002124 <main+0x914>)
 800200a:	4a47      	ldr	r2, [pc, #284]	; (8002128 <main+0x918>)
 800200c:	601a      	str	r2, [r3, #0]
break;
 800200e:	e0f1      	b.n	80021f4 <main+0x9e4>
case 1:
year_sec = 8*year_vis + 23*year_ob;
 8002010:	4b44      	ldr	r3, [pc, #272]	; (8002124 <main+0x914>)
 8002012:	4a46      	ldr	r2, [pc, #280]	; (800212c <main+0x91c>)
 8002014:	601a      	str	r2, [r3, #0]
break;
 8002016:	e0ed      	b.n	80021f4 <main+0x9e4>
case 2:
year_sec = 8*year_vis + 24*year_ob;
 8002018:	4b42      	ldr	r3, [pc, #264]	; (8002124 <main+0x914>)
 800201a:	4a45      	ldr	r2, [pc, #276]	; (8002130 <main+0x920>)
 800201c:	601a      	str	r2, [r3, #0]
break;
 800201e:	e0e9      	b.n	80021f4 <main+0x9e4>
case 3:
year_sec = 8*year_vis + 25*year_ob;
 8002020:	4b40      	ldr	r3, [pc, #256]	; (8002124 <main+0x914>)
 8002022:	4a44      	ldr	r2, [pc, #272]	; (8002134 <main+0x924>)
 8002024:	601a      	str	r2, [r3, #0]
break;
 8002026:	e0e5      	b.n	80021f4 <main+0x9e4>
case 4:
year_sec = 8*year_vis + 26*year_ob;
 8002028:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <main+0x914>)
 800202a:	4a43      	ldr	r2, [pc, #268]	; (8002138 <main+0x928>)
 800202c:	601a      	str	r2, [r3, #0]
break;
 800202e:	e0e1      	b.n	80021f4 <main+0x9e4>
case 5:
year_sec = 9*year_vis + 26*year_ob;
 8002030:	4b3c      	ldr	r3, [pc, #240]	; (8002124 <main+0x914>)
 8002032:	4a42      	ldr	r2, [pc, #264]	; (800213c <main+0x92c>)
 8002034:	601a      	str	r2, [r3, #0]
break;
 8002036:	e0dd      	b.n	80021f4 <main+0x9e4>
case 6:
year_sec = 9*year_vis + 27*year_ob;
 8002038:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <main+0x914>)
 800203a:	4a41      	ldr	r2, [pc, #260]	; (8002140 <main+0x930>)
 800203c:	601a      	str	r2, [r3, #0]
break;
 800203e:	e0d9      	b.n	80021f4 <main+0x9e4>
case 7:
year_sec = 9*year_vis + 28*year_ob;
 8002040:	4b38      	ldr	r3, [pc, #224]	; (8002124 <main+0x914>)
 8002042:	4a40      	ldr	r2, [pc, #256]	; (8002144 <main+0x934>)
 8002044:	601a      	str	r2, [r3, #0]
break;
 8002046:	e0d5      	b.n	80021f4 <main+0x9e4>
case 8:
year_sec = 9*year_vis + 29*year_ob;
 8002048:	4b36      	ldr	r3, [pc, #216]	; (8002124 <main+0x914>)
 800204a:	4a3f      	ldr	r2, [pc, #252]	; (8002148 <main+0x938>)
 800204c:	601a      	str	r2, [r3, #0]
break;
 800204e:	e0d1      	b.n	80021f4 <main+0x9e4>
case 9:
year_sec = 10*year_vis + 29*year_ob;
 8002050:	4b34      	ldr	r3, [pc, #208]	; (8002124 <main+0x914>)
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <main+0x93c>)
 8002054:	601a      	str	r2, [r3, #0]
break;
 8002056:	e0cd      	b.n	80021f4 <main+0x9e4>
case 10:
year_sec = 10*year_vis + 30*year_ob;
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <main+0x914>)
 800205a:	4a3d      	ldr	r2, [pc, #244]	; (8002150 <main+0x940>)
 800205c:	601a      	str	r2, [r3, #0]
break;
 800205e:	e0c9      	b.n	80021f4 <main+0x9e4>
case 11:
year_sec = 10*year_vis + 31*year_ob;
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <main+0x914>)
 8002062:	4a3c      	ldr	r2, [pc, #240]	; (8002154 <main+0x944>)
 8002064:	601a      	str	r2, [r3, #0]
break;
 8002066:	e0c5      	b.n	80021f4 <main+0x9e4>
case 12:
year_sec = 10*year_vis + 32*year_ob;
 8002068:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <main+0x914>)
 800206a:	4a3b      	ldr	r2, [pc, #236]	; (8002158 <main+0x948>)
 800206c:	601a      	str	r2, [r3, #0]
break;
 800206e:	e0c1      	b.n	80021f4 <main+0x9e4>
case 13:
year_sec = 11*year_vis + 32*year_ob;
 8002070:	4b2c      	ldr	r3, [pc, #176]	; (8002124 <main+0x914>)
 8002072:	4a3a      	ldr	r2, [pc, #232]	; (800215c <main+0x94c>)
 8002074:	601a      	str	r2, [r3, #0]
break;
 8002076:	e0bd      	b.n	80021f4 <main+0x9e4>
case 14:
year_sec = 11*year_vis + 33*year_ob;
 8002078:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <main+0x914>)
 800207a:	4a39      	ldr	r2, [pc, #228]	; (8002160 <main+0x950>)
 800207c:	601a      	str	r2, [r3, #0]
break;
 800207e:	e0b9      	b.n	80021f4 <main+0x9e4>
case 15:
year_sec = 11*year_vis + 34*year_ob;
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <main+0x914>)
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <main+0x954>)
 8002084:	601a      	str	r2, [r3, #0]
break;
 8002086:	e0b5      	b.n	80021f4 <main+0x9e4>
case 16:
year_sec = 11*year_vis + 35*year_ob;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <main+0x914>)
 800208a:	4a37      	ldr	r2, [pc, #220]	; (8002168 <main+0x958>)
 800208c:	601a      	str	r2, [r3, #0]
break;
 800208e:	e0b1      	b.n	80021f4 <main+0x9e4>
case 17:
year_sec = 12*year_vis + 35*year_ob;
 8002090:	4b24      	ldr	r3, [pc, #144]	; (8002124 <main+0x914>)
 8002092:	4a36      	ldr	r2, [pc, #216]	; (800216c <main+0x95c>)
 8002094:	601a      	str	r2, [r3, #0]
break;
 8002096:	e0ad      	b.n	80021f4 <main+0x9e4>
case 18:
year_sec = 12*year_vis + 36*year_ob;
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <main+0x914>)
 800209a:	4a35      	ldr	r2, [pc, #212]	; (8002170 <main+0x960>)
 800209c:	601a      	str	r2, [r3, #0]
break;
 800209e:	e0a9      	b.n	80021f4 <main+0x9e4>
case 19:
year_sec = 12*year_vis + 37*year_ob;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <main+0x914>)
 80020a2:	4a34      	ldr	r2, [pc, #208]	; (8002174 <main+0x964>)
 80020a4:	601a      	str	r2, [r3, #0]
break;
 80020a6:	e0a5      	b.n	80021f4 <main+0x9e4>
case 20:
year_sec = 12*year_vis + 38*year_ob;
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <main+0x914>)
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <main+0x968>)
 80020ac:	601a      	str	r2, [r3, #0]
break;
 80020ae:	e0a1      	b.n	80021f4 <main+0x9e4>
case 21:
year_sec = 13*year_vis + 38*year_ob;
 80020b0:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <main+0x914>)
 80020b2:	4a32      	ldr	r2, [pc, #200]	; (800217c <main+0x96c>)
 80020b4:	601a      	str	r2, [r3, #0]
break;
 80020b6:	e09d      	b.n	80021f4 <main+0x9e4>
case 22:
year_sec = 13*year_vis + 39*year_ob;
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <main+0x914>)
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <main+0x970>)
 80020bc:	601a      	str	r2, [r3, #0]
break;
 80020be:	e099      	b.n	80021f4 <main+0x9e4>
case 23:
year_sec = 13*year_vis + 40*year_ob;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <main+0x914>)
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <main+0x974>)
 80020c4:	601a      	str	r2, [r3, #0]
break;
 80020c6:	e095      	b.n	80021f4 <main+0x9e4>
case 24:
year_sec = 13*year_vis + 41*year_ob;
 80020c8:	4b16      	ldr	r3, [pc, #88]	; (8002124 <main+0x914>)
 80020ca:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <main+0x978>)
 80020cc:	601a      	str	r2, [r3, #0]
break;
 80020ce:	e091      	b.n	80021f4 <main+0x9e4>
case 25:
year_sec = 14*year_vis + 41*year_ob;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <main+0x914>)
 80020d2:	4a2e      	ldr	r2, [pc, #184]	; (800218c <main+0x97c>)
 80020d4:	601a      	str	r2, [r3, #0]
break;
 80020d6:	e08d      	b.n	80021f4 <main+0x9e4>
case 26:
year_sec = 14*year_vis + 42*year_ob;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <main+0x914>)
 80020da:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <main+0x980>)
 80020dc:	601a      	str	r2, [r3, #0]
break;
 80020de:	e089      	b.n	80021f4 <main+0x9e4>
 80020e0:	20000258 	.word	0x20000258
 80020e4:	009e3400 	.word	0x009e3400
 80020e8:	20000185 	.word	0x20000185
 80020ec:	00c86400 	.word	0x00c86400
 80020f0:	00c71280 	.word	0x00c71280
 80020f4:	00eff100 	.word	0x00eff100
 80020f8:	00ee9f80 	.word	0x00ee9f80
 80020fc:	0118cf80 	.word	0x0118cf80
 8002100:	01177e00 	.word	0x01177e00
 8002104:	0141ae00 	.word	0x0141ae00
 8002108:	01405c80 	.word	0x01405c80
 800210c:	01693b00 	.word	0x01693b00
 8002110:	0167e980 	.word	0x0167e980
 8002114:	01921980 	.word	0x01921980
 8002118:	0190c800 	.word	0x0190c800
 800211c:	01b9a680 	.word	0x01b9a680
 8002120:	01b85500 	.word	0x01b85500
 8002124:	2000016c 	.word	0x2000016c
 8002128:	386d4380 	.word	0x386d4380
 800212c:	3a4fc880 	.word	0x3a4fc880
 8002130:	3c30fc00 	.word	0x3c30fc00
 8002134:	3e122f80 	.word	0x3e122f80
 8002138:	3ff36300 	.word	0x3ff36300
 800213c:	41d5e800 	.word	0x41d5e800
 8002140:	43b71b80 	.word	0x43b71b80
 8002144:	45984f00 	.word	0x45984f00
 8002148:	47798280 	.word	0x47798280
 800214c:	495c0780 	.word	0x495c0780
 8002150:	4b3d3b00 	.word	0x4b3d3b00
 8002154:	4d1e6e80 	.word	0x4d1e6e80
 8002158:	4effa200 	.word	0x4effa200
 800215c:	50e22700 	.word	0x50e22700
 8002160:	52c35a80 	.word	0x52c35a80
 8002164:	54a48e00 	.word	0x54a48e00
 8002168:	5685c180 	.word	0x5685c180
 800216c:	58684680 	.word	0x58684680
 8002170:	5a497a00 	.word	0x5a497a00
 8002174:	5c2aad80 	.word	0x5c2aad80
 8002178:	5e0be100 	.word	0x5e0be100
 800217c:	5fee6600 	.word	0x5fee6600
 8002180:	61cf9980 	.word	0x61cf9980
 8002184:	63b0cd00 	.word	0x63b0cd00
 8002188:	65920080 	.word	0x65920080
 800218c:	67748580 	.word	0x67748580
 8002190:	6955b900 	.word	0x6955b900
case 27:
year_sec = 14*year_vis + 43*year_ob;
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <main+0xab4>)
 8002196:	4a4c      	ldr	r2, [pc, #304]	; (80022c8 <main+0xab8>)
 8002198:	601a      	str	r2, [r3, #0]
break;
 800219a:	e02b      	b.n	80021f4 <main+0x9e4>
case 28:
year_sec = 14*year_vis + 44*year_ob;
 800219c:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <main+0xab4>)
 800219e:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <main+0xabc>)
 80021a0:	601a      	str	r2, [r3, #0]
break;
 80021a2:	e027      	b.n	80021f4 <main+0x9e4>
case 29:
year_sec = 15*year_vis + 44*year_ob;
 80021a4:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <main+0xab4>)
 80021a6:	4a4a      	ldr	r2, [pc, #296]	; (80022d0 <main+0xac0>)
 80021a8:	601a      	str	r2, [r3, #0]
break;
 80021aa:	e023      	b.n	80021f4 <main+0x9e4>
case 30:
year_sec = 15*year_vis + 45*year_ob;
 80021ac:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <main+0xab4>)
 80021ae:	4a49      	ldr	r2, [pc, #292]	; (80022d4 <main+0xac4>)
 80021b0:	601a      	str	r2, [r3, #0]
break;
 80021b2:	e01f      	b.n	80021f4 <main+0x9e4>
case 31:
year_sec = 15*year_vis + 46*year_ob;
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <main+0xab4>)
 80021b6:	4a48      	ldr	r2, [pc, #288]	; (80022d8 <main+0xac8>)
 80021b8:	601a      	str	r2, [r3, #0]
break;
 80021ba:	e01b      	b.n	80021f4 <main+0x9e4>
case 32:
year_sec = 15*year_vis + 47*year_ob;
 80021bc:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <main+0xab4>)
 80021be:	4a47      	ldr	r2, [pc, #284]	; (80022dc <main+0xacc>)
 80021c0:	601a      	str	r2, [r3, #0]
break;
 80021c2:	e017      	b.n	80021f4 <main+0x9e4>
case 33:
year_sec = 16*year_vis + 47*year_ob;
 80021c4:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <main+0xab4>)
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <main+0xad0>)
 80021c8:	601a      	str	r2, [r3, #0]
break;
 80021ca:	e013      	b.n	80021f4 <main+0x9e4>
case 34:
year_sec = 16*year_vis + 48*year_ob;
 80021cc:	4b3d      	ldr	r3, [pc, #244]	; (80022c4 <main+0xab4>)
 80021ce:	4a45      	ldr	r2, [pc, #276]	; (80022e4 <main+0xad4>)
 80021d0:	601a      	str	r2, [r3, #0]
break;
 80021d2:	e00f      	b.n	80021f4 <main+0x9e4>
case 35:
year_sec = 16*year_vis + 49*year_ob;
 80021d4:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <main+0xab4>)
 80021d6:	4a44      	ldr	r2, [pc, #272]	; (80022e8 <main+0xad8>)
 80021d8:	601a      	str	r2, [r3, #0]
break;
 80021da:	e00b      	b.n	80021f4 <main+0x9e4>
case 36:
year_sec = 16*year_vis + 50*year_ob;
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <main+0xab4>)
 80021de:	4a43      	ldr	r2, [pc, #268]	; (80022ec <main+0xadc>)
 80021e0:	601a      	str	r2, [r3, #0]
break;
 80021e2:	e007      	b.n	80021f4 <main+0x9e4>
case 37:
year_sec = 17*year_vis + 50*year_ob;
 80021e4:	4b37      	ldr	r3, [pc, #220]	; (80022c4 <main+0xab4>)
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <main+0xae0>)
 80021e8:	601a      	str	r2, [r3, #0]
break;
 80021ea:	e003      	b.n	80021f4 <main+0x9e4>
case 38:
year_sec = 17*year_vis + 51*year_ob;
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <main+0xab4>)
 80021ee:	4a41      	ldr	r2, [pc, #260]	; (80022f4 <main+0xae4>)
 80021f0:	601a      	str	r2, [r3, #0]
break;
 80021f2:	bf00      	nop



}///switch

if (b == 0)
 80021f4:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <main+0xae8>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13b      	bne.n	8002274 <main+0xa64>
{
time_unix = year_sec + month_sec + day_sec + hour*3600 + min *60 + sec;
 80021fc:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <main+0xab4>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <main+0xaec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	441a      	add	r2, r3
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <main+0xaf0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	441a      	add	r2, r3
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <main+0xaf4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	460b      	mov	r3, r1
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a5b      	subs	r3, r3, r1
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4619      	mov	r1, r3
 800221c:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <main+0xaf8>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002226:	fb03 f300 	mul.w	r3, r3, r0
 800222a:	440b      	add	r3, r1
 800222c:	441a      	add	r2, r3
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <main+0xafc>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a36      	ldr	r2, [pc, #216]	; (8002310 <main+0xb00>)
 8002236:	6013      	str	r3, [r2, #0]
while ((RTC->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET);
 8002238:	bf00      	nop
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <main+0xb04>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f9      	beq.n	800223a <main+0xa2a>


//__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

RTC->CRL = 0x0010;
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <main+0xb04>)
 8002248:	2210      	movs	r2, #16
 800224a:	605a      	str	r2, [r3, #4]
RTC->CNTH = time_unix >> 16U;
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <main+0xb00>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <main+0xb04>)
 8002252:	0c1b      	lsrs	r3, r3, #16
 8002254:	6193      	str	r3, [r2, #24]
RTC->CNTL = (time_unix & RTC_CNTL_RTC_CNT);
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <main+0xb00>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2e      	ldr	r2, [pc, #184]	; (8002314 <main+0xb04>)
 800225c:	b29b      	uxth	r3, r3
 800225e:	61d3      	str	r3, [r2, #28]
RTC->CRL = 0x0000;
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <main+0xb04>)
 8002262:	2200      	movs	r2, #0
 8002264:	605a      	str	r2, [r3, #4]
while ((RTC->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET);
 8002266:	bf00      	nop
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <main+0xb04>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f9      	beq.n	8002268 <main+0xa58>
}
if (b == 1)
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <main+0xae8>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f47f aae7 	bne.w	800184c <main+0x3c>
{
time_unix = 0;
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <main+0xb00>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
while ((RTC->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET);
 8002284:	bf00      	nop
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <main+0xb04>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0320 	and.w	r3, r3, #32
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f9      	beq.n	8002286 <main+0xa76>


//__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);

RTC->CRL = 0x0010;
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <main+0xb04>)
 8002294:	2210      	movs	r2, #16
 8002296:	605a      	str	r2, [r3, #4]
RTC->CNTH = time_unix >> 16U;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <main+0xb00>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <main+0xb04>)
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	6193      	str	r3, [r2, #24]
RTC->CNTL = (time_unix & RTC_CNTL_RTC_CNT);
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <main+0xb00>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <main+0xb04>)
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	61d3      	str	r3, [r2, #28]
RTC->CRL = 0x0000;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <main+0xb04>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	605a      	str	r2, [r3, #4]
while ((RTC->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET);
 80022b2:	bf00      	nop
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <main+0xb04>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f9      	beq.n	80022b4 <main+0xaa4>
		                  InstallationCursor (1, 1);
 80022c0:	f7ff bac4 	b.w	800184c <main+0x3c>
 80022c4:	2000016c 	.word	0x2000016c
 80022c8:	6b36ec80 	.word	0x6b36ec80
 80022cc:	6d182000 	.word	0x6d182000
 80022d0:	6efaa500 	.word	0x6efaa500
 80022d4:	70dbd880 	.word	0x70dbd880
 80022d8:	72bd0c00 	.word	0x72bd0c00
 80022dc:	749e3f80 	.word	0x749e3f80
 80022e0:	7680c480 	.word	0x7680c480
 80022e4:	7861f800 	.word	0x7861f800
 80022e8:	7a432b80 	.word	0x7a432b80
 80022ec:	7c245f00 	.word	0x7c245f00
 80022f0:	7e06e400 	.word	0x7e06e400
 80022f4:	7fe81780 	.word	0x7fe81780
 80022f8:	200000d2 	.word	0x200000d2
 80022fc:	20000258 	.word	0x20000258
 8002300:	20000248 	.word	0x20000248
 8002304:	20000240 	.word	0x20000240
 8002308:	200001d8 	.word	0x200001d8
 800230c:	20000244 	.word	0x20000244
 8002310:	20000174 	.word	0x20000174
 8002314:	40002800 	.word	0x40002800

08002318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b094      	sub	sp, #80	; 0x50
 800231c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800231e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002322:	2228      	movs	r2, #40	; 0x28
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f003 fae6 	bl	80058f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002348:	2305      	movs	r3, #5
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002356:	2301      	movs	r3, #1
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800235a:	2301      	movs	r3, #1
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235e:	2302      	movs	r3, #2
 8002360:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8002368:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fe10 	bl	8003f98 <HAL_RCC_OscConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800237e:	f001 f8b9 	bl	80034f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002382:	230f      	movs	r3, #15
 8002384:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002392:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2101      	movs	r1, #1
 800239e:	4618      	mov	r0, r3
 80023a0:	f002 f87a 	bl	8004498 <HAL_RCC_ClockConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023aa:	f001 f8a3 	bl	80034f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023ae:	2301      	movs	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fa06 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80023c6:	f001 f895 	bl	80034f4 <Error_Handler>
  }
}
 80023ca:	bf00      	nop
 80023cc:	3750      	adds	r7, #80	; 0x50
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023d8:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <MX_RTC_Init+0x30>)
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <MX_RTC_Init+0x34>)
 80023dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <MX_RTC_Init+0x30>)
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <MX_RTC_Init+0x30>)
 80023e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_RTC_Init+0x30>)
 80023f0:	f002 fb66 	bl	8004ac0 <HAL_RTC_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 80023fa:	f001 f87b 	bl	80034f4 <Error_Handler>
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200001dc 	.word	0x200001dc
 8002408:	40002800 	.word	0x40002800

0800240c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002420:	463b      	mov	r3, r7
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002428:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <MX_TIM1_Init+0x9c>)
 800242a:	4a20      	ldr	r2, [pc, #128]	; (80024ac <MX_TIM1_Init+0xa0>)
 800242c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002430:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002434:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800243c:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_TIM1_Init+0x9c>)
 800243e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002442:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MX_TIM1_Init+0x9c>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002456:	4814      	ldr	r0, [pc, #80]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002458:	f002 fc45 	bl	8004ce6 <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002462:	f001 f847 	bl	80034f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246c:	f107 0308 	add.w	r3, r7, #8
 8002470:	4619      	mov	r1, r3
 8002472:	480d      	ldr	r0, [pc, #52]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002474:	f002 fe0e 	bl	8005094 <HAL_TIM_ConfigClockSource>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800247e:	f001 f839 	bl	80034f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800248a:	463b      	mov	r3, r7
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <MX_TIM1_Init+0x9c>)
 8002490:	f002 ffe0 	bl	8005454 <HAL_TIMEx_MasterConfigSynchronization>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800249a:	f001 f82b 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200001f4 	.word	0x200001f4
 80024ac:	40012c00 	.word	0x40012c00

080024b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_USART1_UART_Init+0x50>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_USART1_UART_Init+0x4c>)
 80024e8:	f003 f824 	bl	8005534 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024f2:	f000 ffff 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000188 	.word	0x20000188
 8002500:	40013800 	.word	0x40013800

08002504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002518:	4b45      	ldr	r3, [pc, #276]	; (8002630 <MX_GPIO_Init+0x12c>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a44      	ldr	r2, [pc, #272]	; (8002630 <MX_GPIO_Init+0x12c>)
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <MX_GPIO_Init+0x12c>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002530:	4b3f      	ldr	r3, [pc, #252]	; (8002630 <MX_GPIO_Init+0x12c>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a3e      	ldr	r2, [pc, #248]	; (8002630 <MX_GPIO_Init+0x12c>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b3c      	ldr	r3, [pc, #240]	; (8002630 <MX_GPIO_Init+0x12c>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <MX_GPIO_Init+0x12c>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a38      	ldr	r2, [pc, #224]	; (8002630 <MX_GPIO_Init+0x12c>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <MX_GPIO_Init+0x12c>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <MX_GPIO_Init+0x12c>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a32      	ldr	r2, [pc, #200]	; (8002630 <MX_GPIO_Init+0x12c>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b30      	ldr	r3, [pc, #192]	; (8002630 <MX_GPIO_Init+0x12c>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800257e:	482d      	ldr	r0, [pc, #180]	; (8002634 <MX_GPIO_Init+0x130>)
 8002580:	f001 fccd 	bl	8003f1e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|E_Pin|B4_Pin|B5_Pin
 8002584:	2200      	movs	r2, #0
 8002586:	f44f 715e 	mov.w	r1, #888	; 0x378
 800258a:	482b      	ldr	r0, [pc, #172]	; (8002638 <MX_GPIO_Init+0x134>)
 800258c:	f001 fcc7 	bl	8003f1e <HAL_GPIO_WritePin>
                          |B6_Pin|B7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002596:	2301      	movs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2302      	movs	r3, #2
 80025a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	4619      	mov	r1, r3
 80025a8:	4822      	ldr	r0, [pc, #136]	; (8002634 <MX_GPIO_Init+0x130>)
 80025aa:	f001 fb1d 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025ae:	2302      	movs	r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <MX_GPIO_Init+0x138>)
 80025b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	4619      	mov	r1, r3
 80025c0:	481f      	ldr	r0, [pc, #124]	; (8002640 <MX_GPIO_Init+0x13c>)
 80025c2:	f001 fb11 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c6:	230c      	movs	r3, #12
 80025c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	4619      	mov	r1, r3
 80025d8:	4819      	ldr	r0, [pc, #100]	; (8002640 <MX_GPIO_Init+0x13c>)
 80025da:	f001 fb05 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4619      	mov	r1, r3
 80025f2:	4811      	ldr	r0, [pc, #68]	; (8002638 <MX_GPIO_Init+0x134>)
 80025f4:	f001 faf8 	bl	8003be8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin E_Pin B4_Pin B5_Pin
                           B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|B4_Pin|B5_Pin
 80025f8:	f44f 735e 	mov.w	r3, #888	; 0x378
 80025fc:	613b      	str	r3, [r7, #16]
                          |B6_Pin|B7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2302      	movs	r3, #2
 8002608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	4619      	mov	r1, r3
 8002610:	4809      	ldr	r0, [pc, #36]	; (8002638 <MX_GPIO_Init+0x134>)
 8002612:	f001 fae9 	bl	8003be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	2007      	movs	r0, #7
 800261c:	f001 faad 	bl	8003b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002620:	2007      	movs	r0, #7
 8002622:	f001 fac6 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

}
 8002626:	bf00      	nop
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40011000 	.word	0x40011000
 8002638:	40010c00 	.word	0x40010c00
 800263c:	10210000 	.word	0x10210000
 8002640:	40010800 	.word	0x40010800

08002644 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)

{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	80fb      	strh	r3, [r7, #6]
	 if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 800264e:	2102      	movs	r1, #2
 8002650:	48a0      	ldr	r0, [pc, #640]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 8002652:	f001 fc4d 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 86eb 	bne.w	8003434 <HAL_GPIO_EXTI_Callback+0xdf0>

	 {
		 HAL_TIM_Base_Stop_IT(&htim1);
 800265e:	489e      	ldr	r0, [pc, #632]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x294>)
 8002660:	f002 fbe2 	bl	8004e28 <HAL_TIM_Base_Stop_IT>

		 unsigned char v_izm;
         int8_t d_cnt, r,  t,  g, d2, m2, y2;
         int32_t day_sec1, month_sec1, year_sec1;
        Clear();
 8002664:	f7ff f8c9 	bl	80017fa <Clear>
                InstallationCursor (1, 1);
 8002668:	2101      	movs	r1, #1
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff f886 	bl	800177c <InstallationCursor>
                PrintString ("SET TIME");
 8002670:	489a      	ldr	r0, [pc, #616]	; (80028dc <HAL_GPIO_EXTI_Callback+0x298>)
 8002672:	f7ff f8a3 	bl	80017bc <PrintString>
                InstallationCursor (1, 2);
 8002676:	2102      	movs	r1, #2
 8002678:	2001      	movs	r0, #1
 800267a:	f7ff f87f 	bl	800177c <InstallationCursor>
                PrintString ("and DATE");
 800267e:	4898      	ldr	r0, [pc, #608]	; (80028e0 <HAL_GPIO_EXTI_Callback+0x29c>)
 8002680:	f7ff f89c 	bl	80017bc <PrintString>
                delay_micros(1000000);
 8002684:	4897      	ldr	r0, [pc, #604]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8002686:	f7fe fe9d 	bl	80013c4 <delay_micros>

                Clear();
 800268a:	f7ff f8b6 	bl	80017fa <Clear>
                InstallationCursor (1, 1);
 800268e:	2101      	movs	r1, #1
 8002690:	2001      	movs	r0, #1
 8002692:	f7ff f873 	bl	800177c <InstallationCursor>
                PrintString ("USE THE BUTTONS");
 8002696:	4894      	ldr	r0, [pc, #592]	; (80028e8 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8002698:	f7ff f890 	bl	80017bc <PrintString>
               InstallationCursor (1, 2);
 800269c:	2102      	movs	r1, #2
 800269e:	2001      	movs	r0, #1
 80026a0:	f7ff f86c 	bl	800177c <InstallationCursor>
                PrintString ("TO INSTALL");
 80026a4:	4891      	ldr	r0, [pc, #580]	; (80028ec <HAL_GPIO_EXTI_Callback+0x2a8>)
 80026a6:	f7ff f889 	bl	80017bc <PrintString>
                  delay_micros(1000000);
 80026aa:	488e      	ldr	r0, [pc, #568]	; (80028e4 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80026ac:	f7fe fe8a 	bl	80013c4 <delay_micros>
                  Clear();
 80026b0:	f7ff f8a3 	bl	80017fa <Clear>

		 // snprintf(trans_str, 63, "SET TIME BUTTONS %d\n");
		 //HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);


		   d_cnt=0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	77bb      	strb	r3, [r7, #30]

		   r=cnt_hour;
 80026b8:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	777b      	strb	r3, [r7, #29]
		   t=cnt_min;
 80026be:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	773b      	strb	r3, [r7, #28]
		   g=cnt_sec;
 80026c4:	4b8c      	ldr	r3, [pc, #560]	; (80028f8 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	76fb      	strb	r3, [r7, #27]
		   d2=cnt_day;
 80026ca:	4b8c      	ldr	r3, [pc, #560]	; (80028fc <HAL_GPIO_EXTI_Callback+0x2b8>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	76bb      	strb	r3, [r7, #26]
		   m2=month;
 80026d0:	4b8b      	ldr	r3, [pc, #556]	; (8002900 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	767b      	strb	r3, [r7, #25]
		   y2=year;
 80026d6:	4b8b      	ldr	r3, [pc, #556]	; (8002904 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	763b      	strb	r3, [r7, #24]
		   day_sec1 = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
		   month_sec1 = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
		   year_sec1 = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]

		  // delay_micros(500000);
		///  HAL_Delay(500);
		//  snprintf(trans_str, 63, "PROCHLO 500 ms %d\n");
			//	 HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
		  while(d_cnt!=6)
 80026e8:	bf00      	nop
 80026ea:	f000 be9d 	b.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>

		   {
		 // lcd_com(0x0D);  //включение мигающего курсора

			  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80026ee:	2102      	movs	r1, #2
 80026f0:	4878      	ldr	r0, [pc, #480]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80026f2:	f001 fbfd 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <HAL_GPIO_EXTI_Callback+0xd8>
			  {
				  delay_micros(200000);
 80026fc:	4882      	ldr	r0, [pc, #520]	; (8002908 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80026fe:	f7fe fe61 	bl	80013c4 <delay_micros>
		    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 8002702:	2102      	movs	r1, #2
 8002704:	4873      	ldr	r0, [pc, #460]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 8002706:	f001 fbf3 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d105      	bne.n	800271c <HAL_GPIO_EXTI_Callback+0xd8>
		   {
		   d_cnt++;
 8002710:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	3301      	adds	r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	77bb      	strb	r3, [r7, #30]
		   }
			///  HAL_Delay(500);
		// snprintf(trans_str, 63, "PROCHLO  %d\n");
		// HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);

		  switch (d_cnt)
 800271c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002720:	2b06      	cmp	r3, #6
 8002722:	f200 8681 	bhi.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 8002726:	a201      	add	r2, pc, #4	; (adr r2, 800272c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	08002749 	.word	0x08002749
 8002730:	08002915 	.word	0x08002915
 8002734:	08002a9f 	.word	0x08002a9f
 8002738:	08002c39 	.word	0x08002c39
 800273c:	08002d17 	.word	0x08002d17
 8002740:	08002ee9 	.word	0x08002ee9
 8002744:	08003071 	.word	0x08003071
		   {
		     case 0: //установка часов
		   //  snprintf(trans_str, 63, "VXOD CASE 0 %d\n");
		    /// HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
		    /// delay_micros(5000000);
		    	 InstallationCursor (1, 1);
 8002748:	2101      	movs	r1, #1
 800274a:	2001      	movs	r0, #1
 800274c:	f7ff f816 	bl	800177c <InstallationCursor>
		    	 lcd_dat((r/10)%10 +'0'); // Выделяем десятки
 8002750:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002754:	4a6d      	ldr	r2, [pc, #436]	; (800290c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002756:	fb82 1203 	smull	r1, r2, r2, r3
 800275a:	1092      	asrs	r2, r2, #2
 800275c:	17db      	asrs	r3, r3, #31
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	b25a      	sxtb	r2, r3
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <HAL_GPIO_EXTI_Callback+0x2c8>)
 8002764:	fb83 1302 	smull	r1, r3, r3, r2
 8002768:	1099      	asrs	r1, r3, #2
 800276a:	17d3      	asrs	r3, r2, #31
 800276c:	1ac9      	subs	r1, r1, r3
 800276e:	460b      	mov	r3, r1
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	b25b      	sxtb	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	3330      	adds	r3, #48	; 0x30
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe feff 	bl	8001584 <lcd_dat>
		    	 lcd_dat(r%10 + '0'); // Выделяем единицы
 8002786:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <HAL_GPIO_EXTI_Callback+0x2c8>)
 800278c:	fb83 1302 	smull	r1, r3, r3, r2
 8002790:	1099      	asrs	r1, r3, #2
 8002792:	17d3      	asrs	r3, r2, #31
 8002794:	1ac9      	subs	r1, r1, r3
 8002796:	460b      	mov	r3, r1
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3330      	adds	r3, #48	; 0x30
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe feeb 	bl	8001584 <lcd_dat>

		        if((0<=v_izm) && (v_izm<=5))
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d840      	bhi.n	8002836 <HAL_GPIO_EXTI_Callback+0x1f2>
		       {

		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 80027b4:	2104      	movs	r1, #4
 80027b6:	4847      	ldr	r0, [pc, #284]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80027b8:	f001 fb9a 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d112      	bne.n	80027e8 <HAL_GPIO_EXTI_Callback+0x1a4>
		        {
		       // HAL_Delay(200);
		         delay_micros(200000);
 80027c2:	4851      	ldr	r0, [pc, #324]	; (8002908 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80027c4:	f7fe fdfe 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 80027c8:	2104      	movs	r1, #4
 80027ca:	4842      	ldr	r0, [pc, #264]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80027cc:	f001 fb90 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d108      	bne.n	80027e8 <HAL_GPIO_EXTI_Callback+0x1a4>
		        {
		         r++;
 80027d6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	777b      	strb	r3, [r7, #29]
		         v_izm++;
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	3301      	adds	r3, #1
 80027e6:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (r>23)
 80027e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80027ec:	2b17      	cmp	r3, #23
 80027ee:	dd01      	ble.n	80027f4 <HAL_GPIO_EXTI_Callback+0x1b0>
		         {
		         r=0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	777b      	strb	r3, [r7, #29]
		        } /// end +


		         if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET )
 80027f4:	2108      	movs	r1, #8
 80027f6:	4837      	ldr	r0, [pc, #220]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80027f8:	f001 fb7a 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d112      	bne.n	8002828 <HAL_GPIO_EXTI_Callback+0x1e4>
		        {
		      ///  HAL_Delay(200);
		        	 delay_micros(200000);
 8002802:	4841      	ldr	r0, [pc, #260]	; (8002908 <HAL_GPIO_EXTI_Callback+0x2c4>)
 8002804:	f7fe fdde 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET )
 8002808:	2108      	movs	r1, #8
 800280a:	4832      	ldr	r0, [pc, #200]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 800280c:	f001 fb70 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d108      	bne.n	8002828 <HAL_GPIO_EXTI_Callback+0x1e4>
		        {
		         r--;
 8002816:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	777b      	strb	r3, [r7, #29]
		         v_izm++;
 8002822:	7ffb      	ldrb	r3, [r7, #31]
 8002824:	3301      	adds	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (r<0)
 8002828:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800282c:	2b00      	cmp	r3, #0
 800282e:	da3c      	bge.n	80028aa <HAL_GPIO_EXTI_Callback+0x266>
		        {
		      r=23;
 8002830:	2317      	movs	r3, #23
 8002832:	777b      	strb	r3, [r7, #29]
 8002834:	e039      	b.n	80028aa <HAL_GPIO_EXTI_Callback+0x266>
		        } ///end v_izm

		        else

		       {
		       if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002836:	2104      	movs	r1, #4
 8002838:	4826      	ldr	r0, [pc, #152]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 800283a:	f001 fb59 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10f      	bne.n	8002864 <HAL_GPIO_EXTI_Callback+0x220>
		        {
		       /// HAL_Delay(100);
		    	   delay_micros(100000);
 8002844:	4832      	ldr	r0, [pc, #200]	; (8002910 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002846:	f7fe fdbd 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 800284a:	2104      	movs	r1, #4
 800284c:	4821      	ldr	r0, [pc, #132]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 800284e:	f001 fb4f 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_GPIO_EXTI_Callback+0x220>
		        {
		         r++;
 8002858:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3301      	adds	r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	777b      	strb	r3, [r7, #29]
		         }
		         }
		         if (r>23)
 8002864:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002868:	2b17      	cmp	r3, #23
 800286a:	dd01      	ble.n	8002870 <HAL_GPIO_EXTI_Callback+0x22c>
		         {
		         r=0;
 800286c:	2300      	movs	r3, #0
 800286e:	777b      	strb	r3, [r7, #29]
		        }

		         if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002870:	2108      	movs	r1, #8
 8002872:	4818      	ldr	r0, [pc, #96]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 8002874:	f001 fb3c 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_GPIO_EXTI_Callback+0x25a>
		        {
		      ///  HAL_Delay(100);
		        	 delay_micros(100000);
 800287e:	4824      	ldr	r0, [pc, #144]	; (8002910 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8002880:	f7fe fda0 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002884:	2108      	movs	r1, #8
 8002886:	4813      	ldr	r0, [pc, #76]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 8002888:	f001 fb32 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_GPIO_EXTI_Callback+0x25a>
		        {
		         r--;
 8002892:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	777b      	strb	r3, [r7, #29]
		         }
		         }
		         if (r<0)
 800289e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	da01      	bge.n	80028aa <HAL_GPIO_EXTI_Callback+0x266>
		        {
		      r=23;
 80028a6:	2317      	movs	r3, #23
 80028a8:	777b      	strb	r3, [r7, #29]
		       }
		        }


		        if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET )&& HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET)
 80028aa:	2104      	movs	r1, #4
 80028ac:	4809      	ldr	r0, [pc, #36]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80028ae:	f001 fb1f 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	f040 85b7 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 80028ba:	2104      	movs	r1, #4
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x290>)
 80028be:	f001 fb17 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f040 85af 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
		        {
		        v_izm=0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	77fb      	strb	r3, [r7, #31]
		          }

		       break;
 80028ce:	f000 bdab 	b.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 80028d2:	bf00      	nop
 80028d4:	40010800 	.word	0x40010800
 80028d8:	200001f4 	.word	0x200001f4
 80028dc:	08006274 	.word	0x08006274
 80028e0:	08006280 	.word	0x08006280
 80028e4:	000f4240 	.word	0x000f4240
 80028e8:	0800628c 	.word	0x0800628c
 80028ec:	0800629c 	.word	0x0800629c
 80028f0:	20000170 	.word	0x20000170
 80028f4:	20000260 	.word	0x20000260
 80028f8:	20000184 	.word	0x20000184
 80028fc:	20000168 	.word	0x20000168
 8002900:	2000017c 	.word	0x2000017c
 8002904:	20000242 	.word	0x20000242
 8002908:	00030d40 	.word	0x00030d40
 800290c:	66666667 	.word	0x66666667
 8002910:	000186a0 	.word	0x000186a0


	         case 1: // установка минут


	        	 InstallationCursor (4, 1);
 8002914:	2101      	movs	r1, #1
 8002916:	2004      	movs	r0, #4
 8002918:	f7fe ff30 	bl	800177c <InstallationCursor>
	            lcd_dat((t/10)%10 +'0'); // Выделяем десятки
 800291c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002920:	4ac1      	ldr	r2, [pc, #772]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8002922:	fb82 1203 	smull	r1, r2, r2, r3
 8002926:	1092      	asrs	r2, r2, #2
 8002928:	17db      	asrs	r3, r3, #31
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	b25a      	sxtb	r2, r3
 800292e:	4bbe      	ldr	r3, [pc, #760]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8002930:	fb83 1302 	smull	r1, r3, r3, r2
 8002934:	1099      	asrs	r1, r3, #2
 8002936:	17d3      	asrs	r3, r2, #31
 8002938:	1ac9      	subs	r1, r1, r3
 800293a:	460b      	mov	r3, r1
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	b25b      	sxtb	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	3330      	adds	r3, #48	; 0x30
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fe19 	bl	8001584 <lcd_dat>
	            lcd_dat(t%10 + '0'); // Выделяем единицы
 8002952:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8002956:	4bb4      	ldr	r3, [pc, #720]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8002958:	fb83 1302 	smull	r1, r3, r3, r2
 800295c:	1099      	asrs	r1, r3, #2
 800295e:	17d3      	asrs	r3, r2, #31
 8002960:	1ac9      	subs	r1, r1, r3
 8002962:	460b      	mov	r3, r1
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	b25b      	sxtb	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3330      	adds	r3, #48	; 0x30
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fe05 	bl	8001584 <lcd_dat>

		        if((0<=v_izm) && (v_izm<=5))
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d840      	bhi.n	8002a02 <HAL_GPIO_EXTI_Callback+0x3be>

		        {
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002980:	2104      	movs	r1, #4
 8002982:	48aa      	ldr	r0, [pc, #680]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002984:	f001 fab4 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d112      	bne.n	80029b4 <HAL_GPIO_EXTI_Callback+0x370>
		        {
		        	delay_micros(200000);
 800298e:	48a8      	ldr	r0, [pc, #672]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x5ec>)
 8002990:	f7fe fd18 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002994:	2104      	movs	r1, #4
 8002996:	48a5      	ldr	r0, [pc, #660]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002998:	f001 faaa 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <HAL_GPIO_EXTI_Callback+0x370>
		        {
		         t++;
 80029a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	773b      	strb	r3, [r7, #28]
		         v_izm++;
 80029ae:	7ffb      	ldrb	r3, [r7, #31]
 80029b0:	3301      	adds	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (t>59)
 80029b4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80029b8:	2b3b      	cmp	r3, #59	; 0x3b
 80029ba:	dd01      	ble.n	80029c0 <HAL_GPIO_EXTI_Callback+0x37c>
		         {
		         t=0;
 80029bc:	2300      	movs	r3, #0
 80029be:	773b      	strb	r3, [r7, #28]
		        }
		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 80029c0:	2108      	movs	r1, #8
 80029c2:	489a      	ldr	r0, [pc, #616]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 80029c4:	f001 fa94 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d112      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x3b0>
		        {
		        	  delay_micros(200000);
 80029ce:	4898      	ldr	r0, [pc, #608]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x5ec>)
 80029d0:	f7fe fcf8 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 80029d4:	2108      	movs	r1, #8
 80029d6:	4895      	ldr	r0, [pc, #596]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 80029d8:	f001 fa8a 	bl	8003ef0 <HAL_GPIO_ReadPin>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d108      	bne.n	80029f4 <HAL_GPIO_EXTI_Callback+0x3b0>
		        {
		        t--;
 80029e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	773b      	strb	r3, [r7, #28]
		        v_izm++;
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	3301      	adds	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (t<0)
 80029f4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da3c      	bge.n	8002a76 <HAL_GPIO_EXTI_Callback+0x432>
		         {
		         t=59;
 80029fc:	233b      	movs	r3, #59	; 0x3b
 80029fe:	773b      	strb	r3, [r7, #28]
 8002a00:	e039      	b.n	8002a76 <HAL_GPIO_EXTI_Callback+0x432>
		        }
		        }
		        else
		        {
		         if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002a02:	2104      	movs	r1, #4
 8002a04:	4889      	ldr	r0, [pc, #548]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002a06:	f001 fa73 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <HAL_GPIO_EXTI_Callback+0x3ec>
		        {
		        	 delay_micros(100000);
 8002a10:	4888      	ldr	r0, [pc, #544]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8002a12:	f7fe fcd7 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002a16:	2104      	movs	r1, #4
 8002a18:	4884      	ldr	r0, [pc, #528]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002a1a:	f001 fa69 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_GPIO_EXTI_Callback+0x3ec>
		        {
		         t++;
 8002a24:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	773b      	strb	r3, [r7, #28]
		         }
		         }
		         if (t>59)
 8002a30:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002a34:	2b3b      	cmp	r3, #59	; 0x3b
 8002a36:	dd01      	ble.n	8002a3c <HAL_GPIO_EXTI_Callback+0x3f8>
		         {
		         t=0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	773b      	strb	r3, [r7, #28]
		        }
		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	487b      	ldr	r0, [pc, #492]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002a40:	f001 fa56 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_GPIO_EXTI_Callback+0x426>
		        {
		        	  delay_micros(100000);
 8002a4a:	487a      	ldr	r0, [pc, #488]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8002a4c:	f7fe fcba 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002a50:	2108      	movs	r1, #8
 8002a52:	4876      	ldr	r0, [pc, #472]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002a54:	f001 fa4c 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_GPIO_EXTI_Callback+0x426>
		        {
		        t--;
 8002a5e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	773b      	strb	r3, [r7, #28]
		         }
		         }
		         if (t<0)
 8002a6a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	da01      	bge.n	8002a76 <HAL_GPIO_EXTI_Callback+0x432>
		         {
		         t=59;
 8002a72:	233b      	movs	r3, #59	; 0x3b
 8002a74:	773b      	strb	r3, [r7, #28]
		        }
		          }
		          if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET)&&(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET))
 8002a76:	2108      	movs	r1, #8
 8002a78:	486c      	ldr	r0, [pc, #432]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002a7a:	f001 fa39 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 84d1 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 8002a86:	2104      	movs	r1, #4
 8002a88:	4868      	ldr	r0, [pc, #416]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002a8a:	f001 fa31 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	f040 84c9 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
		        {
		        v_izm=0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	77fb      	strb	r3, [r7, #31]
		          }

		       break;
 8002a9a:	f000 bcc5 	b.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>

		     case 2:


		      InstallationCursor (1, 2);
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7fe fe6b 	bl	800177c <InstallationCursor>
		      lcd_dat((d2/10)%10 +'0'); // Выделяем десятки
 8002aa6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002aaa:	4a5f      	ldr	r2, [pc, #380]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8002aac:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab0:	1092      	asrs	r2, r2, #2
 8002ab2:	17db      	asrs	r3, r3, #31
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	b25a      	sxtb	r2, r3
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8002aba:	fb83 1302 	smull	r1, r3, r3, r2
 8002abe:	1099      	asrs	r1, r3, #2
 8002ac0:	17d3      	asrs	r3, r2, #31
 8002ac2:	1ac9      	subs	r1, r1, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	3330      	adds	r3, #48	; 0x30
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fd54 	bl	8001584 <lcd_dat>
		      lcd_dat(d2%10 + '0'); // Выделяем единицы
 8002adc:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8002ae0:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x5e4>)
 8002ae2:	fb83 1302 	smull	r1, r3, r3, r2
 8002ae6:	1099      	asrs	r1, r3, #2
 8002ae8:	17d3      	asrs	r3, r2, #31
 8002aea:	1ac9      	subs	r1, r1, r3
 8002aec:	460b      	mov	r3, r1
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3330      	adds	r3, #48	; 0x30
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fd40 	bl	8001584 <lcd_dat>

		        if((0<=v_izm) && (v_izm<=5))
 8002b04:	7ffb      	ldrb	r3, [r7, #31]
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d840      	bhi.n	8002b8c <HAL_GPIO_EXTI_Callback+0x548>
		       {
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4847      	ldr	r0, [pc, #284]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002b0e:	f001 f9ef 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d112      	bne.n	8002b3e <HAL_GPIO_EXTI_Callback+0x4fa>
		        {
		        	  delay_micros(200000);
 8002b18:	4845      	ldr	r0, [pc, #276]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x5ec>)
 8002b1a:	f7fe fc53 	bl	80013c4 <delay_micros>

		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002b1e:	2104      	movs	r1, #4
 8002b20:	4842      	ldr	r0, [pc, #264]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002b22:	f001 f9e5 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <HAL_GPIO_EXTI_Callback+0x4fa>
		        {
		         d2++;
 8002b2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	76bb      	strb	r3, [r7, #26]
		         v_izm++;
 8002b38:	7ffb      	ldrb	r3, [r7, #31]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (d2>31)
 8002b3e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b42:	2b1f      	cmp	r3, #31
 8002b44:	dd01      	ble.n	8002b4a <HAL_GPIO_EXTI_Callback+0x506>
		         {
		         d2=1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	76bb      	strb	r3, [r7, #26]
		        }

		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	4837      	ldr	r0, [pc, #220]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002b4e:	f001 f9cf 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d112      	bne.n	8002b7e <HAL_GPIO_EXTI_Callback+0x53a>
		        {
		        	  delay_micros(200000);
 8002b58:	4835      	ldr	r0, [pc, #212]	; (8002c30 <HAL_GPIO_EXTI_Callback+0x5ec>)
 8002b5a:	f7fe fc33 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002b5e:	2108      	movs	r1, #8
 8002b60:	4832      	ldr	r0, [pc, #200]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002b62:	f001 f9c5 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d108      	bne.n	8002b7e <HAL_GPIO_EXTI_Callback+0x53a>
		        {
		         d2--;
 8002b6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	76bb      	strb	r3, [r7, #26]
		         v_izm++;
 8002b78:	7ffb      	ldrb	r3, [r7, #31]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (d2<1)
 8002b7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	dc3c      	bgt.n	8002c00 <HAL_GPIO_EXTI_Callback+0x5bc>
		         {
		         d2=30;
 8002b86:	231e      	movs	r3, #30
 8002b88:	76bb      	strb	r3, [r7, #26]
 8002b8a:	e039      	b.n	8002c00 <HAL_GPIO_EXTI_Callback+0x5bc>
		        }
		     }
		     else
		     {
		      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002b8c:	2104      	movs	r1, #4
 8002b8e:	4827      	ldr	r0, [pc, #156]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002b90:	f001 f9ae 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_GPIO_EXTI_Callback+0x576>
		        {
		    	  delay_micros(100000);
 8002b9a:	4826      	ldr	r0, [pc, #152]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8002b9c:	f7fe fc12 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002ba0:	2104      	movs	r1, #4
 8002ba2:	4822      	ldr	r0, [pc, #136]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002ba4:	f001 f9a4 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_GPIO_EXTI_Callback+0x576>
		        {
		         d2++;
 8002bae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	76bb      	strb	r3, [r7, #26]
		         }
		         }
		         if (d2>31)
 8002bba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002bbe:	2b1f      	cmp	r3, #31
 8002bc0:	dd01      	ble.n	8002bc6 <HAL_GPIO_EXTI_Callback+0x582>
		         {
		         d2=1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	76bb      	strb	r3, [r7, #26]
		        }

		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002bc6:	2108      	movs	r1, #8
 8002bc8:	4818      	ldr	r0, [pc, #96]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002bca:	f001 f991 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x5b0>
		        {
		        	  delay_micros(100000);
 8002bd4:	4817      	ldr	r0, [pc, #92]	; (8002c34 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8002bd6:	f7fe fbf5 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002bda:	2108      	movs	r1, #8
 8002bdc:	4813      	ldr	r0, [pc, #76]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002bde:	f001 f987 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_GPIO_EXTI_Callback+0x5b0>
		        {
		         d2--;
 8002be8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	76bb      	strb	r3, [r7, #26]
		         }
		         }
		         if (d2<1)
 8002bf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	dc01      	bgt.n	8002c00 <HAL_GPIO_EXTI_Callback+0x5bc>
		         {
		         d2=30;
 8002bfc:	231e      	movs	r3, #30
 8002bfe:	76bb      	strb	r3, [r7, #26]
		        }
		     }
		        if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET)&&(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET))
 8002c00:	2108      	movs	r1, #8
 8002c02:	480a      	ldr	r0, [pc, #40]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002c04:	f001 f974 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	f040 840c 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 8002c10:	2104      	movs	r1, #4
 8002c12:	4806      	ldr	r0, [pc, #24]	; (8002c2c <HAL_GPIO_EXTI_Callback+0x5e8>)
 8002c14:	f001 f96c 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	f040 8404 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
		       		        {
		       		        v_izm=0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
		       		          }


		       break;
 8002c24:	f000 bc00 	b.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 8002c28:	66666667 	.word	0x66666667
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	00030d40 	.word	0x00030d40
 8002c34:	000186a0 	.word	0x000186a0



		         case 3:

		         InstallationCursor (4, 2);
 8002c38:	2102      	movs	r1, #2
 8002c3a:	2004      	movs	r0, #4
 8002c3c:	f7fe fd9e 	bl	800177c <InstallationCursor>
		         lcd_dat((m2/10)%10 +'0'); // Выделяем десятки
 8002c40:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002c44:	4aa3      	ldr	r2, [pc, #652]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002c46:	fb82 1203 	smull	r1, r2, r2, r3
 8002c4a:	1092      	asrs	r2, r2, #2
 8002c4c:	17db      	asrs	r3, r3, #31
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b25a      	sxtb	r2, r3
 8002c52:	4ba0      	ldr	r3, [pc, #640]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002c54:	fb83 1302 	smull	r1, r3, r3, r2
 8002c58:	1099      	asrs	r1, r3, #2
 8002c5a:	17d3      	asrs	r3, r2, #31
 8002c5c:	1ac9      	subs	r1, r1, r3
 8002c5e:	460b      	mov	r3, r1
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	b25b      	sxtb	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3330      	adds	r3, #48	; 0x30
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe fc87 	bl	8001584 <lcd_dat>
		         lcd_dat(m2%10 + '0'); // Выделяем единицы
 8002c76:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8002c7a:	4b96      	ldr	r3, [pc, #600]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002c7c:	fb83 1302 	smull	r1, r3, r3, r2
 8002c80:	1099      	asrs	r1, r3, #2
 8002c82:	17d3      	asrs	r3, r2, #31
 8002c84:	1ac9      	subs	r1, r1, r3
 8002c86:	460b      	mov	r3, r1
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3330      	adds	r3, #48	; 0x30
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe fc73 	bl	8001584 <lcd_dat>

		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	488d      	ldr	r0, [pc, #564]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002ca2:	f001 f925 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10f      	bne.n	8002ccc <HAL_GPIO_EXTI_Callback+0x688>
		        {
		        	 delay_micros(200000);
 8002cac:	488b      	ldr	r0, [pc, #556]	; (8002edc <HAL_GPIO_EXTI_Callback+0x898>)
 8002cae:	f7fe fb89 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	4888      	ldr	r0, [pc, #544]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002cb6:	f001 f91b 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_GPIO_EXTI_Callback+0x688>
		        {
		         m2++;
 8002cc0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	767b      	strb	r3, [r7, #25]
		         }
		         }
		         if (m2>12)
 8002ccc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	dd01      	ble.n	8002cd8 <HAL_GPIO_EXTI_Callback+0x694>
		         {
		         m2=1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	767b      	strb	r3, [r7, #25]
		        }
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002cd8:	2108      	movs	r1, #8
 8002cda:	487f      	ldr	r0, [pc, #508]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002cdc:	f001 f908 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10f      	bne.n	8002d06 <HAL_GPIO_EXTI_Callback+0x6c2>
		        {
		        delay_micros(200000);
 8002ce6:	487d      	ldr	r0, [pc, #500]	; (8002edc <HAL_GPIO_EXTI_Callback+0x898>)
 8002ce8:	f7fe fb6c 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002cec:	2108      	movs	r1, #8
 8002cee:	487a      	ldr	r0, [pc, #488]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002cf0:	f001 f8fe 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_GPIO_EXTI_Callback+0x6c2>
		        {
		         m2--;
 8002cfa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	767b      	strb	r3, [r7, #25]
		         }
		         }
		         if (m2<1)
 8002d06:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f300 838c 	bgt.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
		         {
		         m2=12;
 8002d10:	230c      	movs	r3, #12
 8002d12:	767b      	strb	r3, [r7, #25]
		        }


		       break;
 8002d14:	e388      	b.n	8003428 <HAL_GPIO_EXTI_Callback+0xde4>


		       case 4:


		      InstallationCursor (8, 2);
 8002d16:	2102      	movs	r1, #2
 8002d18:	2008      	movs	r0, #8
 8002d1a:	f7fe fd2f 	bl	800177c <InstallationCursor>
		      lcd_dat((y2/100)%10 + '0'); // Выделяем единицы
 8002d1e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002d22:	4a6f      	ldr	r2, [pc, #444]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x89c>)
 8002d24:	fb82 1203 	smull	r1, r2, r2, r3
 8002d28:	1152      	asrs	r2, r2, #5
 8002d2a:	17db      	asrs	r3, r3, #31
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002d32:	fb83 1302 	smull	r1, r3, r3, r2
 8002d36:	1099      	asrs	r1, r3, #2
 8002d38:	17d3      	asrs	r3, r2, #31
 8002d3a:	1ac9      	subs	r1, r1, r3
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3330      	adds	r3, #48	; 0x30
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fc18 	bl	8001584 <lcd_dat>
		      lcd_dat((y2/10)%10 + '0'); // Выделяем десятки
 8002d54:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002d58:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d5e:	1092      	asrs	r2, r2, #2
 8002d60:	17db      	asrs	r3, r3, #31
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	b25a      	sxtb	r2, r3
 8002d66:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002d68:	fb83 1302 	smull	r1, r3, r3, r2
 8002d6c:	1099      	asrs	r1, r3, #2
 8002d6e:	17d3      	asrs	r3, r2, #31
 8002d70:	1ac9      	subs	r1, r1, r3
 8002d72:	460b      	mov	r3, r1
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	3330      	adds	r3, #48	; 0x30
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fbfd 	bl	8001584 <lcd_dat>
		      lcd_dat(y2%10 + '0'); // Выделяем единицы
 8002d8a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_GPIO_EXTI_Callback+0x890>)
 8002d90:	fb83 1302 	smull	r1, r3, r3, r2
 8002d94:	1099      	asrs	r1, r3, #2
 8002d96:	17d3      	asrs	r3, r2, #31
 8002d98:	1ac9      	subs	r1, r1, r3
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3330      	adds	r3, #48	; 0x30
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fbe9 	bl	8001584 <lcd_dat>





		       if((0<=v_izm) && (v_izm<=5))
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b05      	cmp	r3, #5
 8002db6:	d840      	bhi.n	8002e3a <HAL_GPIO_EXTI_Callback+0x7f6>
		        {
		         if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002db8:	2104      	movs	r1, #4
 8002dba:	4847      	ldr	r0, [pc, #284]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002dbc:	f001 f898 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d112      	bne.n	8002dec <HAL_GPIO_EXTI_Callback+0x7a8>
		        {
		        	 delay_micros(200000);
 8002dc6:	4845      	ldr	r0, [pc, #276]	; (8002edc <HAL_GPIO_EXTI_Callback+0x898>)
 8002dc8:	f7fe fafc 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002dcc:	2104      	movs	r1, #4
 8002dce:	4842      	ldr	r0, [pc, #264]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002dd0:	f001 f88e 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d108      	bne.n	8002dec <HAL_GPIO_EXTI_Callback+0x7a8>
		        {
		         y2++;
 8002dda:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	763b      	strb	r3, [r7, #24]
		         v_izm++;
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	3301      	adds	r3, #1
 8002dea:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (y2>100)
 8002dec:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	dd01      	ble.n	8002df8 <HAL_GPIO_EXTI_Callback+0x7b4>
		         {
		         y2=1;
 8002df4:	2301      	movs	r3, #1
 8002df6:	763b      	strb	r3, [r7, #24]
		        }
		         if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002df8:	2108      	movs	r1, #8
 8002dfa:	4837      	ldr	r0, [pc, #220]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002dfc:	f001 f878 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d112      	bne.n	8002e2c <HAL_GPIO_EXTI_Callback+0x7e8>
		        {
		        	 delay_micros(200000);
 8002e06:	4835      	ldr	r0, [pc, #212]	; (8002edc <HAL_GPIO_EXTI_Callback+0x898>)
 8002e08:	f7fe fadc 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	4832      	ldr	r0, [pc, #200]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002e10:	f001 f86e 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d108      	bne.n	8002e2c <HAL_GPIO_EXTI_Callback+0x7e8>
		        {
		         y2--;
 8002e1a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	763b      	strb	r3, [r7, #24]
		         v_izm++;
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (y2<1 )
 8002e2c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	dc3c      	bgt.n	8002eae <HAL_GPIO_EXTI_Callback+0x86a>
		         {
		         y2=99;
 8002e34:	2363      	movs	r3, #99	; 0x63
 8002e36:	763b      	strb	r3, [r7, #24]
 8002e38:	e039      	b.n	8002eae <HAL_GPIO_EXTI_Callback+0x86a>
		        }
		         }

		         else
		         {
		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	4826      	ldr	r0, [pc, #152]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002e3e:	f001 f857 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10f      	bne.n	8002e68 <HAL_GPIO_EXTI_Callback+0x824>
		        {
		         delay_micros(100000);
 8002e48:	4826      	ldr	r0, [pc, #152]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8002e4a:	f7fe fabb 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002e4e:	2104      	movs	r1, #4
 8002e50:	4821      	ldr	r0, [pc, #132]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002e52:	f001 f84d 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_GPIO_EXTI_Callback+0x824>
		        {
		         y2++;
 8002e5c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	763b      	strb	r3, [r7, #24]
		         }
		         }
		         if (y2>100)
 8002e68:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	dd01      	ble.n	8002e74 <HAL_GPIO_EXTI_Callback+0x830>
		         {
		         y2=0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	763b      	strb	r3, [r7, #24]
		        }
		         if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002e74:	2108      	movs	r1, #8
 8002e76:	4818      	ldr	r0, [pc, #96]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002e78:	f001 f83a 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_GPIO_EXTI_Callback+0x85e>
		        {
		        delay_micros(100000);
 8002e82:	4818      	ldr	r0, [pc, #96]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8002e84:	f7fe fa9e 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002e88:	2108      	movs	r1, #8
 8002e8a:	4813      	ldr	r0, [pc, #76]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002e8c:	f001 f830 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_GPIO_EXTI_Callback+0x85e>
		        {
		         y2--;
 8002e96:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	763b      	strb	r3, [r7, #24]
		         }
		         }
		         if (y2<0)
 8002ea2:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da01      	bge.n	8002eae <HAL_GPIO_EXTI_Callback+0x86a>
		         {
		         y2=99;
 8002eaa:	2363      	movs	r3, #99	; 0x63
 8002eac:	763b      	strb	r3, [r7, #24]
		        }
		         }

		       if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET)&&(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET))
 8002eae:	2108      	movs	r1, #8
 8002eb0:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002eb2:	f001 f81d 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	f040 82b5 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <HAL_GPIO_EXTI_Callback+0x894>)
 8002ec2:	f001 f815 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 82ad 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
		      		       		        {
		      		       		        v_izm=0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	77fb      	strb	r3, [r7, #31]
		      		       		          }

		      		        break;
 8002ed2:	e2a9      	b.n	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 8002ed4:	66666667 	.word	0x66666667
 8002ed8:	40010800 	.word	0x40010800
 8002edc:	00030d40 	.word	0x00030d40
 8002ee0:	51eb851f 	.word	0x51eb851f
 8002ee4:	000186a0 	.word	0x000186a0

		          case 5:  // установка секунд

		         InstallationCursor (7, 1);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	2007      	movs	r0, #7
 8002eec:	f7fe fc46 	bl	800177c <InstallationCursor>
		         lcd_dat((g/10)%10 +'0'); // Выделяем десятки
 8002ef0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ef4:	4ab0      	ldr	r2, [pc, #704]	; (80031b8 <HAL_GPIO_EXTI_Callback+0xb74>)
 8002ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8002efa:	1092      	asrs	r2, r2, #2
 8002efc:	17db      	asrs	r3, r3, #31
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b25a      	sxtb	r2, r3
 8002f02:	4bad      	ldr	r3, [pc, #692]	; (80031b8 <HAL_GPIO_EXTI_Callback+0xb74>)
 8002f04:	fb83 1302 	smull	r1, r3, r3, r2
 8002f08:	1099      	asrs	r1, r3, #2
 8002f0a:	17d3      	asrs	r3, r2, #31
 8002f0c:	1ac9      	subs	r1, r1, r3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3330      	adds	r3, #48	; 0x30
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fb2f 	bl	8001584 <lcd_dat>
		         lcd_dat(g%10 + '0'); // Выделяем единицы
 8002f26:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8002f2a:	4ba3      	ldr	r3, [pc, #652]	; (80031b8 <HAL_GPIO_EXTI_Callback+0xb74>)
 8002f2c:	fb83 1302 	smull	r1, r3, r3, r2
 8002f30:	1099      	asrs	r1, r3, #2
 8002f32:	17d3      	asrs	r3, r2, #31
 8002f34:	1ac9      	subs	r1, r1, r3
 8002f36:	460b      	mov	r3, r1
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3330      	adds	r3, #48	; 0x30
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fb1b 	bl	8001584 <lcd_dat>

		         if((0<=v_izm) && (v_izm<=5))
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d840      	bhi.n	8002fd6 <HAL_GPIO_EXTI_Callback+0x992>

		        {
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002f54:	2104      	movs	r1, #4
 8002f56:	4899      	ldr	r0, [pc, #612]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8002f58:	f000 ffca 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d112      	bne.n	8002f88 <HAL_GPIO_EXTI_Callback+0x944>
		        {
		        	  delay_micros(200000);
 8002f62:	4897      	ldr	r0, [pc, #604]	; (80031c0 <HAL_GPIO_EXTI_Callback+0xb7c>)
 8002f64:	f7fe fa2e 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002f68:	2104      	movs	r1, #4
 8002f6a:	4894      	ldr	r0, [pc, #592]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8002f6c:	f000 ffc0 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_GPIO_EXTI_Callback+0x944>
		        {
		         g++;
 8002f76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	76fb      	strb	r3, [r7, #27]
		         v_izm++;
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	3301      	adds	r3, #1
 8002f86:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (g>59)
 8002f88:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002f8c:	2b3b      	cmp	r3, #59	; 0x3b
 8002f8e:	dd01      	ble.n	8002f94 <HAL_GPIO_EXTI_Callback+0x950>
		         {
		         g=0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	76fb      	strb	r3, [r7, #27]
		        }
		           if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002f94:	2108      	movs	r1, #8
 8002f96:	4889      	ldr	r0, [pc, #548]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8002f98:	f000 ffaa 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d112      	bne.n	8002fc8 <HAL_GPIO_EXTI_Callback+0x984>
		        {
		         delay_micros(200000);
 8002fa2:	4887      	ldr	r0, [pc, #540]	; (80031c0 <HAL_GPIO_EXTI_Callback+0xb7c>)
 8002fa4:	f7fe fa0e 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8002fa8:	2108      	movs	r1, #8
 8002faa:	4884      	ldr	r0, [pc, #528]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8002fac:	f000 ffa0 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d108      	bne.n	8002fc8 <HAL_GPIO_EXTI_Callback+0x984>
		        {
		         g--;
 8002fb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	76fb      	strb	r3, [r7, #27]
		         v_izm++;
 8002fc2:	7ffb      	ldrb	r3, [r7, #31]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	77fb      	strb	r3, [r7, #31]
		         }
		         }
		         if (g<0)
 8002fc8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da3c      	bge.n	800304a <HAL_GPIO_EXTI_Callback+0xa06>
		         {
		         g=59;
 8002fd0:	233b      	movs	r3, #59	; 0x3b
 8002fd2:	76fb      	strb	r3, [r7, #27]
 8002fd4:	e039      	b.n	800304a <HAL_GPIO_EXTI_Callback+0xa06>
		        }
		        }
		         else
		         {
		          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	4878      	ldr	r0, [pc, #480]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8002fda:	f000 ff89 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10f      	bne.n	8003004 <HAL_GPIO_EXTI_Callback+0x9c0>
		        {
		        	  delay_micros(100000);
 8002fe4:	4877      	ldr	r0, [pc, #476]	; (80031c4 <HAL_GPIO_EXTI_Callback+0xb80>)
 8002fe6:	f7fe f9ed 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET)
 8002fea:	2104      	movs	r1, #4
 8002fec:	4873      	ldr	r0, [pc, #460]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8002fee:	f000 ff7f 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_GPIO_EXTI_Callback+0x9c0>
		        {
		         g++;
 8002ff8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	76fb      	strb	r3, [r7, #27]
		         }
		         }
		         if (g>59)
 8003004:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003008:	2b3b      	cmp	r3, #59	; 0x3b
 800300a:	dd01      	ble.n	8003010 <HAL_GPIO_EXTI_Callback+0x9cc>
		         {
		         g=0;
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
		        }
		           if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8003010:	2108      	movs	r1, #8
 8003012:	486a      	ldr	r0, [pc, #424]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8003014:	f000 ff6c 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <HAL_GPIO_EXTI_Callback+0x9fa>
		        {
		        	   delay_micros(100000);
 800301e:	4869      	ldr	r0, [pc, #420]	; (80031c4 <HAL_GPIO_EXTI_Callback+0xb80>)
 8003020:	f7fe f9d0 	bl	80013c4 <delay_micros>
		        if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_RESET)
 8003024:	2108      	movs	r1, #8
 8003026:	4865      	ldr	r0, [pc, #404]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 8003028:	f000 ff62 	bl	8003ef0 <HAL_GPIO_ReadPin>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <HAL_GPIO_EXTI_Callback+0x9fa>
		        {
		         g--;
 8003032:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	76fb      	strb	r3, [r7, #27]
		         }
		         }
		         if (g<0)
 800303e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da01      	bge.n	800304a <HAL_GPIO_EXTI_Callback+0xa06>
		         {
		         g=59;
 8003046:	233b      	movs	r3, #59	; 0x3b
 8003048:	76fb      	strb	r3, [r7, #27]
		        }
		         }

			   if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == GPIO_PIN_SET)&&(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_SET))
 800304a:	2108      	movs	r1, #8
 800304c:	485b      	ldr	r0, [pc, #364]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 800304e:	f000 ff4f 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 81e7 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
 800305a:	2104      	movs	r1, #4
 800305c:	4857      	ldr	r0, [pc, #348]	; (80031bc <HAL_GPIO_EXTI_Callback+0xb78>)
 800305e:	f000 ff47 	bl	8003ef0 <HAL_GPIO_ReadPin>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	f040 81df 	bne.w	8003428 <HAL_GPIO_EXTI_Callback+0xde4>
			      		       		        {
			      		       		        v_izm=0;
 800306a:	2300      	movs	r3, #0
 800306c:	77fb      	strb	r3, [r7, #31]
			      		       		          }


			        break;
 800306e:	e1db      	b.n	8003428 <HAL_GPIO_EXTI_Callback+0xde4>


		          case 6:


		         		      day_sec1	= (d2 - 1)*86400;
 8003070:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003074:	3b01      	subs	r3, #1
 8003076:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_GPIO_EXTI_Callback+0xb84>)
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	60fb      	str	r3, [r7, #12]
		         		      switch(m2)
 800307e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003082:	3b01      	subs	r3, #1
 8003084:	2b0b      	cmp	r3, #11
 8003086:	f200 80cc 	bhi.w	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
 800308a:	a201      	add	r2, pc, #4	; (adr r2, 8003090 <HAL_GPIO_EXTI_Callback+0xa4c>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030c7 	.word	0x080030c7
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030e5 	.word	0x080030e5
 80030a0:	080030fd 	.word	0x080030fd
 80030a4:	08003115 	.word	0x08003115
 80030a8:	0800312d 	.word	0x0800312d
 80030ac:	08003145 	.word	0x08003145
 80030b0:	0800315d 	.word	0x0800315d
 80030b4:	08003175 	.word	0x08003175
 80030b8:	0800318d 	.word	0x0800318d
 80030bc:	080031a5 	.word	0x080031a5
		         		      {
		         		      case 1:
		         		      month_sec1 = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
		         		      break;
 80030c4:	e0ad      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 2:
		         		      month_sec1 = 31*day_sr;
 80030c6:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_GPIO_EXTI_Callback+0xb88>)
 80030c8:	617b      	str	r3, [r7, #20]
		         		      break;
 80030ca:	e0aa      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 3:
		         		      if(y2%4 == 0)
 80030cc:	7e3b      	ldrb	r3, [r7, #24]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d102      	bne.n	80030de <HAL_GPIO_EXTI_Callback+0xa9a>
		         		      {
		         		      month_sec1 = 60*day_sr;
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <HAL_GPIO_EXTI_Callback+0xb8c>)
 80030da:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 59*day_sr;
		         		      }
		         		      break;
 80030dc:	e0a1      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 59*day_sr;
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_GPIO_EXTI_Callback+0xb90>)
 80030e0:	617b      	str	r3, [r7, #20]
		         		      break;
 80030e2:	e09e      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 4:
		         		      if(y2%4 == 0)
 80030e4:	7e3b      	ldrb	r3, [r7, #24]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_GPIO_EXTI_Callback+0xab2>
		         		      {
		         		      month_sec1 = 91*day_sr;
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_GPIO_EXTI_Callback+0xb94>)
 80030f2:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 90*day_sr;
		         		      }
		         		      break;
 80030f4:	e095      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 90*day_sr;
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_GPIO_EXTI_Callback+0xb98>)
 80030f8:	617b      	str	r3, [r7, #20]
		         		      break;
 80030fa:	e092      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 5:
		         		      if(y2%4 == 0)
 80030fc:	7e3b      	ldrb	r3, [r7, #24]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <HAL_GPIO_EXTI_Callback+0xaca>
		         		      {
		         		      month_sec1 = 121*day_sr;
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_GPIO_EXTI_Callback+0xb9c>)
 800310a:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 120*day_sr;
		         		      }
		         		      break;
 800310c:	e089      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 120*day_sr;
 800310e:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <HAL_GPIO_EXTI_Callback+0xba0>)
 8003110:	617b      	str	r3, [r7, #20]
		         		      break;
 8003112:	e086      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 6:
		         		      if(y2%4 == 0)
 8003114:	7e3b      	ldrb	r3, [r7, #24]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d102      	bne.n	8003126 <HAL_GPIO_EXTI_Callback+0xae2>
		         		      {
		         		      month_sec1 = 152*day_sr;
 8003120:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_GPIO_EXTI_Callback+0xba4>)
 8003122:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 151*day_sr;
		         		      }
		         		      break;
 8003124:	e07d      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 151*day_sr;
 8003126:	4b31      	ldr	r3, [pc, #196]	; (80031ec <HAL_GPIO_EXTI_Callback+0xba8>)
 8003128:	617b      	str	r3, [r7, #20]
		         		      break;
 800312a:	e07a      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 7:
		         		      if(y2%4 == 0)
 800312c:	7e3b      	ldrb	r3, [r7, #24]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_GPIO_EXTI_Callback+0xafa>
		         		      {
		         		      month_sec1 = 182*day_sr;
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_GPIO_EXTI_Callback+0xbac>)
 800313a:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 181*day_sr;
		         		      }
		         		      break;
 800313c:	e071      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 181*day_sr;
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <HAL_GPIO_EXTI_Callback+0xbb0>)
 8003140:	617b      	str	r3, [r7, #20]
		         		      break;
 8003142:	e06e      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 8:
		         		      if(y2%4 == 0)
 8003144:	7e3b      	ldrb	r3, [r7, #24]
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_GPIO_EXTI_Callback+0xb12>
		         		      {
		         		      month_sec1 = 213*day_sr;
 8003150:	4b29      	ldr	r3, [pc, #164]	; (80031f8 <HAL_GPIO_EXTI_Callback+0xbb4>)
 8003152:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 212*day_sr;
		         		      }
		         		      break;
 8003154:	e065      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 212*day_sr;
 8003156:	4b29      	ldr	r3, [pc, #164]	; (80031fc <HAL_GPIO_EXTI_Callback+0xbb8>)
 8003158:	617b      	str	r3, [r7, #20]
		         		      break;
 800315a:	e062      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 9:
		         		      if(y2%4 == 0)
 800315c:	7e3b      	ldrb	r3, [r7, #24]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <HAL_GPIO_EXTI_Callback+0xb2a>
		         		      {
		         		      month_sec1 = 244*day_sr;
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_GPIO_EXTI_Callback+0xbbc>)
 800316a:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 243*day_sr;
		         		      }
		         		      break;
 800316c:	e059      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 243*day_sr;
 800316e:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_GPIO_EXTI_Callback+0xbc0>)
 8003170:	617b      	str	r3, [r7, #20]
		         		      break;
 8003172:	e056      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 10:
		         		      if(y2%4 == 0)
 8003174:	7e3b      	ldrb	r3, [r7, #24]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <HAL_GPIO_EXTI_Callback+0xb42>
		         		      {
		         		      month_sec1 = 274*day_sr;
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <HAL_GPIO_EXTI_Callback+0xbc4>)
 8003182:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 273*day_sr;
		         		      }
		         		      break;
 8003184:	e04d      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 273*day_sr;
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_GPIO_EXTI_Callback+0xbc8>)
 8003188:	617b      	str	r3, [r7, #20]
		         		      break;
 800318a:	e04a      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 11:
		         		      if(y2%4 == 0)
 800318c:	7e3b      	ldrb	r3, [r7, #24]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_GPIO_EXTI_Callback+0xb5a>
		         		      {
		         		      month_sec1 = 305*day_sr;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_GPIO_EXTI_Callback+0xbcc>)
 800319a:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 304*day_sr;
		         		      }
		         		      break;
 800319c:	e041      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      month_sec1 = 304*day_sr;
 800319e:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_GPIO_EXTI_Callback+0xbd0>)
 80031a0:	617b      	str	r3, [r7, #20]
		         		      break;
 80031a2:	e03e      	b.n	8003222 <HAL_GPIO_EXTI_Callback+0xbde>
		         		      case 12:
		         		      if(y2%4 == 0)
 80031a4:	7e3b      	ldrb	r3, [r7, #24]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d135      	bne.n	800321c <HAL_GPIO_EXTI_Callback+0xbd8>
		         		      {
		         		      month_sec1 = 335*day_sr;
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_GPIO_EXTI_Callback+0xbd4>)
 80031b2:	617b      	str	r3, [r7, #20]
		         		      }
		         		      else
		         		      {
		         		      month_sec1 = 334*day_sr;
		         		      }
		         		      break;
 80031b4:	e034      	b.n	8003220 <HAL_GPIO_EXTI_Callback+0xbdc>
 80031b6:	bf00      	nop
 80031b8:	66666667 	.word	0x66666667
 80031bc:	40010800 	.word	0x40010800
 80031c0:	00030d40 	.word	0x00030d40
 80031c4:	000186a0 	.word	0x000186a0
 80031c8:	00015180 	.word	0x00015180
 80031cc:	0028de80 	.word	0x0028de80
 80031d0:	004f1a00 	.word	0x004f1a00
 80031d4:	004dc880 	.word	0x004dc880
 80031d8:	0077f880 	.word	0x0077f880
 80031dc:	0076a700 	.word	0x0076a700
 80031e0:	009f8580 	.word	0x009f8580
 80031e4:	009e3400 	.word	0x009e3400
 80031e8:	00c86400 	.word	0x00c86400
 80031ec:	00c71280 	.word	0x00c71280
 80031f0:	00eff100 	.word	0x00eff100
 80031f4:	00ee9f80 	.word	0x00ee9f80
 80031f8:	0118cf80 	.word	0x0118cf80
 80031fc:	01177e00 	.word	0x01177e00
 8003200:	0141ae00 	.word	0x0141ae00
 8003204:	01405c80 	.word	0x01405c80
 8003208:	01693b00 	.word	0x01693b00
 800320c:	0167e980 	.word	0x0167e980
 8003210:	01921980 	.word	0x01921980
 8003214:	0190c800 	.word	0x0190c800
 8003218:	01b9a680 	.word	0x01b9a680
		         		      month_sec1 = 334*day_sr;
 800321c:	4b89      	ldr	r3, [pc, #548]	; (8003444 <HAL_GPIO_EXTI_Callback+0xe00>)
 800321e:	617b      	str	r3, [r7, #20]
		         		      break;
 8003220:	bf00      	nop

		         		      }///switch


		         		      switch(y2)
 8003222:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003226:	2b26      	cmp	r3, #38	; 0x26
 8003228:	f200 80c7 	bhi.w	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	080032d1 	.word	0x080032d1
 8003238:	080032d7 	.word	0x080032d7
 800323c:	080032dd 	.word	0x080032dd
 8003240:	080032e3 	.word	0x080032e3
 8003244:	080032e9 	.word	0x080032e9
 8003248:	080032ef 	.word	0x080032ef
 800324c:	080032f5 	.word	0x080032f5
 8003250:	080032fb 	.word	0x080032fb
 8003254:	08003301 	.word	0x08003301
 8003258:	08003307 	.word	0x08003307
 800325c:	0800330d 	.word	0x0800330d
 8003260:	08003313 	.word	0x08003313
 8003264:	08003319 	.word	0x08003319
 8003268:	0800331f 	.word	0x0800331f
 800326c:	08003325 	.word	0x08003325
 8003270:	0800332b 	.word	0x0800332b
 8003274:	08003331 	.word	0x08003331
 8003278:	08003337 	.word	0x08003337
 800327c:	0800333d 	.word	0x0800333d
 8003280:	08003343 	.word	0x08003343
 8003284:	08003349 	.word	0x08003349
 8003288:	0800334f 	.word	0x0800334f
 800328c:	08003355 	.word	0x08003355
 8003290:	0800335b 	.word	0x0800335b
 8003294:	08003361 	.word	0x08003361
 8003298:	08003367 	.word	0x08003367
 800329c:	0800336d 	.word	0x0800336d
 80032a0:	08003373 	.word	0x08003373
 80032a4:	08003379 	.word	0x08003379
 80032a8:	0800337f 	.word	0x0800337f
 80032ac:	08003385 	.word	0x08003385
 80032b0:	0800338b 	.word	0x0800338b
 80032b4:	08003391 	.word	0x08003391
 80032b8:	08003397 	.word	0x08003397
 80032bc:	0800339d 	.word	0x0800339d
 80032c0:	080033a3 	.word	0x080033a3
 80032c4:	080033a9 	.word	0x080033a9
 80032c8:	080033af 	.word	0x080033af
 80032cc:	080033b5 	.word	0x080033b5
		         		      {
		         		      case 0:
		         		      year_sec1 = 7*year_vis + 23*year_ob;
 80032d0:	4b5d      	ldr	r3, [pc, #372]	; (8003448 <HAL_GPIO_EXTI_Callback+0xe04>)
 80032d2:	613b      	str	r3, [r7, #16]
		         		      break;
 80032d4:	e071      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 1:
		         		      year_sec1 = 8*year_vis + 23*year_ob;
 80032d6:	4b5d      	ldr	r3, [pc, #372]	; (800344c <HAL_GPIO_EXTI_Callback+0xe08>)
 80032d8:	613b      	str	r3, [r7, #16]
		         		      break;
 80032da:	e06e      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 2:
		         		      year_sec1 = 8*year_vis + 24*year_ob;
 80032dc:	4b5c      	ldr	r3, [pc, #368]	; (8003450 <HAL_GPIO_EXTI_Callback+0xe0c>)
 80032de:	613b      	str	r3, [r7, #16]
		         		      break;
 80032e0:	e06b      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 3:
		         		      year_sec1 = 8*year_vis + 25*year_ob;
 80032e2:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <HAL_GPIO_EXTI_Callback+0xe10>)
 80032e4:	613b      	str	r3, [r7, #16]
		         		      break;
 80032e6:	e068      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 4:
		         		      year_sec1 = 8*year_vis + 26*year_ob;
 80032e8:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_GPIO_EXTI_Callback+0xe14>)
 80032ea:	613b      	str	r3, [r7, #16]
		         		      break;
 80032ec:	e065      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 5:
		         		      year_sec1 = 9*year_vis + 26*year_ob;
 80032ee:	4b5b      	ldr	r3, [pc, #364]	; (800345c <HAL_GPIO_EXTI_Callback+0xe18>)
 80032f0:	613b      	str	r3, [r7, #16]
		         		      break;
 80032f2:	e062      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 6:
		         		      year_sec1 = 9*year_vis + 27*year_ob;
 80032f4:	4b5a      	ldr	r3, [pc, #360]	; (8003460 <HAL_GPIO_EXTI_Callback+0xe1c>)
 80032f6:	613b      	str	r3, [r7, #16]
		         		      break;
 80032f8:	e05f      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 7:
		         		      year_sec1 = 9*year_vis + 28*year_ob;
 80032fa:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <HAL_GPIO_EXTI_Callback+0xe20>)
 80032fc:	613b      	str	r3, [r7, #16]
		         		      break;
 80032fe:	e05c      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 8:
		         		      year_sec1 = 9*year_vis + 29*year_ob;
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_GPIO_EXTI_Callback+0xe24>)
 8003302:	613b      	str	r3, [r7, #16]
		         		      break;
 8003304:	e059      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 9:
		         		      year_sec1 = 10*year_vis + 29*year_ob;
 8003306:	4b59      	ldr	r3, [pc, #356]	; (800346c <HAL_GPIO_EXTI_Callback+0xe28>)
 8003308:	613b      	str	r3, [r7, #16]
		         		      break;
 800330a:	e056      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 10:
		         		      year_sec1 = 10*year_vis + 30*year_ob;
 800330c:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_GPIO_EXTI_Callback+0xe2c>)
 800330e:	613b      	str	r3, [r7, #16]
		         		      break;
 8003310:	e053      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 11:
		         		      year_sec1 = 10*year_vis + 31*year_ob;
 8003312:	4b58      	ldr	r3, [pc, #352]	; (8003474 <HAL_GPIO_EXTI_Callback+0xe30>)
 8003314:	613b      	str	r3, [r7, #16]
		         		      break;
 8003316:	e050      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 12:
		         		      year_sec1 = 10*year_vis + 32*year_ob;
 8003318:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_GPIO_EXTI_Callback+0xe34>)
 800331a:	613b      	str	r3, [r7, #16]
		         		      break;
 800331c:	e04d      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 13:
		         		      year_sec1 = 11*year_vis + 32*year_ob;
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <HAL_GPIO_EXTI_Callback+0xe38>)
 8003320:	613b      	str	r3, [r7, #16]
		         		      break;
 8003322:	e04a      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 14:
		         		      year_sec1 = 11*year_vis + 33*year_ob;
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_GPIO_EXTI_Callback+0xe3c>)
 8003326:	613b      	str	r3, [r7, #16]
		         		      break;
 8003328:	e047      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 15:
		         		      year_sec1 = 11*year_vis + 34*year_ob;
 800332a:	4b56      	ldr	r3, [pc, #344]	; (8003484 <HAL_GPIO_EXTI_Callback+0xe40>)
 800332c:	613b      	str	r3, [r7, #16]
		         		      break;
 800332e:	e044      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 16:
		         		      year_sec1 = 11*year_vis + 35*year_ob;
 8003330:	4b55      	ldr	r3, [pc, #340]	; (8003488 <HAL_GPIO_EXTI_Callback+0xe44>)
 8003332:	613b      	str	r3, [r7, #16]
		         		      break;
 8003334:	e041      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 17:
		         		      year_sec1 = 12*year_vis + 35*year_ob;
 8003336:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_GPIO_EXTI_Callback+0xe48>)
 8003338:	613b      	str	r3, [r7, #16]
		         		      break;
 800333a:	e03e      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 18:
		         		      year_sec1 = 12*year_vis + 36*year_ob;
 800333c:	4b54      	ldr	r3, [pc, #336]	; (8003490 <HAL_GPIO_EXTI_Callback+0xe4c>)
 800333e:	613b      	str	r3, [r7, #16]
		         		      break;
 8003340:	e03b      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 19:
		         		      year_sec1 = 12*year_vis + 37*year_ob;
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <HAL_GPIO_EXTI_Callback+0xe50>)
 8003344:	613b      	str	r3, [r7, #16]
		         		      break;
 8003346:	e038      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 20:
		         		      year_sec1 = 12*year_vis + 38*year_ob;
 8003348:	4b53      	ldr	r3, [pc, #332]	; (8003498 <HAL_GPIO_EXTI_Callback+0xe54>)
 800334a:	613b      	str	r3, [r7, #16]
		         		      break;
 800334c:	e035      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 21:
		         		      year_sec1 = 13*year_vis + 38*year_ob;
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_GPIO_EXTI_Callback+0xe58>)
 8003350:	613b      	str	r3, [r7, #16]
		         		      break;
 8003352:	e032      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 22:
		         		      year_sec1 = 13*year_vis + 39*year_ob;
 8003354:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <HAL_GPIO_EXTI_Callback+0xe5c>)
 8003356:	613b      	str	r3, [r7, #16]
		         		      break;
 8003358:	e02f      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 23:
		         		      year_sec1 = 13*year_vis + 40*year_ob;
 800335a:	4b52      	ldr	r3, [pc, #328]	; (80034a4 <HAL_GPIO_EXTI_Callback+0xe60>)
 800335c:	613b      	str	r3, [r7, #16]
		         		      break;
 800335e:	e02c      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 24:
		         		      year_sec1 = 13*year_vis + 41*year_ob;
 8003360:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_GPIO_EXTI_Callback+0xe64>)
 8003362:	613b      	str	r3, [r7, #16]
		         		      break;
 8003364:	e029      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 25:
		         		      year_sec1 = 14*year_vis + 41*year_ob;
 8003366:	4b51      	ldr	r3, [pc, #324]	; (80034ac <HAL_GPIO_EXTI_Callback+0xe68>)
 8003368:	613b      	str	r3, [r7, #16]
		         		      break;
 800336a:	e026      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 26:
		         		      year_sec1 = 14*year_vis + 42*year_ob;
 800336c:	4b50      	ldr	r3, [pc, #320]	; (80034b0 <HAL_GPIO_EXTI_Callback+0xe6c>)
 800336e:	613b      	str	r3, [r7, #16]
		         		      break;
 8003370:	e023      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 27:
		         		      year_sec1 = 14*year_vis + 43*year_ob;
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_GPIO_EXTI_Callback+0xe70>)
 8003374:	613b      	str	r3, [r7, #16]
		         		      break;
 8003376:	e020      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		      case 28:
		         		      year_sec1 = 14*year_vis + 44*year_ob;
 8003378:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <HAL_GPIO_EXTI_Callback+0xe74>)
 800337a:	613b      	str	r3, [r7, #16]
		         		      break;
 800337c:	e01d      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>

		         		     case 29:
		         		     year_sec1 = 15*year_vis + 44*year_ob;
 800337e:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_GPIO_EXTI_Callback+0xe78>)
 8003380:	613b      	str	r3, [r7, #16]
		         		     break;
 8003382:	e01a      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 30:
		         		     year_sec1 = 15*year_vis + 45*year_ob;
 8003384:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_GPIO_EXTI_Callback+0xe7c>)
 8003386:	613b      	str	r3, [r7, #16]
		         		     break;
 8003388:	e017      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 31:
		         		     year_sec1 = 15*year_vis + 46*year_ob;
 800338a:	4b4e      	ldr	r3, [pc, #312]	; (80034c4 <HAL_GPIO_EXTI_Callback+0xe80>)
 800338c:	613b      	str	r3, [r7, #16]
		         		     break;
 800338e:	e014      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 32:
		         		     year_sec1 = 15*year_vis + 47*year_ob;
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_GPIO_EXTI_Callback+0xe84>)
 8003392:	613b      	str	r3, [r7, #16]
		         		     break;
 8003394:	e011      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 33:
		         		     year_sec1 = 16*year_vis + 47*year_ob;
 8003396:	4b4d      	ldr	r3, [pc, #308]	; (80034cc <HAL_GPIO_EXTI_Callback+0xe88>)
 8003398:	613b      	str	r3, [r7, #16]
		         		     break;
 800339a:	e00e      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 34:
		         		     year_sec1 = 16*year_vis + 48*year_ob;
 800339c:	4b4c      	ldr	r3, [pc, #304]	; (80034d0 <HAL_GPIO_EXTI_Callback+0xe8c>)
 800339e:	613b      	str	r3, [r7, #16]
		         		     break;
 80033a0:	e00b      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 35:
		         		     year_sec1 = 16*year_vis + 49*year_ob;
 80033a2:	4b4c      	ldr	r3, [pc, #304]	; (80034d4 <HAL_GPIO_EXTI_Callback+0xe90>)
 80033a4:	613b      	str	r3, [r7, #16]
		         		     break;
 80033a6:	e008      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 36:
		         		     year_sec1 = 16*year_vis + 50*year_ob;
 80033a8:	4b4b      	ldr	r3, [pc, #300]	; (80034d8 <HAL_GPIO_EXTI_Callback+0xe94>)
 80033aa:	613b      	str	r3, [r7, #16]
		         		     break;
 80033ac:	e005      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 37:
		         		     year_sec1 = 17*year_vis + 50*year_ob;
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_GPIO_EXTI_Callback+0xe98>)
 80033b0:	613b      	str	r3, [r7, #16]
		         		     break;
 80033b2:	e002      	b.n	80033ba <HAL_GPIO_EXTI_Callback+0xd76>
		         		     case 38:
		         		     year_sec1 = 17*year_vis + 51*year_ob;
 80033b4:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_GPIO_EXTI_Callback+0xe9c>)
 80033b6:	613b      	str	r3, [r7, #16]
		         		     break;
 80033b8:	bf00      	nop

		         		      }///switch


		         		      time_unix = year_sec1 + month_sec1 + day_sec1 + r*3600 + t *60 + g;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	441a      	add	r2, r3
 80033c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80033c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	18d1      	adds	r1, r2, r3
 80033d2:	f997 201c 	ldrsb.w	r2, [r7, #28]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	18ca      	adds	r2, r1, r3
 80033e0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80033e4:	4413      	add	r3, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xea0>)
 80033ea:	601a      	str	r2, [r3, #0]

		         		     delay_micros(300000);
 80033ec:	483e      	ldr	r0, [pc, #248]	; (80034e8 <HAL_GPIO_EXTI_Callback+0xea4>)
 80033ee:	f7fd ffe9 	bl	80013c4 <delay_micros>

		         		   	   while((RTC->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET);
 80033f2:	bf00      	nop
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_GPIO_EXTI_Callback+0xea8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f9      	beq.n	80033f4 <HAL_GPIO_EXTI_Callback+0xdb0>
		         		   		RTC->CRL = 0x0010;
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_GPIO_EXTI_Callback+0xea8>)
 8003402:	2210      	movs	r2, #16
 8003404:	605a      	str	r2, [r3, #4]
		         		   		RTC->CNTH = time_unix >> 16U;
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xea0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a38      	ldr	r2, [pc, #224]	; (80034ec <HAL_GPIO_EXTI_Callback+0xea8>)
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	6193      	str	r3, [r2, #24]
		         		   	    RTC->CNTL = (time_unix & RTC_CNTL_RTC_CNT);
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_GPIO_EXTI_Callback+0xea0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a35      	ldr	r2, [pc, #212]	; (80034ec <HAL_GPIO_EXTI_Callback+0xea8>)
 8003416:	b29b      	uxth	r3, r3
 8003418:	61d3      	str	r3, [r2, #28]
		         		   		RTC->CRL = 0x0000;
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_GPIO_EXTI_Callback+0xea8>)
 800341c:	2200      	movs	r2, #0
 800341e:	605a      	str	r2, [r3, #4]

		         		   		HAL_TIM_Base_Start_IT(&htim1);
 8003420:	4833      	ldr	r0, [pc, #204]	; (80034f0 <HAL_GPIO_EXTI_Callback+0xeac>)
 8003422:	f001 fcaf 	bl	8004d84 <HAL_TIM_Base_Start_IT>

		         		   		break;
 8003426:	bf00      	nop
		  while(d_cnt!=6)
 8003428:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800342c:	2b06      	cmp	r3, #6
 800342e:	f47f a95e 	bne.w	80026ee <HAL_GPIO_EXTI_Callback+0xaa>
	HAL_TIM_Base_Start_IT(&htim1);
	 }



}
 8003432:	e002      	b.n	800343a <HAL_GPIO_EXTI_Callback+0xdf6>
	HAL_TIM_Base_Start_IT(&htim1);
 8003434:	482e      	ldr	r0, [pc, #184]	; (80034f0 <HAL_GPIO_EXTI_Callback+0xeac>)
 8003436:	f001 fca5 	bl	8004d84 <HAL_TIM_Base_Start_IT>
}
 800343a:	bf00      	nop
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	01b85500 	.word	0x01b85500
 8003448:	386d4380 	.word	0x386d4380
 800344c:	3a4fc880 	.word	0x3a4fc880
 8003450:	3c30fc00 	.word	0x3c30fc00
 8003454:	3e122f80 	.word	0x3e122f80
 8003458:	3ff36300 	.word	0x3ff36300
 800345c:	41d5e800 	.word	0x41d5e800
 8003460:	43b71b80 	.word	0x43b71b80
 8003464:	45984f00 	.word	0x45984f00
 8003468:	47798280 	.word	0x47798280
 800346c:	495c0780 	.word	0x495c0780
 8003470:	4b3d3b00 	.word	0x4b3d3b00
 8003474:	4d1e6e80 	.word	0x4d1e6e80
 8003478:	4effa200 	.word	0x4effa200
 800347c:	50e22700 	.word	0x50e22700
 8003480:	52c35a80 	.word	0x52c35a80
 8003484:	54a48e00 	.word	0x54a48e00
 8003488:	5685c180 	.word	0x5685c180
 800348c:	58684680 	.word	0x58684680
 8003490:	5a497a00 	.word	0x5a497a00
 8003494:	5c2aad80 	.word	0x5c2aad80
 8003498:	5e0be100 	.word	0x5e0be100
 800349c:	5fee6600 	.word	0x5fee6600
 80034a0:	61cf9980 	.word	0x61cf9980
 80034a4:	63b0cd00 	.word	0x63b0cd00
 80034a8:	65920080 	.word	0x65920080
 80034ac:	67748580 	.word	0x67748580
 80034b0:	6955b900 	.word	0x6955b900
 80034b4:	6b36ec80 	.word	0x6b36ec80
 80034b8:	6d182000 	.word	0x6d182000
 80034bc:	6efaa500 	.word	0x6efaa500
 80034c0:	70dbd880 	.word	0x70dbd880
 80034c4:	72bd0c00 	.word	0x72bd0c00
 80034c8:	749e3f80 	.word	0x749e3f80
 80034cc:	7680c480 	.word	0x7680c480
 80034d0:	7861f800 	.word	0x7861f800
 80034d4:	7a432b80 	.word	0x7a432b80
 80034d8:	7c245f00 	.word	0x7c245f00
 80034dc:	7e06e400 	.word	0x7e06e400
 80034e0:	7fe81780 	.word	0x7fe81780
 80034e4:	20000174 	.word	0x20000174
 80034e8:	000493e0 	.word	0x000493e0
 80034ec:	40002800 	.word	0x40002800
 80034f0:	200001f4 	.word	0x200001f4

080034f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
}
 80034fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034fc:	e7fe      	b.n	80034fc <Error_Handler+0x8>
	...

08003500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <HAL_MspInit+0x5c>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_MspInit+0x5c>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6193      	str	r3, [r2, #24]
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_MspInit+0x5c>)
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_MspInit+0x5c>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4a0e      	ldr	r2, [pc, #56]	; (800355c <HAL_MspInit+0x5c>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	61d3      	str	r3, [r2, #28]
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_MspInit+0x5c>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	607b      	str	r3, [r7, #4]
 8003534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_MspInit+0x60>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_MspInit+0x60>)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	40010000 	.word	0x40010000

08003564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <HAL_RTC_MspInit+0x3c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d110      	bne.n	8003598 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003576:	f000 fd03 	bl	8003f80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_RTC_MspInit+0x40>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <HAL_RTC_MspInit+0x40>)
 8003580:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003584:	61d3      	str	r3, [r2, #28]
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_RTC_MspInit+0x40>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <HAL_RTC_MspInit+0x44>)
 8003594:	2201      	movs	r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40002800 	.word	0x40002800
 80035a4:	40021000 	.word	0x40021000
 80035a8:	4242043c 	.word	0x4242043c

080035ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_TIM_Base_MspInit+0x44>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d113      	bne.n	80035e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035c8:	6193      	str	r3, [r2, #24]
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	2019      	movs	r0, #25
 80035dc:	f000 facd 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035e0:	2019      	movs	r0, #25
 80035e2:	f000 fae6 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a20      	ldr	r2, [pc, #128]	; (8003694 <HAL_UART_MspInit+0x9c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d139      	bne.n	800368c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003618:	4b1f      	ldr	r3, [pc, #124]	; (8003698 <HAL_UART_MspInit+0xa0>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_UART_MspInit+0xa0>)
 800361e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003622:	6193      	str	r3, [r2, #24]
 8003624:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003630:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_UART_MspInit+0xa0>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	6193      	str	r3, [r2, #24]
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_UART_MspInit+0xa0>)
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800364c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364e:	2302      	movs	r3, #2
 8003650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003652:	2303      	movs	r3, #3
 8003654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	4619      	mov	r1, r3
 800365c:	480f      	ldr	r0, [pc, #60]	; (800369c <HAL_UART_MspInit+0xa4>)
 800365e:	f000 fac3 	bl	8003be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003670:	f107 0310 	add.w	r3, r7, #16
 8003674:	4619      	mov	r1, r3
 8003676:	4809      	ldr	r0, [pc, #36]	; (800369c <HAL_UART_MspInit+0xa4>)
 8003678:	f000 fab6 	bl	8003be8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2100      	movs	r1, #0
 8003680:	2025      	movs	r0, #37	; 0x25
 8003682:	f000 fa7a 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003686:	2025      	movs	r0, #37	; 0x25
 8003688:	f000 fa93 	bl	8003bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800368c:	bf00      	nop
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40013800 	.word	0x40013800
 8003698:	40021000 	.word	0x40021000
 800369c:	40010800 	.word	0x40010800

080036a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036a4:	e7fe      	b.n	80036a4 <NMI_Handler+0x4>

080036a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a6:	b480      	push	{r7}
 80036a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036aa:	e7fe      	b.n	80036aa <HardFault_Handler+0x4>

080036ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <MemManage_Handler+0x4>

080036b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036b6:	e7fe      	b.n	80036b6 <BusFault_Handler+0x4>

080036b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036bc:	e7fe      	b.n	80036bc <UsageFault_Handler+0x4>

080036be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036d6:	b480      	push	{r7}
 80036d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036e6:	f000 f931 	bl	800394c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}

080036ee <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80036f2:	2002      	movs	r0, #2
 80036f4:	f000 fc2c 	bl	8003f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}

080036fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <TIM1_UP_IRQHandler+0x10>)
 8003702:	f001 fbbf 	bl	8004e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200001f4 	.word	0x200001f4

08003710 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	        if((MYUART.Instance->SR & USART_SR_RXNE) != RESET)
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <USART1_IRQHandler+0x58>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <USART1_IRQHandler+0x4c>
	        {
	                uint8_t rbyte = (uint8_t)(MYUART.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8003724:	4b10      	ldr	r3, [pc, #64]	; (8003768 <USART1_IRQHandler+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	71fb      	strb	r3, [r7, #7]
	                uint16_t i = (uint16_t)(rx_buffer_head + 1) % UART_RX_BUFFER_SIZE;
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <USART1_IRQHandler+0x5c>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	3301      	adds	r3, #1
 8003734:	b29b      	uxth	r3, r3
 8003736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800373a:	80bb      	strh	r3, [r7, #4]

	                if(i != rx_buffer_tail)
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <USART1_IRQHandler+0x60>)
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	88ba      	ldrh	r2, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d009      	beq.n	800375c <USART1_IRQHandler+0x4c>
	                {
	                        rx_buffer[rx_buffer_head] = rbyte;
 8003748:	4b08      	ldr	r3, [pc, #32]	; (800376c <USART1_IRQHandler+0x5c>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4619      	mov	r1, r3
 8003750:	4a08      	ldr	r2, [pc, #32]	; (8003774 <USART1_IRQHandler+0x64>)
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	5453      	strb	r3, [r2, r1]
	                        rx_buffer_head = i;
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <USART1_IRQHandler+0x5c>)
 8003758:	88bb      	ldrh	r3, [r7, #4]
 800375a:	8013      	strh	r3, [r2, #0]
	                }
	        }

	        return;
 800375c:	bf00      	nop
	  /* USER CODE END USART1_IRQn 0 */
	  HAL_UART_IRQHandler(&huart1);
	  /* USER CODE BEGIN USART1_IRQn 1 */

	  /* USER CODE END USART1_IRQn 1 */
}
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000188 	.word	0x20000188
 800376c:	200000dc 	.word	0x200000dc
 8003770:	200000de 	.word	0x200000de
 8003774:	200000e0 	.word	0x200000e0

08003778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003780:	4a14      	ldr	r2, [pc, #80]	; (80037d4 <_sbrk+0x5c>)
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <_sbrk+0x60>)
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800378c:	4b13      	ldr	r3, [pc, #76]	; (80037dc <_sbrk+0x64>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d102      	bne.n	800379a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <_sbrk+0x64>)
 8003796:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <_sbrk+0x68>)
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <_sbrk+0x64>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d207      	bcs.n	80037b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037a8:	f002 f87c 	bl	80058a4 <__errno>
 80037ac:	4603      	mov	r3, r0
 80037ae:	220c      	movs	r2, #12
 80037b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
 80037b6:	e009      	b.n	80037cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <_sbrk+0x64>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <_sbrk+0x64>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
 80037c6:	4a05      	ldr	r2, [pc, #20]	; (80037dc <_sbrk+0x64>)
 80037c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20005000 	.word	0x20005000
 80037d8:	00000400 	.word	0x00000400
 80037dc:	200000d8 	.word	0x200000d8
 80037e0:	20000288 	.word	0x20000288

080037e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <uart_available>:
	rx_buffer_tail = 0;
	__HAL_UART_ENABLE_IT(&MYUART, UART_IT_RXNE);
}

uint16_t uart_available(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	return ((uint16_t)(UART_RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail)) % UART_RX_BUFFER_SIZE;
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <uart_available+0x28>)
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <uart_available+0x2c>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	b29b      	uxth	r3, r3
 8003804:	3380      	adds	r3, #128	; 0x80
 8003806:	b29b      	uxth	r3, r3
 8003808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800380c:	b29b      	uxth	r3, r3
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	200000dc 	.word	0x200000dc
 800381c:	200000de 	.word	0x200000de

08003820 <uart_read>:

uint8_t uart_read(void)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
	if(rx_buffer_head == rx_buffer_tail)
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <uart_read+0x48>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29a      	uxth	r2, r3
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <uart_read+0x4c>)
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	429a      	cmp	r2, r3
 8003834:	d101      	bne.n	800383a <uart_read+0x1a>
	{
		return 0;
 8003836:	2300      	movs	r3, #0
 8003838:	e011      	b.n	800385e <uart_read+0x3e>
	}
	else
	{
		uint8_t c = rx_buffer[rx_buffer_tail];
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <uart_read+0x4c>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <uart_read+0x50>)
 8003844:	5c9b      	ldrb	r3, [r3, r2]
 8003846:	71fb      	strb	r3, [r7, #7]
		rx_buffer_tail = (uint16_t)(rx_buffer_tail + 1) % UART_RX_BUFFER_SIZE;
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <uart_read+0x4c>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	b29b      	uxth	r3, r3
 800384e:	3301      	adds	r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003856:	b29a      	uxth	r2, r3
 8003858:	4b04      	ldr	r3, [pc, #16]	; (800386c <uart_read+0x4c>)
 800385a:	801a      	strh	r2, [r3, #0]
		return c;
 800385c:	79fb      	ldrb	r3, [r7, #7]
	}
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	200000dc 	.word	0x200000dc
 800386c:	200000de 	.word	0x200000de
 8003870:	200000e0 	.word	0x200000e0

08003874 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003876:	490d      	ldr	r1, [pc, #52]	; (80038ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800387c:	e002      	b.n	8003884 <LoopCopyDataInit>

0800387e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800387e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003882:	3304      	adds	r3, #4

08003884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003888:	d3f9      	bcc.n	800387e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800388c:	4c0a      	ldr	r4, [pc, #40]	; (80038b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003890:	e001      	b.n	8003896 <LoopFillZerobss>

08003892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003894:	3204      	adds	r2, #4

08003896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003898:	d3fb      	bcc.n	8003892 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800389a:	f7ff ffa3 	bl	80037e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800389e:	f002 f807 	bl	80058b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80038a2:	f7fd ffb5 	bl	8001810 <main>
  bx lr
 80038a6:	4770      	bx	lr
  ldr r0, =_sdata
 80038a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80038b0:	0800631c 	.word	0x0800631c
  ldr r2, =_sbss
 80038b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80038b8:	20000284 	.word	0x20000284

080038bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC1_2_IRQHandler>
	...

080038c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_Init+0x28>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_Init+0x28>)
 80038ca:	f043 0310 	orr.w	r3, r3, #16
 80038ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038d0:	2003      	movs	r0, #3
 80038d2:	f000 f947 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038d6:	200f      	movs	r0, #15
 80038d8:	f000 f808 	bl	80038ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038dc:	f7ff fe10 	bl	8003500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40022000 	.word	0x40022000

080038ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_InitTick+0x54>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_InitTick+0x58>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	4619      	mov	r1, r3
 80038fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003902:	fbb3 f3f1 	udiv	r3, r3, r1
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f95f 	bl	8003bce <HAL_SYSTICK_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e00e      	b.n	8003938 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b0f      	cmp	r3, #15
 800391e:	d80a      	bhi.n	8003936 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003920:	2200      	movs	r2, #0
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295
 8003928:	f000 f927 	bl	8003b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <HAL_InitTick+0x5c>)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000000 	.word	0x20000000
 8003944:	20000008 	.word	0x20000008
 8003948:	20000004 	.word	0x20000004

0800394c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_IncTick+0x1c>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_IncTick+0x20>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	4a03      	ldr	r2, [pc, #12]	; (800396c <HAL_IncTick+0x20>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	20000008 	.word	0x20000008
 800396c:	20000270 	.word	0x20000270

08003970 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return uwTick;
 8003974:	4b02      	ldr	r3, [pc, #8]	; (8003980 <HAL_GetTick+0x10>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	20000270 	.word	0x20000270

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff fff0 	bl	8003970 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_Delay+0x44>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffe0 	bl	8003970 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008

080039cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e8:	4013      	ands	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039fe:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <__NVIC_SetPriorityGrouping+0x44>)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	60d3      	str	r3, [r2, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a18:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <__NVIC_GetPriorityGrouping+0x18>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0307 	and.w	r3, r3, #7
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	db0b      	blt.n	8003a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	f003 021f 	and.w	r2, r3, #31
 8003a48:	4906      	ldr	r1, [pc, #24]	; (8003a64 <__NVIC_EnableIRQ+0x34>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	2001      	movs	r0, #1
 8003a52:	fa00 f202 	lsl.w	r2, r0, r2
 8003a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100

08003a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	db0a      	blt.n	8003a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	490c      	ldr	r1, [pc, #48]	; (8003ab4 <__NVIC_SetPriority+0x4c>)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	0112      	lsls	r2, r2, #4
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a90:	e00a      	b.n	8003aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <__NVIC_SetPriority+0x50>)
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	3b04      	subs	r3, #4
 8003aa0:	0112      	lsls	r2, r2, #4
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	761a      	strb	r2, [r3, #24]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	; 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f1c3 0307 	rsb	r3, r3, #7
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	bf28      	it	cs
 8003ada:	2304      	movcs	r3, #4
 8003adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2b06      	cmp	r3, #6
 8003ae4:	d902      	bls.n	8003aec <NVIC_EncodePriority+0x30>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	3b03      	subs	r3, #3
 8003aea:	e000      	b.n	8003aee <NVIC_EncodePriority+0x32>
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af0:	f04f 32ff 	mov.w	r2, #4294967295
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43da      	mvns	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	401a      	ands	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b04:	f04f 31ff 	mov.w	r1, #4294967295
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	43d9      	mvns	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b14:	4313      	orrs	r3, r2
         );
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	; 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	; (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff90 	bl	8003a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff2d 	bl	80039cc <__NVIC_SetPriorityGrouping>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8c:	f7ff ff42 	bl	8003a14 <__NVIC_GetPriorityGrouping>
 8003b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff90 	bl	8003abc <NVIC_EncodePriority>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff5f 	bl	8003a68 <__NVIC_SetPriority>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff35 	bl	8003a30 <__NVIC_EnableIRQ>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffa2 	bl	8003b20 <SysTick_Config>
 8003bdc:	4603      	mov	r3, r0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b08b      	sub	sp, #44	; 0x2c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfa:	e169      	b.n	8003ed0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	f040 8158 	bne.w	8003eca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4a9a      	ldr	r2, [pc, #616]	; (8003e88 <HAL_GPIO_Init+0x2a0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d05e      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c24:	4a98      	ldr	r2, [pc, #608]	; (8003e88 <HAL_GPIO_Init+0x2a0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d875      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c2a:	4a98      	ldr	r2, [pc, #608]	; (8003e8c <HAL_GPIO_Init+0x2a4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d058      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c30:	4a96      	ldr	r2, [pc, #600]	; (8003e8c <HAL_GPIO_Init+0x2a4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d86f      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c36:	4a96      	ldr	r2, [pc, #600]	; (8003e90 <HAL_GPIO_Init+0x2a8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d052      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c3c:	4a94      	ldr	r2, [pc, #592]	; (8003e90 <HAL_GPIO_Init+0x2a8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d869      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c42:	4a94      	ldr	r2, [pc, #592]	; (8003e94 <HAL_GPIO_Init+0x2ac>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d04c      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c48:	4a92      	ldr	r2, [pc, #584]	; (8003e94 <HAL_GPIO_Init+0x2ac>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d863      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c4e:	4a92      	ldr	r2, [pc, #584]	; (8003e98 <HAL_GPIO_Init+0x2b0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d046      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
 8003c54:	4a90      	ldr	r2, [pc, #576]	; (8003e98 <HAL_GPIO_Init+0x2b0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d85d      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c5a:	2b12      	cmp	r3, #18
 8003c5c:	d82a      	bhi.n	8003cb4 <HAL_GPIO_Init+0xcc>
 8003c5e:	2b12      	cmp	r3, #18
 8003c60:	d859      	bhi.n	8003d16 <HAL_GPIO_Init+0x12e>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_GPIO_Init+0x80>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003ce3 	.word	0x08003ce3
 8003c6c:	08003cbd 	.word	0x08003cbd
 8003c70:	08003ccf 	.word	0x08003ccf
 8003c74:	08003d11 	.word	0x08003d11
 8003c78:	08003d17 	.word	0x08003d17
 8003c7c:	08003d17 	.word	0x08003d17
 8003c80:	08003d17 	.word	0x08003d17
 8003c84:	08003d17 	.word	0x08003d17
 8003c88:	08003d17 	.word	0x08003d17
 8003c8c:	08003d17 	.word	0x08003d17
 8003c90:	08003d17 	.word	0x08003d17
 8003c94:	08003d17 	.word	0x08003d17
 8003c98:	08003d17 	.word	0x08003d17
 8003c9c:	08003d17 	.word	0x08003d17
 8003ca0:	08003d17 	.word	0x08003d17
 8003ca4:	08003d17 	.word	0x08003d17
 8003ca8:	08003d17 	.word	0x08003d17
 8003cac:	08003cc5 	.word	0x08003cc5
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	4a79      	ldr	r2, [pc, #484]	; (8003e9c <HAL_GPIO_Init+0x2b4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cba:	e02c      	b.n	8003d16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	623b      	str	r3, [r7, #32]
          break;
 8003cc2:	e029      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	623b      	str	r3, [r7, #32]
          break;
 8003ccc:	e024      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	623b      	str	r3, [r7, #32]
          break;
 8003cd6:	e01f      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	330c      	adds	r3, #12
 8003cde:	623b      	str	r3, [r7, #32]
          break;
 8003ce0:	e01a      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cea:	2304      	movs	r3, #4
 8003cec:	623b      	str	r3, [r7, #32]
          break;
 8003cee:	e013      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	611a      	str	r2, [r3, #16]
          break;
 8003d02:	e009      	b.n	8003d18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d04:	2308      	movs	r3, #8
 8003d06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	615a      	str	r2, [r3, #20]
          break;
 8003d0e:	e003      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
          break;
 8003d14:	e000      	b.n	8003d18 <HAL_GPIO_Init+0x130>
          break;
 8003d16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2bff      	cmp	r3, #255	; 0xff
 8003d1c:	d801      	bhi.n	8003d22 <HAL_GPIO_Init+0x13a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	e001      	b.n	8003d26 <HAL_GPIO_Init+0x13e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2bff      	cmp	r3, #255	; 0xff
 8003d2c:	d802      	bhi.n	8003d34 <HAL_GPIO_Init+0x14c>
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	e002      	b.n	8003d3a <HAL_GPIO_Init+0x152>
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	3b08      	subs	r3, #8
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	210f      	movs	r1, #15
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	6a39      	ldr	r1, [r7, #32]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80b1 	beq.w	8003eca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	4a4c      	ldr	r2, [pc, #304]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6193      	str	r3, [r2, #24]
 8003d74:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <HAL_GPIO_Init+0x2b8>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d80:	4a48      	ldr	r2, [pc, #288]	; (8003ea4 <HAL_GPIO_Init+0x2bc>)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	220f      	movs	r2, #15
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <HAL_GPIO_Init+0x2c0>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <HAL_GPIO_Init+0x1ec>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3f      	ldr	r2, [pc, #252]	; (8003eac <HAL_GPIO_Init+0x2c4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00d      	beq.n	8003dd0 <HAL_GPIO_Init+0x1e8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3e      	ldr	r2, [pc, #248]	; (8003eb0 <HAL_GPIO_Init+0x2c8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <HAL_GPIO_Init+0x1e4>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3d      	ldr	r2, [pc, #244]	; (8003eb4 <HAL_GPIO_Init+0x2cc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_GPIO_Init+0x1e0>
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e006      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	e004      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e002      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_GPIO_Init+0x1ee>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	f002 0203 	and.w	r2, r2, #3
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	4093      	lsls	r3, r2
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003de6:	492f      	ldr	r1, [pc, #188]	; (8003ea4 <HAL_GPIO_Init+0x2bc>)
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	089b      	lsrs	r3, r3, #2
 8003dec:	3302      	adds	r3, #2
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d006      	beq.n	8003e0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	492c      	ldr	r1, [pc, #176]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
 8003e0c:	e006      	b.n	8003e1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	4928      	ldr	r1, [pc, #160]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e28:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4922      	ldr	r1, [pc, #136]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]
 8003e34:	e006      	b.n	8003e44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	491e      	ldr	r1, [pc, #120]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d006      	beq.n	8003e5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4918      	ldr	r1, [pc, #96]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	608b      	str	r3, [r1, #8]
 8003e5c:	e006      	b.n	8003e6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e5e:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	43db      	mvns	r3, r3
 8003e66:	4914      	ldr	r1, [pc, #80]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d021      	beq.n	8003ebc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e78:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	490e      	ldr	r1, [pc, #56]	; (8003eb8 <HAL_GPIO_Init+0x2d0>)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
 8003e84:	e021      	b.n	8003eca <HAL_GPIO_Init+0x2e2>
 8003e86:	bf00      	nop
 8003e88:	10320000 	.word	0x10320000
 8003e8c:	10310000 	.word	0x10310000
 8003e90:	10220000 	.word	0x10220000
 8003e94:	10210000 	.word	0x10210000
 8003e98:	10120000 	.word	0x10120000
 8003e9c:	10110000 	.word	0x10110000
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40010800 	.word	0x40010800
 8003eac:	40010c00 	.word	0x40010c00
 8003eb0:	40011000 	.word	0x40011000
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <HAL_GPIO_Init+0x304>)
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	4909      	ldr	r1, [pc, #36]	; (8003eec <HAL_GPIO_Init+0x304>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f47f ae8e 	bne.w	8003bfc <HAL_GPIO_Init+0x14>
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	372c      	adds	r7, #44	; 0x2c
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	e001      	b.n	8003f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	807b      	strh	r3, [r7, #2]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f2e:	787b      	ldrb	r3, [r7, #1]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f34:	887a      	ldrh	r2, [r7, #2]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f3a:	e003      	b.n	8003f44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	041a      	lsls	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	611a      	str	r2, [r3, #16]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f66:	4a05      	ldr	r2, [pc, #20]	; (8003f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7fe fb68 	bl	8002644 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40010400 	.word	0x40010400

08003f80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	420e0020 	.word	0x420e0020

08003f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e26c      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8087 	beq.w	80040c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb8:	4b92      	ldr	r3, [pc, #584]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d00c      	beq.n	8003fde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fc4:	4b8f      	ldr	r3, [pc, #572]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d112      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x5e>
 8003fd0:	4b8c      	ldr	r3, [pc, #560]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d10b      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d06c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x12c>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d168      	bne.n	80040c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e246      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffe:	d106      	bne.n	800400e <HAL_RCC_OscConfig+0x76>
 8004000:	4b80      	ldr	r3, [pc, #512]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a7f      	ldr	r2, [pc, #508]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e02e      	b.n	800406c <HAL_RCC_OscConfig+0xd4>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10c      	bne.n	8004030 <HAL_RCC_OscConfig+0x98>
 8004016:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7a      	ldr	r2, [pc, #488]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800401c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b78      	ldr	r3, [pc, #480]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e01d      	b.n	800406c <HAL_RCC_OscConfig+0xd4>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0xbc>
 800403a:	4b72      	ldr	r3, [pc, #456]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a71      	ldr	r2, [pc, #452]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a6e      	ldr	r2, [pc, #440]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0xd4>
 8004054:	4b6b      	ldr	r3, [pc, #428]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a6a      	ldr	r2, [pc, #424]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800405a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a67      	ldr	r2, [pc, #412]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d013      	beq.n	800409c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7ff fc7c 	bl	8003970 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800407c:	f7ff fc78 	bl	8003970 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b64      	cmp	r3, #100	; 0x64
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1fa      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0xe4>
 800409a:	e014      	b.n	80040c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409c:	f7ff fc68 	bl	8003970 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7ff fc64 	bl	8003970 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e1e6      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x10c>
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d063      	beq.n	800419a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040d2:	4b4c      	ldr	r3, [pc, #304]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040de:	4b49      	ldr	r3, [pc, #292]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x18c>
 80040ea:	4b46      	ldr	r3, [pc, #280]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b43      	ldr	r3, [pc, #268]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x176>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1ba      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3d      	ldr	r3, [pc, #244]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4939      	ldr	r1, [pc, #228]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7ff fc1d 	bl	8003970 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7ff fc19 	bl	8003970 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e19b      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b2a      	ldr	r3, [pc, #168]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4927      	ldr	r1, [pc, #156]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b26      	ldr	r3, [pc, #152]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7ff fbfc 	bl	8003970 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7ff fbf8 	bl	8003970 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e17a      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d03a      	beq.n	800421c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <HAL_RCC_OscConfig+0x274>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b4:	f7ff fbdc 	bl	8003970 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7ff fbd8 	bl	8003970 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e15a      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041da:	2001      	movs	r0, #1
 80041dc:	f000 fad8 	bl	8004790 <RCC_Delay>
 80041e0:	e01c      	b.n	800421c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <HAL_RCC_OscConfig+0x274>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e8:	f7ff fbc2 	bl	8003970 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ee:	e00f      	b.n	8004210 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f0:	f7ff fbbe 	bl	8003970 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d908      	bls.n	8004210 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e140      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	42420000 	.word	0x42420000
 800420c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004210:	4b9e      	ldr	r3, [pc, #632]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e9      	bne.n	80041f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80a6 	beq.w	8004376 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422e:	4b97      	ldr	r3, [pc, #604]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b94      	ldr	r3, [pc, #592]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	4a93      	ldr	r2, [pc, #588]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	61d3      	str	r3, [r2, #28]
 8004246:	4b91      	ldr	r3, [pc, #580]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b8e      	ldr	r3, [pc, #568]	; (8004490 <HAL_RCC_OscConfig+0x4f8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b8b      	ldr	r3, [pc, #556]	; (8004490 <HAL_RCC_OscConfig+0x4f8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a8a      	ldr	r2, [pc, #552]	; (8004490 <HAL_RCC_OscConfig+0x4f8>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7ff fb7f 	bl	8003970 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7ff fb7b 	bl	8003970 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b64      	cmp	r3, #100	; 0x64
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0fd      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b81      	ldr	r3, [pc, #516]	; (8004490 <HAL_RCC_OscConfig+0x4f8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <HAL_RCC_OscConfig+0x312>
 800429c:	4b7b      	ldr	r3, [pc, #492]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4a7a      	ldr	r2, [pc, #488]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6213      	str	r3, [r2, #32]
 80042a8:	e02d      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x334>
 80042b2:	4b76      	ldr	r3, [pc, #472]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	4a75      	ldr	r2, [pc, #468]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	6213      	str	r3, [r2, #32]
 80042be:	4b73      	ldr	r3, [pc, #460]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a72      	ldr	r2, [pc, #456]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	6213      	str	r3, [r2, #32]
 80042ca:	e01c      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	2b05      	cmp	r3, #5
 80042d2:	d10c      	bne.n	80042ee <HAL_RCC_OscConfig+0x356>
 80042d4:	4b6d      	ldr	r3, [pc, #436]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	4a6c      	ldr	r2, [pc, #432]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	6213      	str	r3, [r2, #32]
 80042e0:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a69      	ldr	r2, [pc, #420]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	e00b      	b.n	8004306 <HAL_RCC_OscConfig+0x36e>
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	4a66      	ldr	r2, [pc, #408]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	6213      	str	r3, [r2, #32]
 80042fa:	4b64      	ldr	r3, [pc, #400]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a63      	ldr	r2, [pc, #396]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d015      	beq.n	800433a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800430e:	f7ff fb2f 	bl	8003970 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	e00a      	b.n	800432c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7ff fb2b 	bl	8003970 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	; 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e0ab      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	4b57      	ldr	r3, [pc, #348]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ee      	beq.n	8004316 <HAL_RCC_OscConfig+0x37e>
 8004338:	e014      	b.n	8004364 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433a:	f7ff fb19 	bl	8003970 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004340:	e00a      	b.n	8004358 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7ff fb15 	bl	8003970 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004350:	4293      	cmp	r3, r2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e095      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004358:	4b4c      	ldr	r3, [pc, #304]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1ee      	bne.n	8004342 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d105      	bne.n	8004376 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800436a:	4b48      	ldr	r3, [pc, #288]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4a47      	ldr	r2, [pc, #284]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004374:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8081 	beq.w	8004482 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004380:	4b42      	ldr	r3, [pc, #264]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b08      	cmp	r3, #8
 800438a:	d061      	beq.n	8004450 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d146      	bne.n	8004422 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004394:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_OscConfig+0x4fc>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439a:	f7ff fae9 	bl	8003970 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a2:	f7ff fae5 	bl	8003970 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e067      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b4:	4b35      	ldr	r3, [pc, #212]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f0      	bne.n	80043a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d108      	bne.n	80043dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	492d      	ldr	r1, [pc, #180]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a19      	ldr	r1, [r3, #32]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	430b      	orrs	r3, r1
 80043ee:	4927      	ldr	r1, [pc, #156]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <HAL_RCC_OscConfig+0x4fc>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7ff fab9 	bl	8003970 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7ff fab5 	bl	8003970 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e037      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x46a>
 8004420:	e02f      	b.n	8004482 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <HAL_RCC_OscConfig+0x4fc>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7ff faa2 	bl	8003970 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7ff fa9e 	bl	8003970 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e020      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x498>
 800444e:	e018      	b.n	8004482 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e013      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_RCC_OscConfig+0x4f4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	429a      	cmp	r2, r3
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
 8004494:	42420060 	.word	0x42420060

08004498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0d0      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d910      	bls.n	80044dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ba:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 0207 	bic.w	r2, r3, #7
 80044c2:	4965      	ldr	r1, [pc, #404]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ca:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0b8      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	4a58      	ldr	r2, [pc, #352]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 80044fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800450c:	4b53      	ldr	r3, [pc, #332]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4a52      	ldr	r2, [pc, #328]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004516:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004518:	4b50      	ldr	r3, [pc, #320]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	494d      	ldr	r1, [pc, #308]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d040      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d107      	bne.n	800454e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b47      	ldr	r3, [pc, #284]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d115      	bne.n	8004576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e07f      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d107      	bne.n	8004566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004556:	4b41      	ldr	r3, [pc, #260]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e073      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004566:	4b3d      	ldr	r3, [pc, #244]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06b      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004576:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f023 0203 	bic.w	r2, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4936      	ldr	r1, [pc, #216]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004588:	f7ff f9f2 	bl	8003970 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004590:	f7ff f9ee 	bl	8003970 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e053      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	4b2d      	ldr	r3, [pc, #180]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 020c 	and.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1eb      	bne.n	8004590 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b8:	4b27      	ldr	r3, [pc, #156]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d210      	bcs.n	80045e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 0207 	bic.w	r2, r3, #7
 80045ce:	4922      	ldr	r1, [pc, #136]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e032      	b.n	800464e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4916      	ldr	r1, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	490e      	ldr	r1, [pc, #56]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 8004622:	4313      	orrs	r3, r2
 8004624:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004626:	f000 f821 	bl	800466c <HAL_RCC_GetSysClockFreq>
 800462a:	4602      	mov	r2, r0
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	490a      	ldr	r1, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x1c8>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a09      	ldr	r2, [pc, #36]	; (8004664 <HAL_RCC_ClockConfig+0x1cc>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004642:	4b09      	ldr	r3, [pc, #36]	; (8004668 <HAL_RCC_ClockConfig+0x1d0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff f950 	bl	80038ec <HAL_InitTick>

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40022000 	.word	0x40022000
 800465c:	40021000 	.word	0x40021000
 8004660:	080062c8 	.word	0x080062c8
 8004664:	20000000 	.word	0x20000000
 8004668:	20000004 	.word	0x20000004

0800466c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	b490      	push	{r4, r7}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004672:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004674:	1d3c      	adds	r4, r7, #4
 8004676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004678:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800467c:	f240 2301 	movw	r3, #513	; 0x201
 8004680:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d002      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x40>
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x46>
 80046aa:	e02d      	b.n	8004708 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ae:	623b      	str	r3, [r7, #32]
      break;
 80046b0:	e02d      	b.n	800470e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	0c9b      	lsrs	r3, r3, #18
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046be:	4413      	add	r3, r2
 80046c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d013      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046d0:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCC_GetSysClockFreq+0xb4>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	0c5b      	lsrs	r3, r3, #17
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046de:	4413      	add	r3, r2
 80046e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ea:	fb02 f203 	mul.w	r2, r2, r3
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	e004      	b.n	8004702 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4a0b      	ldr	r2, [pc, #44]	; (8004728 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	623b      	str	r3, [r7, #32]
      break;
 8004706:	e002      	b.n	800470e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_GetSysClockFreq+0xb8>)
 800470a:	623b      	str	r3, [r7, #32]
      break;
 800470c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470e:	6a3b      	ldr	r3, [r7, #32]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bc90      	pop	{r4, r7}
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	080062a8 	.word	0x080062a8
 8004720:	40021000 	.word	0x40021000
 8004724:	007a1200 	.word	0x007a1200
 8004728:	003d0900 	.word	0x003d0900

0800472c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004730:	4b02      	ldr	r3, [pc, #8]	; (800473c <HAL_RCC_GetHCLKFreq+0x10>)
 8004732:	681b      	ldr	r3, [r3, #0]
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr
 800473c:	20000000 	.word	0x20000000

08004740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004744:	f7ff fff2 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004748:	4602      	mov	r2, r0
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	0a1b      	lsrs	r3, r3, #8
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	4903      	ldr	r1, [pc, #12]	; (8004764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004756:	5ccb      	ldrb	r3, [r1, r3]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800475c:	4618      	mov	r0, r3
 800475e:	bd80      	pop	{r7, pc}
 8004760:	40021000 	.word	0x40021000
 8004764:	080062d8 	.word	0x080062d8

08004768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800476c:	f7ff ffde 	bl	800472c <HAL_RCC_GetHCLKFreq>
 8004770:	4602      	mov	r2, r0
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	0adb      	lsrs	r3, r3, #11
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	4903      	ldr	r1, [pc, #12]	; (800478c <HAL_RCC_GetPCLK2Freq+0x24>)
 800477e:	5ccb      	ldrb	r3, [r1, r3]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021000 	.word	0x40021000
 800478c:	080062d8 	.word	0x080062d8

08004790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004798:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <RCC_Delay+0x34>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <RCC_Delay+0x38>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	0a5b      	lsrs	r3, r3, #9
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	fb02 f303 	mul.w	r3, r2, r3
 80047aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047ac:	bf00      	nop
  }
  while (Delay --);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1e5a      	subs	r2, r3, #1
 80047b2:	60fa      	str	r2, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f9      	bne.n	80047ac <RCC_Delay+0x1c>
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bc80      	pop	{r7}
 80047c2:	4770      	bx	lr
 80047c4:	20000000 	.word	0x20000000
 80047c8:	10624dd3 	.word	0x10624dd3

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d07d      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047e8:	2300      	movs	r3, #0
 80047ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ec:	4b4f      	ldr	r3, [pc, #316]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10d      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f8:	4b4c      	ldr	r3, [pc, #304]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4a4b      	ldr	r2, [pc, #300]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004802:	61d3      	str	r3, [r2, #28]
 8004804:	4b49      	ldr	r3, [pc, #292]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	4b46      	ldr	r3, [pc, #280]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d118      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004820:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a42      	ldr	r2, [pc, #264]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482c:	f7ff f8a0 	bl	8003970 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	e008      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004834:	f7ff f89c 	bl	8003970 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b64      	cmp	r3, #100	; 0x64
 8004840:	d901      	bls.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e06d      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b3a      	ldr	r3, [pc, #232]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f0      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004852:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02e      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	429a      	cmp	r2, r3
 800486e:	d027      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004870:	4b2e      	ldr	r3, [pc, #184]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004878:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800487a:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800487c:	2201      	movs	r2, #1
 800487e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004886:	4a29      	ldr	r2, [pc, #164]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d014      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f7ff f86b 	bl	8003970 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7ff f867 	bl	8003970 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e036      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ee      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4917      	ldr	r1, [pc, #92]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d8:	4b14      	ldr	r3, [pc, #80]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	4a13      	ldr	r2, [pc, #76]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	490b      	ldr	r1, [pc, #44]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4904      	ldr	r1, [pc, #16]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	40007000 	.word	0x40007000
 8004934:	42420440 	.word	0x42420440

08004938 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b08d      	sub	sp, #52	; 0x34
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004940:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004942:	f107 040c 	add.w	r4, r7, #12
 8004946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800494c:	f240 2301 	movw	r3, #513	; 0x201
 8004950:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
 8004956:	2300      	movs	r3, #0
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495a:	2300      	movs	r3, #0
 800495c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	2300      	movs	r3, #0
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b10      	cmp	r3, #16
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b10      	cmp	r3, #16
 8004970:	f200 8091 	bhi.w	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d04c      	beq.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d07c      	beq.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004980:	e089      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004982:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004988:	4b49      	ldr	r3, [pc, #292]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8082 	beq.w	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	0c9b      	lsrs	r3, r3, #18
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049a2:	4413      	add	r3, r2
 80049a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049a8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d018      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049b4:	4b3e      	ldr	r3, [pc, #248]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c5b      	lsrs	r3, r3, #17
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049c2:	4413      	add	r3, r2
 80049c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80049d4:	4a37      	ldr	r2, [pc, #220]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e4:	e004      	b.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	4a33      	ldr	r2, [pc, #204]	; (8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049f0:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049fc:	d102      	bne.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a02:	e04a      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a12:	e042      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004a14:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a24:	d108      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004a30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a36:	e01f      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a42:	d109      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004a50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a56:	e00f      	b.n	8004a78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a62:	d11c      	bne.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d016      	beq.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004a70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a76:	e012      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004a78:	e011      	b.n	8004a9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a7a:	f7ff fe75 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	0b9b      	lsrs	r3, r3, #14
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a94:	e004      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004a96:	bf00      	nop
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004a9e:	bf00      	nop
    }
  }
  return (frequency);
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3734      	adds	r7, #52	; 0x34
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd90      	pop	{r4, r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	080062b8 	.word	0x080062b8
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	007a1200 	.word	0x007a1200
 8004ab8:	003d0900 	.word	0x003d0900
 8004abc:	aaaaaaab 	.word	0xaaaaaaab

08004ac0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e084      	b.n	8004be0 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	7c5b      	ldrb	r3, [r3, #17]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fe fd3c 	bl	8003564 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f87a 	bl	8004bec <HAL_RTC_WaitForSynchro>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2204      	movs	r2, #4
 8004b02:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e06b      	b.n	8004be0 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f89c 	bl	8004c46 <RTC_EnterInitMode>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2204      	movs	r2, #4
 8004b18:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e060      	b.n	8004be0 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0207 	bic.w	r2, r2, #7
 8004b2c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004b36:	4b2c      	ldr	r3, [pc, #176]	; (8004be8 <HAL_RTC_Init+0x128>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	4a2b      	ldr	r2, [pc, #172]	; (8004be8 <HAL_RTC_Init+0x128>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004b42:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_RTC_Init+0x128>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	4926      	ldr	r1, [pc, #152]	; (8004be8 <HAL_RTC_Init+0x128>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d003      	beq.n	8004b66 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e00e      	b.n	8004b84 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004b66:	2001      	movs	r0, #1
 8004b68:	f7ff fee6 	bl	8004938 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b6c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d104      	bne.n	8004b7e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2204      	movs	r2, #4
 8004b78:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e030      	b.n	8004be0 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b01      	subs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 010f 	bic.w	r1, r3, #15
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	0c1a      	lsrs	r2, r3, #16
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	b291      	uxth	r1, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	430b      	orrs	r3, r1
 8004bae:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f870 	bl	8004c96 <RTC_ExitInitMode>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00c      	b.n	8004be0 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004bde:	2300      	movs	r3, #0
  }
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40006c00 	.word	0x40006c00

08004bec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e01d      	b.n	8004c3e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0208 	bic.w	r2, r2, #8
 8004c10:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c12:	f7fe fead 	bl	8003970 <HAL_GetTick>
 8004c16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c18:	e009      	b.n	8004c2e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c1a:	f7fe fea9 	bl	8003970 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c28:	d901      	bls.n	8004c2e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e007      	b.n	8004c3e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0ee      	beq.n	8004c1a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004c52:	f7fe fe8d 	bl	8003970 <HAL_GetTick>
 8004c56:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c58:	e009      	b.n	8004c6e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c5a:	f7fe fe89 	bl	8003970 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c68:	d901      	bls.n	8004c6e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00f      	b.n	8004c8e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ee      	beq.n	8004c5a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0210 	orr.w	r2, r2, #16
 8004c8a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0210 	bic.w	r2, r2, #16
 8004cb0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004cb2:	f7fe fe5d 	bl	8003970 <HAL_GetTick>
 8004cb6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cb8:	e009      	b.n	8004cce <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004cba:	f7fe fe59 	bl	8003970 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc8:	d901      	bls.n	8004cce <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e007      	b.n	8004cde <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ee      	beq.n	8004cba <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e041      	b.n	8004d7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fe fc4d 	bl	80035ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f000 fa9d 	bl	8005264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d001      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e03a      	b.n	8004e12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a18      	ldr	r2, [pc, #96]	; (8004e1c <HAL_TIM_Base_Start_IT+0x98>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00e      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x58>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc6:	d009      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x58>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <HAL_TIM_Base_Start_IT+0x9c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d004      	beq.n	8004ddc <HAL_TIM_Base_Start_IT+0x58>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d111      	bne.n	8004e00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b06      	cmp	r3, #6
 8004dec:	d010      	beq.n	8004e10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0201 	orr.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	e007      	b.n	8004e10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800

08004e28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6a1a      	ldr	r2, [r3, #32]
 8004e46:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10f      	bne.n	8004e70 <HAL_TIM_Base_Stop_IT+0x48>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6a1a      	ldr	r2, [r3, #32]
 8004e56:	f240 4344 	movw	r3, #1092	; 0x444
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d107      	bne.n	8004e70 <HAL_TIM_Base_Stop_IT+0x48>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d122      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0202 	mvn.w	r2, #2
 8004eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9b1 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9a4 	bl	800521c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f9b3 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d122      	bne.n	8004f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d11b      	bne.n	8004f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0204 	mvn.w	r2, #4
 8004f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f987 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f97a 	bl	800521c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f989 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	2b08      	cmp	r3, #8
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0208 	mvn.w	r2, #8
 8004f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f95d 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f950 	bl	800521c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f95f 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b10      	cmp	r3, #16
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0210 	mvn.w	r2, #16
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f933 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f926 	bl	800521c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f935 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d10e      	bne.n	8005008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0201 	mvn.w	r2, #1
 8005000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fb fc9c 	bl	8000940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d10e      	bne.n	8005034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005020:	2b80      	cmp	r3, #128	; 0x80
 8005022:	d107      	bne.n	8005034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800502c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa77 	bl	8005522 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d10e      	bne.n	8005060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b40      	cmp	r3, #64	; 0x40
 800504e:	d107      	bne.n	8005060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8f9 	bl	8005252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b20      	cmp	r3, #32
 800506c:	d10e      	bne.n	800508c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b20      	cmp	r3, #32
 800507a:	d107      	bne.n	800508c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0220 	mvn.w	r2, #32
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa42 	bl	8005510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_ConfigClockSource+0x18>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0b3      	b.n	8005214 <HAL_TIM_ConfigClockSource+0x180>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e4:	d03e      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xd0>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	f200 8087 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x168>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	f000 8085 	beq.w	8005200 <HAL_TIM_ConfigClockSource+0x16c>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fa:	d87f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 80050fc:	2b70      	cmp	r3, #112	; 0x70
 80050fe:	d01a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xa2>
 8005100:	2b70      	cmp	r3, #112	; 0x70
 8005102:	d87b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 8005104:	2b60      	cmp	r3, #96	; 0x60
 8005106:	d050      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x116>
 8005108:	2b60      	cmp	r3, #96	; 0x60
 800510a:	d877      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 800510c:	2b50      	cmp	r3, #80	; 0x50
 800510e:	d03c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xf6>
 8005110:	2b50      	cmp	r3, #80	; 0x50
 8005112:	d873      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d058      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x136>
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d86f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d064      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x156>
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d86b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x156>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d867      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x156>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005134:	e062      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 f966 	bl	8005416 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005158:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04e      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 f94f 	bl	8005416 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e03b      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 f8c6 	bl	8005328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	; 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 f91d 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e02b      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 f8e4 	bl	8005384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	; 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f90d 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e01b      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 f8a6 	bl	8005328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f8fd 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e00b      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 f8f4 	bl	80053e2 <TIM_ITRx_SetConfig>
        break;
 80051fa:	e002      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051fc:	bf00      	nop
 80051fe:	e000      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005200:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a29      	ldr	r2, [pc, #164]	; (800531c <TIM_Base_SetConfig+0xb8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00b      	beq.n	8005294 <TIM_Base_SetConfig+0x30>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d007      	beq.n	8005294 <TIM_Base_SetConfig+0x30>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a26      	ldr	r2, [pc, #152]	; (8005320 <TIM_Base_SetConfig+0xbc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d003      	beq.n	8005294 <TIM_Base_SetConfig+0x30>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a25      	ldr	r2, [pc, #148]	; (8005324 <TIM_Base_SetConfig+0xc0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d108      	bne.n	80052a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1c      	ldr	r2, [pc, #112]	; (800531c <TIM_Base_SetConfig+0xb8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00b      	beq.n	80052c6 <TIM_Base_SetConfig+0x62>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b4:	d007      	beq.n	80052c6 <TIM_Base_SetConfig+0x62>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a19      	ldr	r2, [pc, #100]	; (8005320 <TIM_Base_SetConfig+0xbc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_Base_SetConfig+0x62>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a18      	ldr	r2, [pc, #96]	; (8005324 <TIM_Base_SetConfig+0xc0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d108      	bne.n	80052d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <TIM_Base_SetConfig+0xb8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	615a      	str	r2, [r3, #20]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr
 800531c:	40012c00 	.word	0x40012c00
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800

08005328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f023 0201 	bic.w	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 030a 	bic.w	r3, r3, #10
 8005364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	621a      	str	r2, [r3, #32]
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0210 	bic.w	r2, r3, #16
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	f043 0307 	orr.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005416:	b480      	push	{r7}
 8005418:	b087      	sub	sp, #28
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	021a      	lsls	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	431a      	orrs	r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4313      	orrs	r3, r2
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	609a      	str	r2, [r3, #8]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e046      	b.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a16      	ldr	r2, [pc, #88]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00e      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d009      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a12      	ldr	r2, [pc, #72]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d004      	beq.n	80054ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a10      	ldr	r2, [pc, #64]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d10c      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr
 8005504:	40012c00 	.word	0x40012c00
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800

08005510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e03f      	b.n	80055c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fe f84c 	bl	80035f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2224      	movs	r2, #36	; 0x24
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f905 	bl	8005788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800558c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800559c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b08a      	sub	sp, #40	; 0x28
 80055d2:	af02      	add	r7, sp, #8
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d17c      	bne.n	80056e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_UART_Transmit+0x2c>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e075      	b.n	80056ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_UART_Transmit+0x3e>
 8005608:	2302      	movs	r3, #2
 800560a:	e06e      	b.n	80056ea <HAL_UART_Transmit+0x11c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2221      	movs	r2, #33	; 0x21
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005622:	f7fe f9a5 	bl	8003970 <HAL_GetTick>
 8005626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563c:	d108      	bne.n	8005650 <HAL_UART_Transmit+0x82>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e003      	b.n	8005658 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005660:	e02a      	b.n	80056b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f840 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e036      	b.n	80056ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10b      	bne.n	800569a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	3302      	adds	r3, #2
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e007      	b.n	80056aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3301      	adds	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1cf      	bne.n	8005662 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2140      	movs	r1, #64	; 0x40
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f810 	bl	80056f2 <UART_WaitOnFlagUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e006      	b.n	80056ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005702:	e02c      	b.n	800575e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570a:	d028      	beq.n	800575e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <UART_WaitOnFlagUntilTimeout+0x30>
 8005712:	f7fe f92d 	bl	8003970 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	429a      	cmp	r2, r3
 8005720:	d21d      	bcs.n	800575e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005730:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e00f      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	429a      	cmp	r2, r3
 800576c:	bf0c      	ite	eq
 800576e:	2301      	moveq	r3, #1
 8005770:	2300      	movne	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	429a      	cmp	r2, r3
 800577a:	d0c3      	beq.n	8005704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057c2:	f023 030c 	bic.w	r3, r3, #12
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	430b      	orrs	r3, r1
 80057ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2c      	ldr	r2, [pc, #176]	; (800589c <UART_SetConfig+0x114>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d103      	bne.n	80057f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057f0:	f7fe ffba 	bl	8004768 <HAL_RCC_GetPCLK2Freq>
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	e002      	b.n	80057fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057f8:	f7fe ffa2 	bl	8004740 <HAL_RCC_GetPCLK1Freq>
 80057fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009a      	lsls	r2, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <UART_SetConfig+0x118>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	0119      	lsls	r1, r3, #4
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009a      	lsls	r2, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	fbb2 f2f3 	udiv	r2, r2, r3
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <UART_SetConfig+0x118>)
 8005836:	fba3 0302 	umull	r0, r3, r3, r2
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2064      	movs	r0, #100	; 0x64
 800583e:	fb00 f303 	mul.w	r3, r0, r3
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	3332      	adds	r3, #50	; 0x32
 8005848:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <UART_SetConfig+0x118>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005854:	4419      	add	r1, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4613      	mov	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4413      	add	r3, r2
 800585e:	009a      	lsls	r2, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	fbb2 f2f3 	udiv	r2, r2, r3
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <UART_SetConfig+0x118>)
 800586e:	fba3 0302 	umull	r0, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	2064      	movs	r0, #100	; 0x64
 8005876:	fb00 f303 	mul.w	r3, r0, r3
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	3332      	adds	r3, #50	; 0x32
 8005880:	4a07      	ldr	r2, [pc, #28]	; (80058a0 <UART_SetConfig+0x118>)
 8005882:	fba2 2303 	umull	r2, r3, r2, r3
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	f003 020f 	and.w	r2, r3, #15
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	440a      	add	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40013800 	.word	0x40013800
 80058a0:	51eb851f 	.word	0x51eb851f

080058a4 <__errno>:
 80058a4:	4b01      	ldr	r3, [pc, #4]	; (80058ac <__errno+0x8>)
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <__libc_init_array>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	2600      	movs	r6, #0
 80058b4:	4d0c      	ldr	r5, [pc, #48]	; (80058e8 <__libc_init_array+0x38>)
 80058b6:	4c0d      	ldr	r4, [pc, #52]	; (80058ec <__libc_init_array+0x3c>)
 80058b8:	1b64      	subs	r4, r4, r5
 80058ba:	10a4      	asrs	r4, r4, #2
 80058bc:	42a6      	cmp	r6, r4
 80058be:	d109      	bne.n	80058d4 <__libc_init_array+0x24>
 80058c0:	f000 fc70 	bl	80061a4 <_init>
 80058c4:	2600      	movs	r6, #0
 80058c6:	4d0a      	ldr	r5, [pc, #40]	; (80058f0 <__libc_init_array+0x40>)
 80058c8:	4c0a      	ldr	r4, [pc, #40]	; (80058f4 <__libc_init_array+0x44>)
 80058ca:	1b64      	subs	r4, r4, r5
 80058cc:	10a4      	asrs	r4, r4, #2
 80058ce:	42a6      	cmp	r6, r4
 80058d0:	d105      	bne.n	80058de <__libc_init_array+0x2e>
 80058d2:	bd70      	pop	{r4, r5, r6, pc}
 80058d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d8:	4798      	blx	r3
 80058da:	3601      	adds	r6, #1
 80058dc:	e7ee      	b.n	80058bc <__libc_init_array+0xc>
 80058de:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e2:	4798      	blx	r3
 80058e4:	3601      	adds	r6, #1
 80058e6:	e7f2      	b.n	80058ce <__libc_init_array+0x1e>
 80058e8:	08006314 	.word	0x08006314
 80058ec:	08006314 	.word	0x08006314
 80058f0:	08006314 	.word	0x08006314
 80058f4:	08006318 	.word	0x08006318

080058f8 <memset>:
 80058f8:	4603      	mov	r3, r0
 80058fa:	4402      	add	r2, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <sniprintf>:
 8005908:	b40c      	push	{r2, r3}
 800590a:	b530      	push	{r4, r5, lr}
 800590c:	4b17      	ldr	r3, [pc, #92]	; (800596c <sniprintf+0x64>)
 800590e:	1e0c      	subs	r4, r1, #0
 8005910:	681d      	ldr	r5, [r3, #0]
 8005912:	b09d      	sub	sp, #116	; 0x74
 8005914:	da08      	bge.n	8005928 <sniprintf+0x20>
 8005916:	238b      	movs	r3, #139	; 0x8b
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	602b      	str	r3, [r5, #0]
 800591e:	b01d      	add	sp, #116	; 0x74
 8005920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005924:	b002      	add	sp, #8
 8005926:	4770      	bx	lr
 8005928:	f44f 7302 	mov.w	r3, #520	; 0x208
 800592c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005930:	bf0c      	ite	eq
 8005932:	4623      	moveq	r3, r4
 8005934:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005940:	9002      	str	r0, [sp, #8]
 8005942:	9006      	str	r0, [sp, #24]
 8005944:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005948:	4628      	mov	r0, r5
 800594a:	ab21      	add	r3, sp, #132	; 0x84
 800594c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800594e:	a902      	add	r1, sp, #8
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	f000 f869 	bl	8005a28 <_svfiprintf_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	bfbc      	itt	lt
 800595a:	238b      	movlt	r3, #139	; 0x8b
 800595c:	602b      	strlt	r3, [r5, #0]
 800595e:	2c00      	cmp	r4, #0
 8005960:	d0dd      	beq.n	800591e <sniprintf+0x16>
 8005962:	2200      	movs	r2, #0
 8005964:	9b02      	ldr	r3, [sp, #8]
 8005966:	701a      	strb	r2, [r3, #0]
 8005968:	e7d9      	b.n	800591e <sniprintf+0x16>
 800596a:	bf00      	nop
 800596c:	2000000c 	.word	0x2000000c

08005970 <__ssputs_r>:
 8005970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	688e      	ldr	r6, [r1, #8]
 8005976:	4682      	mov	sl, r0
 8005978:	429e      	cmp	r6, r3
 800597a:	460c      	mov	r4, r1
 800597c:	4690      	mov	r8, r2
 800597e:	461f      	mov	r7, r3
 8005980:	d838      	bhi.n	80059f4 <__ssputs_r+0x84>
 8005982:	898a      	ldrh	r2, [r1, #12]
 8005984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005988:	d032      	beq.n	80059f0 <__ssputs_r+0x80>
 800598a:	6825      	ldr	r5, [r4, #0]
 800598c:	6909      	ldr	r1, [r1, #16]
 800598e:	3301      	adds	r3, #1
 8005990:	eba5 0901 	sub.w	r9, r5, r1
 8005994:	6965      	ldr	r5, [r4, #20]
 8005996:	444b      	add	r3, r9
 8005998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800599c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059a0:	106d      	asrs	r5, r5, #1
 80059a2:	429d      	cmp	r5, r3
 80059a4:	bf38      	it	cc
 80059a6:	461d      	movcc	r5, r3
 80059a8:	0553      	lsls	r3, r2, #21
 80059aa:	d531      	bpl.n	8005a10 <__ssputs_r+0xa0>
 80059ac:	4629      	mov	r1, r5
 80059ae:	f000 fb53 	bl	8006058 <_malloc_r>
 80059b2:	4606      	mov	r6, r0
 80059b4:	b950      	cbnz	r0, 80059cc <__ssputs_r+0x5c>
 80059b6:	230c      	movs	r3, #12
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	f8ca 3000 	str.w	r3, [sl]
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c6:	81a3      	strh	r3, [r4, #12]
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	464a      	mov	r2, r9
 80059ce:	6921      	ldr	r1, [r4, #16]
 80059d0:	f000 face 	bl	8005f70 <memcpy>
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	81a3      	strh	r3, [r4, #12]
 80059e0:	6126      	str	r6, [r4, #16]
 80059e2:	444e      	add	r6, r9
 80059e4:	6026      	str	r6, [r4, #0]
 80059e6:	463e      	mov	r6, r7
 80059e8:	6165      	str	r5, [r4, #20]
 80059ea:	eba5 0509 	sub.w	r5, r5, r9
 80059ee:	60a5      	str	r5, [r4, #8]
 80059f0:	42be      	cmp	r6, r7
 80059f2:	d900      	bls.n	80059f6 <__ssputs_r+0x86>
 80059f4:	463e      	mov	r6, r7
 80059f6:	4632      	mov	r2, r6
 80059f8:	4641      	mov	r1, r8
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	f000 fac6 	bl	8005f8c <memmove>
 8005a00:	68a3      	ldr	r3, [r4, #8]
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	1b9b      	subs	r3, r3, r6
 8005a06:	4432      	add	r2, r6
 8005a08:	2000      	movs	r0, #0
 8005a0a:	60a3      	str	r3, [r4, #8]
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	e7db      	b.n	80059c8 <__ssputs_r+0x58>
 8005a10:	462a      	mov	r2, r5
 8005a12:	f000 fb7b 	bl	800610c <_realloc_r>
 8005a16:	4606      	mov	r6, r0
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d1e1      	bne.n	80059e0 <__ssputs_r+0x70>
 8005a1c:	4650      	mov	r0, sl
 8005a1e:	6921      	ldr	r1, [r4, #16]
 8005a20:	f000 face 	bl	8005fc0 <_free_r>
 8005a24:	e7c7      	b.n	80059b6 <__ssputs_r+0x46>
	...

08005a28 <_svfiprintf_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	4698      	mov	r8, r3
 8005a2e:	898b      	ldrh	r3, [r1, #12]
 8005a30:	4607      	mov	r7, r0
 8005a32:	061b      	lsls	r3, r3, #24
 8005a34:	460d      	mov	r5, r1
 8005a36:	4614      	mov	r4, r2
 8005a38:	b09d      	sub	sp, #116	; 0x74
 8005a3a:	d50e      	bpl.n	8005a5a <_svfiprintf_r+0x32>
 8005a3c:	690b      	ldr	r3, [r1, #16]
 8005a3e:	b963      	cbnz	r3, 8005a5a <_svfiprintf_r+0x32>
 8005a40:	2140      	movs	r1, #64	; 0x40
 8005a42:	f000 fb09 	bl	8006058 <_malloc_r>
 8005a46:	6028      	str	r0, [r5, #0]
 8005a48:	6128      	str	r0, [r5, #16]
 8005a4a:	b920      	cbnz	r0, 8005a56 <_svfiprintf_r+0x2e>
 8005a4c:	230c      	movs	r3, #12
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e0d1      	b.n	8005bfa <_svfiprintf_r+0x1d2>
 8005a56:	2340      	movs	r3, #64	; 0x40
 8005a58:	616b      	str	r3, [r5, #20]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	2320      	movs	r3, #32
 8005a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a64:	2330      	movs	r3, #48	; 0x30
 8005a66:	f04f 0901 	mov.w	r9, #1
 8005a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005c14 <_svfiprintf_r+0x1ec>
 8005a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a76:	4623      	mov	r3, r4
 8005a78:	469a      	mov	sl, r3
 8005a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a7e:	b10a      	cbz	r2, 8005a84 <_svfiprintf_r+0x5c>
 8005a80:	2a25      	cmp	r2, #37	; 0x25
 8005a82:	d1f9      	bne.n	8005a78 <_svfiprintf_r+0x50>
 8005a84:	ebba 0b04 	subs.w	fp, sl, r4
 8005a88:	d00b      	beq.n	8005aa2 <_svfiprintf_r+0x7a>
 8005a8a:	465b      	mov	r3, fp
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4638      	mov	r0, r7
 8005a92:	f7ff ff6d 	bl	8005970 <__ssputs_r>
 8005a96:	3001      	adds	r0, #1
 8005a98:	f000 80aa 	beq.w	8005bf0 <_svfiprintf_r+0x1c8>
 8005a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a9e:	445a      	add	r2, fp
 8005aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8005aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80a2 	beq.w	8005bf0 <_svfiprintf_r+0x1c8>
 8005aac:	2300      	movs	r3, #0
 8005aae:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab6:	f10a 0a01 	add.w	sl, sl, #1
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	9307      	str	r3, [sp, #28]
 8005abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ac4:	4654      	mov	r4, sl
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005acc:	4851      	ldr	r0, [pc, #324]	; (8005c14 <_svfiprintf_r+0x1ec>)
 8005ace:	f000 fa41 	bl	8005f54 <memchr>
 8005ad2:	9a04      	ldr	r2, [sp, #16]
 8005ad4:	b9d8      	cbnz	r0, 8005b0e <_svfiprintf_r+0xe6>
 8005ad6:	06d0      	lsls	r0, r2, #27
 8005ad8:	bf44      	itt	mi
 8005ada:	2320      	movmi	r3, #32
 8005adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ae0:	0711      	lsls	r1, r2, #28
 8005ae2:	bf44      	itt	mi
 8005ae4:	232b      	movmi	r3, #43	; 0x2b
 8005ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aea:	f89a 3000 	ldrb.w	r3, [sl]
 8005aee:	2b2a      	cmp	r3, #42	; 0x2a
 8005af0:	d015      	beq.n	8005b1e <_svfiprintf_r+0xf6>
 8005af2:	4654      	mov	r4, sl
 8005af4:	2000      	movs	r0, #0
 8005af6:	f04f 0c0a 	mov.w	ip, #10
 8005afa:	9a07      	ldr	r2, [sp, #28]
 8005afc:	4621      	mov	r1, r4
 8005afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b02:	3b30      	subs	r3, #48	; 0x30
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d94e      	bls.n	8005ba6 <_svfiprintf_r+0x17e>
 8005b08:	b1b0      	cbz	r0, 8005b38 <_svfiprintf_r+0x110>
 8005b0a:	9207      	str	r2, [sp, #28]
 8005b0c:	e014      	b.n	8005b38 <_svfiprintf_r+0x110>
 8005b0e:	eba0 0308 	sub.w	r3, r0, r8
 8005b12:	fa09 f303 	lsl.w	r3, r9, r3
 8005b16:	4313      	orrs	r3, r2
 8005b18:	46a2      	mov	sl, r4
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	e7d2      	b.n	8005ac4 <_svfiprintf_r+0x9c>
 8005b1e:	9b03      	ldr	r3, [sp, #12]
 8005b20:	1d19      	adds	r1, r3, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	9103      	str	r1, [sp, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfbb      	ittet	lt
 8005b2a:	425b      	neglt	r3, r3
 8005b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b30:	9307      	strge	r3, [sp, #28]
 8005b32:	9307      	strlt	r3, [sp, #28]
 8005b34:	bfb8      	it	lt
 8005b36:	9204      	strlt	r2, [sp, #16]
 8005b38:	7823      	ldrb	r3, [r4, #0]
 8005b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b3c:	d10c      	bne.n	8005b58 <_svfiprintf_r+0x130>
 8005b3e:	7863      	ldrb	r3, [r4, #1]
 8005b40:	2b2a      	cmp	r3, #42	; 0x2a
 8005b42:	d135      	bne.n	8005bb0 <_svfiprintf_r+0x188>
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	3402      	adds	r4, #2
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	9203      	str	r2, [sp, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bfb8      	it	lt
 8005b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b56:	9305      	str	r3, [sp, #20]
 8005b58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c24 <_svfiprintf_r+0x1fc>
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	4650      	mov	r0, sl
 8005b60:	7821      	ldrb	r1, [r4, #0]
 8005b62:	f000 f9f7 	bl	8005f54 <memchr>
 8005b66:	b140      	cbz	r0, 8005b7a <_svfiprintf_r+0x152>
 8005b68:	2340      	movs	r3, #64	; 0x40
 8005b6a:	eba0 000a 	sub.w	r0, r0, sl
 8005b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	3401      	adds	r4, #1
 8005b76:	4303      	orrs	r3, r0
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b7e:	2206      	movs	r2, #6
 8005b80:	4825      	ldr	r0, [pc, #148]	; (8005c18 <_svfiprintf_r+0x1f0>)
 8005b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b86:	f000 f9e5 	bl	8005f54 <memchr>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d038      	beq.n	8005c00 <_svfiprintf_r+0x1d8>
 8005b8e:	4b23      	ldr	r3, [pc, #140]	; (8005c1c <_svfiprintf_r+0x1f4>)
 8005b90:	bb1b      	cbnz	r3, 8005bda <_svfiprintf_r+0x1b2>
 8005b92:	9b03      	ldr	r3, [sp, #12]
 8005b94:	3307      	adds	r3, #7
 8005b96:	f023 0307 	bic.w	r3, r3, #7
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	9303      	str	r3, [sp, #12]
 8005b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba0:	4433      	add	r3, r6
 8005ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba4:	e767      	b.n	8005a76 <_svfiprintf_r+0x4e>
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	2001      	movs	r0, #1
 8005baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bae:	e7a5      	b.n	8005afc <_svfiprintf_r+0xd4>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f04f 0c0a 	mov.w	ip, #10
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	3401      	adds	r4, #1
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bc2:	3a30      	subs	r2, #48	; 0x30
 8005bc4:	2a09      	cmp	r2, #9
 8005bc6:	d903      	bls.n	8005bd0 <_svfiprintf_r+0x1a8>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d0c5      	beq.n	8005b58 <_svfiprintf_r+0x130>
 8005bcc:	9105      	str	r1, [sp, #20]
 8005bce:	e7c3      	b.n	8005b58 <_svfiprintf_r+0x130>
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bd8:	e7f0      	b.n	8005bbc <_svfiprintf_r+0x194>
 8005bda:	ab03      	add	r3, sp, #12
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	462a      	mov	r2, r5
 8005be0:	4638      	mov	r0, r7
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <_svfiprintf_r+0x1f8>)
 8005be4:	a904      	add	r1, sp, #16
 8005be6:	f3af 8000 	nop.w
 8005bea:	1c42      	adds	r2, r0, #1
 8005bec:	4606      	mov	r6, r0
 8005bee:	d1d6      	bne.n	8005b9e <_svfiprintf_r+0x176>
 8005bf0:	89ab      	ldrh	r3, [r5, #12]
 8005bf2:	065b      	lsls	r3, r3, #25
 8005bf4:	f53f af2c 	bmi.w	8005a50 <_svfiprintf_r+0x28>
 8005bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bfa:	b01d      	add	sp, #116	; 0x74
 8005bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c00:	ab03      	add	r3, sp, #12
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	462a      	mov	r2, r5
 8005c06:	4638      	mov	r0, r7
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <_svfiprintf_r+0x1f8>)
 8005c0a:	a904      	add	r1, sp, #16
 8005c0c:	f000 f87c 	bl	8005d08 <_printf_i>
 8005c10:	e7eb      	b.n	8005bea <_svfiprintf_r+0x1c2>
 8005c12:	bf00      	nop
 8005c14:	080062e0 	.word	0x080062e0
 8005c18:	080062ea 	.word	0x080062ea
 8005c1c:	00000000 	.word	0x00000000
 8005c20:	08005971 	.word	0x08005971
 8005c24:	080062e6 	.word	0x080062e6

08005c28 <_printf_common>:
 8005c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c2c:	4616      	mov	r6, r2
 8005c2e:	4699      	mov	r9, r3
 8005c30:	688a      	ldr	r2, [r1, #8]
 8005c32:	690b      	ldr	r3, [r1, #16]
 8005c34:	4607      	mov	r7, r0
 8005c36:	4293      	cmp	r3, r2
 8005c38:	bfb8      	it	lt
 8005c3a:	4613      	movlt	r3, r2
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c42:	460c      	mov	r4, r1
 8005c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c48:	b10a      	cbz	r2, 8005c4e <_printf_common+0x26>
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	6033      	str	r3, [r6, #0]
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	0699      	lsls	r1, r3, #26
 8005c52:	bf42      	ittt	mi
 8005c54:	6833      	ldrmi	r3, [r6, #0]
 8005c56:	3302      	addmi	r3, #2
 8005c58:	6033      	strmi	r3, [r6, #0]
 8005c5a:	6825      	ldr	r5, [r4, #0]
 8005c5c:	f015 0506 	ands.w	r5, r5, #6
 8005c60:	d106      	bne.n	8005c70 <_printf_common+0x48>
 8005c62:	f104 0a19 	add.w	sl, r4, #25
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	6832      	ldr	r2, [r6, #0]
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dc28      	bgt.n	8005cc2 <_printf_common+0x9a>
 8005c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c74:	1e13      	subs	r3, r2, #0
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	bf18      	it	ne
 8005c7a:	2301      	movne	r3, #1
 8005c7c:	0692      	lsls	r2, r2, #26
 8005c7e:	d42d      	bmi.n	8005cdc <_printf_common+0xb4>
 8005c80:	4649      	mov	r1, r9
 8005c82:	4638      	mov	r0, r7
 8005c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c88:	47c0      	blx	r8
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	d020      	beq.n	8005cd0 <_printf_common+0xa8>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	68e5      	ldr	r5, [r4, #12]
 8005c92:	f003 0306 	and.w	r3, r3, #6
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	bf18      	it	ne
 8005c9a:	2500      	movne	r5, #0
 8005c9c:	6832      	ldr	r2, [r6, #0]
 8005c9e:	f04f 0600 	mov.w	r6, #0
 8005ca2:	68a3      	ldr	r3, [r4, #8]
 8005ca4:	bf08      	it	eq
 8005ca6:	1aad      	subeq	r5, r5, r2
 8005ca8:	6922      	ldr	r2, [r4, #16]
 8005caa:	bf08      	it	eq
 8005cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	bfc4      	itt	gt
 8005cb4:	1a9b      	subgt	r3, r3, r2
 8005cb6:	18ed      	addgt	r5, r5, r3
 8005cb8:	341a      	adds	r4, #26
 8005cba:	42b5      	cmp	r5, r6
 8005cbc:	d11a      	bne.n	8005cf4 <_printf_common+0xcc>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e008      	b.n	8005cd4 <_printf_common+0xac>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	4652      	mov	r2, sl
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	4638      	mov	r0, r7
 8005cca:	47c0      	blx	r8
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d103      	bne.n	8005cd8 <_printf_common+0xb0>
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd8:	3501      	adds	r5, #1
 8005cda:	e7c4      	b.n	8005c66 <_printf_common+0x3e>
 8005cdc:	2030      	movs	r0, #48	; 0x30
 8005cde:	18e1      	adds	r1, r4, r3
 8005ce0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cea:	4422      	add	r2, r4
 8005cec:	3302      	adds	r3, #2
 8005cee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cf2:	e7c5      	b.n	8005c80 <_printf_common+0x58>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	4649      	mov	r1, r9
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	47c0      	blx	r8
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d0e6      	beq.n	8005cd0 <_printf_common+0xa8>
 8005d02:	3601      	adds	r6, #1
 8005d04:	e7d9      	b.n	8005cba <_printf_common+0x92>
	...

08005d08 <_printf_i>:
 8005d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	7e27      	ldrb	r7, [r4, #24]
 8005d10:	4691      	mov	r9, r2
 8005d12:	2f78      	cmp	r7, #120	; 0x78
 8005d14:	4680      	mov	r8, r0
 8005d16:	469a      	mov	sl, r3
 8005d18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d1e:	d807      	bhi.n	8005d30 <_printf_i+0x28>
 8005d20:	2f62      	cmp	r7, #98	; 0x62
 8005d22:	d80a      	bhi.n	8005d3a <_printf_i+0x32>
 8005d24:	2f00      	cmp	r7, #0
 8005d26:	f000 80d9 	beq.w	8005edc <_printf_i+0x1d4>
 8005d2a:	2f58      	cmp	r7, #88	; 0x58
 8005d2c:	f000 80a4 	beq.w	8005e78 <_printf_i+0x170>
 8005d30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d38:	e03a      	b.n	8005db0 <_printf_i+0xa8>
 8005d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d3e:	2b15      	cmp	r3, #21
 8005d40:	d8f6      	bhi.n	8005d30 <_printf_i+0x28>
 8005d42:	a001      	add	r0, pc, #4	; (adr r0, 8005d48 <_printf_i+0x40>)
 8005d44:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d48:	08005da1 	.word	0x08005da1
 8005d4c:	08005db5 	.word	0x08005db5
 8005d50:	08005d31 	.word	0x08005d31
 8005d54:	08005d31 	.word	0x08005d31
 8005d58:	08005d31 	.word	0x08005d31
 8005d5c:	08005d31 	.word	0x08005d31
 8005d60:	08005db5 	.word	0x08005db5
 8005d64:	08005d31 	.word	0x08005d31
 8005d68:	08005d31 	.word	0x08005d31
 8005d6c:	08005d31 	.word	0x08005d31
 8005d70:	08005d31 	.word	0x08005d31
 8005d74:	08005ec3 	.word	0x08005ec3
 8005d78:	08005de5 	.word	0x08005de5
 8005d7c:	08005ea5 	.word	0x08005ea5
 8005d80:	08005d31 	.word	0x08005d31
 8005d84:	08005d31 	.word	0x08005d31
 8005d88:	08005ee5 	.word	0x08005ee5
 8005d8c:	08005d31 	.word	0x08005d31
 8005d90:	08005de5 	.word	0x08005de5
 8005d94:	08005d31 	.word	0x08005d31
 8005d98:	08005d31 	.word	0x08005d31
 8005d9c:	08005ead 	.word	0x08005ead
 8005da0:	680b      	ldr	r3, [r1, #0]
 8005da2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005da6:	1d1a      	adds	r2, r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	600a      	str	r2, [r1, #0]
 8005dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005db0:	2301      	movs	r3, #1
 8005db2:	e0a4      	b.n	8005efe <_printf_i+0x1f6>
 8005db4:	6825      	ldr	r5, [r4, #0]
 8005db6:	6808      	ldr	r0, [r1, #0]
 8005db8:	062e      	lsls	r6, r5, #24
 8005dba:	f100 0304 	add.w	r3, r0, #4
 8005dbe:	d50a      	bpl.n	8005dd6 <_printf_i+0xce>
 8005dc0:	6805      	ldr	r5, [r0, #0]
 8005dc2:	600b      	str	r3, [r1, #0]
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	da03      	bge.n	8005dd0 <_printf_i+0xc8>
 8005dc8:	232d      	movs	r3, #45	; 0x2d
 8005dca:	426d      	negs	r5, r5
 8005dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd0:	230a      	movs	r3, #10
 8005dd2:	485e      	ldr	r0, [pc, #376]	; (8005f4c <_printf_i+0x244>)
 8005dd4:	e019      	b.n	8005e0a <_printf_i+0x102>
 8005dd6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005dda:	6805      	ldr	r5, [r0, #0]
 8005ddc:	600b      	str	r3, [r1, #0]
 8005dde:	bf18      	it	ne
 8005de0:	b22d      	sxthne	r5, r5
 8005de2:	e7ef      	b.n	8005dc4 <_printf_i+0xbc>
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	6825      	ldr	r5, [r4, #0]
 8005de8:	1d18      	adds	r0, r3, #4
 8005dea:	6008      	str	r0, [r1, #0]
 8005dec:	0628      	lsls	r0, r5, #24
 8005dee:	d501      	bpl.n	8005df4 <_printf_i+0xec>
 8005df0:	681d      	ldr	r5, [r3, #0]
 8005df2:	e002      	b.n	8005dfa <_printf_i+0xf2>
 8005df4:	0669      	lsls	r1, r5, #25
 8005df6:	d5fb      	bpl.n	8005df0 <_printf_i+0xe8>
 8005df8:	881d      	ldrh	r5, [r3, #0]
 8005dfa:	2f6f      	cmp	r7, #111	; 0x6f
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2308      	moveq	r3, #8
 8005e00:	230a      	movne	r3, #10
 8005e02:	4852      	ldr	r0, [pc, #328]	; (8005f4c <_printf_i+0x244>)
 8005e04:	2100      	movs	r1, #0
 8005e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e0a:	6866      	ldr	r6, [r4, #4]
 8005e0c:	2e00      	cmp	r6, #0
 8005e0e:	bfa8      	it	ge
 8005e10:	6821      	ldrge	r1, [r4, #0]
 8005e12:	60a6      	str	r6, [r4, #8]
 8005e14:	bfa4      	itt	ge
 8005e16:	f021 0104 	bicge.w	r1, r1, #4
 8005e1a:	6021      	strge	r1, [r4, #0]
 8005e1c:	b90d      	cbnz	r5, 8005e22 <_printf_i+0x11a>
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	d04d      	beq.n	8005ebe <_printf_i+0x1b6>
 8005e22:	4616      	mov	r6, r2
 8005e24:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e28:	fb03 5711 	mls	r7, r3, r1, r5
 8005e2c:	5dc7      	ldrb	r7, [r0, r7]
 8005e2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e32:	462f      	mov	r7, r5
 8005e34:	42bb      	cmp	r3, r7
 8005e36:	460d      	mov	r5, r1
 8005e38:	d9f4      	bls.n	8005e24 <_printf_i+0x11c>
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d10b      	bne.n	8005e56 <_printf_i+0x14e>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	07df      	lsls	r7, r3, #31
 8005e42:	d508      	bpl.n	8005e56 <_printf_i+0x14e>
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	6861      	ldr	r1, [r4, #4]
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	bfde      	ittt	le
 8005e4c:	2330      	movle	r3, #48	; 0x30
 8005e4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e56:	1b92      	subs	r2, r2, r6
 8005e58:	6122      	str	r2, [r4, #16]
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4640      	mov	r0, r8
 8005e60:	f8cd a000 	str.w	sl, [sp]
 8005e64:	aa03      	add	r2, sp, #12
 8005e66:	f7ff fedf 	bl	8005c28 <_printf_common>
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d14c      	bne.n	8005f08 <_printf_i+0x200>
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	b004      	add	sp, #16
 8005e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e78:	4834      	ldr	r0, [pc, #208]	; (8005f4c <_printf_i+0x244>)
 8005e7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005e7e:	680e      	ldr	r6, [r1, #0]
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	f856 5b04 	ldr.w	r5, [r6], #4
 8005e86:	061f      	lsls	r7, r3, #24
 8005e88:	600e      	str	r6, [r1, #0]
 8005e8a:	d514      	bpl.n	8005eb6 <_printf_i+0x1ae>
 8005e8c:	07d9      	lsls	r1, r3, #31
 8005e8e:	bf44      	itt	mi
 8005e90:	f043 0320 	orrmi.w	r3, r3, #32
 8005e94:	6023      	strmi	r3, [r4, #0]
 8005e96:	b91d      	cbnz	r5, 8005ea0 <_printf_i+0x198>
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	f023 0320 	bic.w	r3, r3, #32
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	e7af      	b.n	8005e04 <_printf_i+0xfc>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	f043 0320 	orr.w	r3, r3, #32
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	2378      	movs	r3, #120	; 0x78
 8005eae:	4828      	ldr	r0, [pc, #160]	; (8005f50 <_printf_i+0x248>)
 8005eb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005eb4:	e7e3      	b.n	8005e7e <_printf_i+0x176>
 8005eb6:	065e      	lsls	r6, r3, #25
 8005eb8:	bf48      	it	mi
 8005eba:	b2ad      	uxthmi	r5, r5
 8005ebc:	e7e6      	b.n	8005e8c <_printf_i+0x184>
 8005ebe:	4616      	mov	r6, r2
 8005ec0:	e7bb      	b.n	8005e3a <_printf_i+0x132>
 8005ec2:	680b      	ldr	r3, [r1, #0]
 8005ec4:	6826      	ldr	r6, [r4, #0]
 8005ec6:	1d1d      	adds	r5, r3, #4
 8005ec8:	6960      	ldr	r0, [r4, #20]
 8005eca:	600d      	str	r5, [r1, #0]
 8005ecc:	0635      	lsls	r5, r6, #24
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	d501      	bpl.n	8005ed6 <_printf_i+0x1ce>
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	e002      	b.n	8005edc <_printf_i+0x1d4>
 8005ed6:	0671      	lsls	r1, r6, #25
 8005ed8:	d5fb      	bpl.n	8005ed2 <_printf_i+0x1ca>
 8005eda:	8018      	strh	r0, [r3, #0]
 8005edc:	2300      	movs	r3, #0
 8005ede:	4616      	mov	r6, r2
 8005ee0:	6123      	str	r3, [r4, #16]
 8005ee2:	e7ba      	b.n	8005e5a <_printf_i+0x152>
 8005ee4:	680b      	ldr	r3, [r1, #0]
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	600a      	str	r2, [r1, #0]
 8005eea:	681e      	ldr	r6, [r3, #0]
 8005eec:	2100      	movs	r1, #0
 8005eee:	4630      	mov	r0, r6
 8005ef0:	6862      	ldr	r2, [r4, #4]
 8005ef2:	f000 f82f 	bl	8005f54 <memchr>
 8005ef6:	b108      	cbz	r0, 8005efc <_printf_i+0x1f4>
 8005ef8:	1b80      	subs	r0, r0, r6
 8005efa:	6060      	str	r0, [r4, #4]
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	6123      	str	r3, [r4, #16]
 8005f00:	2300      	movs	r3, #0
 8005f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f06:	e7a8      	b.n	8005e5a <_printf_i+0x152>
 8005f08:	4632      	mov	r2, r6
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	47d0      	blx	sl
 8005f12:	3001      	adds	r0, #1
 8005f14:	d0ab      	beq.n	8005e6e <_printf_i+0x166>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	079b      	lsls	r3, r3, #30
 8005f1a:	d413      	bmi.n	8005f44 <_printf_i+0x23c>
 8005f1c:	68e0      	ldr	r0, [r4, #12]
 8005f1e:	9b03      	ldr	r3, [sp, #12]
 8005f20:	4298      	cmp	r0, r3
 8005f22:	bfb8      	it	lt
 8005f24:	4618      	movlt	r0, r3
 8005f26:	e7a4      	b.n	8005e72 <_printf_i+0x16a>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4632      	mov	r2, r6
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4640      	mov	r0, r8
 8005f30:	47d0      	blx	sl
 8005f32:	3001      	adds	r0, #1
 8005f34:	d09b      	beq.n	8005e6e <_printf_i+0x166>
 8005f36:	3501      	adds	r5, #1
 8005f38:	68e3      	ldr	r3, [r4, #12]
 8005f3a:	9903      	ldr	r1, [sp, #12]
 8005f3c:	1a5b      	subs	r3, r3, r1
 8005f3e:	42ab      	cmp	r3, r5
 8005f40:	dcf2      	bgt.n	8005f28 <_printf_i+0x220>
 8005f42:	e7eb      	b.n	8005f1c <_printf_i+0x214>
 8005f44:	2500      	movs	r5, #0
 8005f46:	f104 0619 	add.w	r6, r4, #25
 8005f4a:	e7f5      	b.n	8005f38 <_printf_i+0x230>
 8005f4c:	080062f1 	.word	0x080062f1
 8005f50:	08006302 	.word	0x08006302

08005f54 <memchr>:
 8005f54:	4603      	mov	r3, r0
 8005f56:	b510      	push	{r4, lr}
 8005f58:	b2c9      	uxtb	r1, r1
 8005f5a:	4402      	add	r2, r0
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	4618      	mov	r0, r3
 8005f60:	d101      	bne.n	8005f66 <memchr+0x12>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e003      	b.n	8005f6e <memchr+0x1a>
 8005f66:	7804      	ldrb	r4, [r0, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	428c      	cmp	r4, r1
 8005f6c:	d1f6      	bne.n	8005f5c <memchr+0x8>
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <memcpy>:
 8005f70:	440a      	add	r2, r1
 8005f72:	4291      	cmp	r1, r2
 8005f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f78:	d100      	bne.n	8005f7c <memcpy+0xc>
 8005f7a:	4770      	bx	lr
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f82:	4291      	cmp	r1, r2
 8005f84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f88:	d1f9      	bne.n	8005f7e <memcpy+0xe>
 8005f8a:	bd10      	pop	{r4, pc}

08005f8c <memmove>:
 8005f8c:	4288      	cmp	r0, r1
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	eb01 0402 	add.w	r4, r1, r2
 8005f94:	d902      	bls.n	8005f9c <memmove+0x10>
 8005f96:	4284      	cmp	r4, r0
 8005f98:	4623      	mov	r3, r4
 8005f9a:	d807      	bhi.n	8005fac <memmove+0x20>
 8005f9c:	1e43      	subs	r3, r0, #1
 8005f9e:	42a1      	cmp	r1, r4
 8005fa0:	d008      	beq.n	8005fb4 <memmove+0x28>
 8005fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005faa:	e7f8      	b.n	8005f9e <memmove+0x12>
 8005fac:	4601      	mov	r1, r0
 8005fae:	4402      	add	r2, r0
 8005fb0:	428a      	cmp	r2, r1
 8005fb2:	d100      	bne.n	8005fb6 <memmove+0x2a>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fbe:	e7f7      	b.n	8005fb0 <memmove+0x24>

08005fc0 <_free_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d043      	beq.n	8006050 <_free_r+0x90>
 8005fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fcc:	1f0c      	subs	r4, r1, #4
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bfb8      	it	lt
 8005fd2:	18e4      	addlt	r4, r4, r3
 8005fd4:	f000 f8d0 	bl	8006178 <__malloc_lock>
 8005fd8:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <_free_r+0x94>)
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	4610      	mov	r0, r2
 8005fde:	b933      	cbnz	r3, 8005fee <_free_r+0x2e>
 8005fe0:	6063      	str	r3, [r4, #4]
 8005fe2:	6014      	str	r4, [r2, #0]
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fea:	f000 b8cb 	b.w	8006184 <__malloc_unlock>
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	d90a      	bls.n	8006008 <_free_r+0x48>
 8005ff2:	6821      	ldr	r1, [r4, #0]
 8005ff4:	1862      	adds	r2, r4, r1
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	bf01      	itttt	eq
 8005ffa:	681a      	ldreq	r2, [r3, #0]
 8005ffc:	685b      	ldreq	r3, [r3, #4]
 8005ffe:	1852      	addeq	r2, r2, r1
 8006000:	6022      	streq	r2, [r4, #0]
 8006002:	6063      	str	r3, [r4, #4]
 8006004:	6004      	str	r4, [r0, #0]
 8006006:	e7ed      	b.n	8005fe4 <_free_r+0x24>
 8006008:	461a      	mov	r2, r3
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	b10b      	cbz	r3, 8006012 <_free_r+0x52>
 800600e:	42a3      	cmp	r3, r4
 8006010:	d9fa      	bls.n	8006008 <_free_r+0x48>
 8006012:	6811      	ldr	r1, [r2, #0]
 8006014:	1850      	adds	r0, r2, r1
 8006016:	42a0      	cmp	r0, r4
 8006018:	d10b      	bne.n	8006032 <_free_r+0x72>
 800601a:	6820      	ldr	r0, [r4, #0]
 800601c:	4401      	add	r1, r0
 800601e:	1850      	adds	r0, r2, r1
 8006020:	4283      	cmp	r3, r0
 8006022:	6011      	str	r1, [r2, #0]
 8006024:	d1de      	bne.n	8005fe4 <_free_r+0x24>
 8006026:	6818      	ldr	r0, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4401      	add	r1, r0
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	6053      	str	r3, [r2, #4]
 8006030:	e7d8      	b.n	8005fe4 <_free_r+0x24>
 8006032:	d902      	bls.n	800603a <_free_r+0x7a>
 8006034:	230c      	movs	r3, #12
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	e7d4      	b.n	8005fe4 <_free_r+0x24>
 800603a:	6820      	ldr	r0, [r4, #0]
 800603c:	1821      	adds	r1, r4, r0
 800603e:	428b      	cmp	r3, r1
 8006040:	bf01      	itttt	eq
 8006042:	6819      	ldreq	r1, [r3, #0]
 8006044:	685b      	ldreq	r3, [r3, #4]
 8006046:	1809      	addeq	r1, r1, r0
 8006048:	6021      	streq	r1, [r4, #0]
 800604a:	6063      	str	r3, [r4, #4]
 800604c:	6054      	str	r4, [r2, #4]
 800604e:	e7c9      	b.n	8005fe4 <_free_r+0x24>
 8006050:	bd38      	pop	{r3, r4, r5, pc}
 8006052:	bf00      	nop
 8006054:	20000160 	.word	0x20000160

08006058 <_malloc_r>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	1ccd      	adds	r5, r1, #3
 800605c:	f025 0503 	bic.w	r5, r5, #3
 8006060:	3508      	adds	r5, #8
 8006062:	2d0c      	cmp	r5, #12
 8006064:	bf38      	it	cc
 8006066:	250c      	movcc	r5, #12
 8006068:	2d00      	cmp	r5, #0
 800606a:	4606      	mov	r6, r0
 800606c:	db01      	blt.n	8006072 <_malloc_r+0x1a>
 800606e:	42a9      	cmp	r1, r5
 8006070:	d903      	bls.n	800607a <_malloc_r+0x22>
 8006072:	230c      	movs	r3, #12
 8006074:	6033      	str	r3, [r6, #0]
 8006076:	2000      	movs	r0, #0
 8006078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800607a:	f000 f87d 	bl	8006178 <__malloc_lock>
 800607e:	4921      	ldr	r1, [pc, #132]	; (8006104 <_malloc_r+0xac>)
 8006080:	680a      	ldr	r2, [r1, #0]
 8006082:	4614      	mov	r4, r2
 8006084:	b99c      	cbnz	r4, 80060ae <_malloc_r+0x56>
 8006086:	4f20      	ldr	r7, [pc, #128]	; (8006108 <_malloc_r+0xb0>)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	b923      	cbnz	r3, 8006096 <_malloc_r+0x3e>
 800608c:	4621      	mov	r1, r4
 800608e:	4630      	mov	r0, r6
 8006090:	f000 f862 	bl	8006158 <_sbrk_r>
 8006094:	6038      	str	r0, [r7, #0]
 8006096:	4629      	mov	r1, r5
 8006098:	4630      	mov	r0, r6
 800609a:	f000 f85d 	bl	8006158 <_sbrk_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d123      	bne.n	80060ea <_malloc_r+0x92>
 80060a2:	230c      	movs	r3, #12
 80060a4:	4630      	mov	r0, r6
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	f000 f86c 	bl	8006184 <__malloc_unlock>
 80060ac:	e7e3      	b.n	8006076 <_malloc_r+0x1e>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	1b5b      	subs	r3, r3, r5
 80060b2:	d417      	bmi.n	80060e4 <_malloc_r+0x8c>
 80060b4:	2b0b      	cmp	r3, #11
 80060b6:	d903      	bls.n	80060c0 <_malloc_r+0x68>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	441c      	add	r4, r3
 80060bc:	6025      	str	r5, [r4, #0]
 80060be:	e004      	b.n	80060ca <_malloc_r+0x72>
 80060c0:	6863      	ldr	r3, [r4, #4]
 80060c2:	42a2      	cmp	r2, r4
 80060c4:	bf0c      	ite	eq
 80060c6:	600b      	streq	r3, [r1, #0]
 80060c8:	6053      	strne	r3, [r2, #4]
 80060ca:	4630      	mov	r0, r6
 80060cc:	f000 f85a 	bl	8006184 <__malloc_unlock>
 80060d0:	f104 000b 	add.w	r0, r4, #11
 80060d4:	1d23      	adds	r3, r4, #4
 80060d6:	f020 0007 	bic.w	r0, r0, #7
 80060da:	1ac2      	subs	r2, r0, r3
 80060dc:	d0cc      	beq.n	8006078 <_malloc_r+0x20>
 80060de:	1a1b      	subs	r3, r3, r0
 80060e0:	50a3      	str	r3, [r4, r2]
 80060e2:	e7c9      	b.n	8006078 <_malloc_r+0x20>
 80060e4:	4622      	mov	r2, r4
 80060e6:	6864      	ldr	r4, [r4, #4]
 80060e8:	e7cc      	b.n	8006084 <_malloc_r+0x2c>
 80060ea:	1cc4      	adds	r4, r0, #3
 80060ec:	f024 0403 	bic.w	r4, r4, #3
 80060f0:	42a0      	cmp	r0, r4
 80060f2:	d0e3      	beq.n	80060bc <_malloc_r+0x64>
 80060f4:	1a21      	subs	r1, r4, r0
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 f82e 	bl	8006158 <_sbrk_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1dd      	bne.n	80060bc <_malloc_r+0x64>
 8006100:	e7cf      	b.n	80060a2 <_malloc_r+0x4a>
 8006102:	bf00      	nop
 8006104:	20000160 	.word	0x20000160
 8006108:	20000164 	.word	0x20000164

0800610c <_realloc_r>:
 800610c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800610e:	4607      	mov	r7, r0
 8006110:	4614      	mov	r4, r2
 8006112:	460e      	mov	r6, r1
 8006114:	b921      	cbnz	r1, 8006120 <_realloc_r+0x14>
 8006116:	4611      	mov	r1, r2
 8006118:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800611c:	f7ff bf9c 	b.w	8006058 <_malloc_r>
 8006120:	b922      	cbnz	r2, 800612c <_realloc_r+0x20>
 8006122:	f7ff ff4d 	bl	8005fc0 <_free_r>
 8006126:	4625      	mov	r5, r4
 8006128:	4628      	mov	r0, r5
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612c:	f000 f830 	bl	8006190 <_malloc_usable_size_r>
 8006130:	42a0      	cmp	r0, r4
 8006132:	d20f      	bcs.n	8006154 <_realloc_r+0x48>
 8006134:	4621      	mov	r1, r4
 8006136:	4638      	mov	r0, r7
 8006138:	f7ff ff8e 	bl	8006058 <_malloc_r>
 800613c:	4605      	mov	r5, r0
 800613e:	2800      	cmp	r0, #0
 8006140:	d0f2      	beq.n	8006128 <_realloc_r+0x1c>
 8006142:	4631      	mov	r1, r6
 8006144:	4622      	mov	r2, r4
 8006146:	f7ff ff13 	bl	8005f70 <memcpy>
 800614a:	4631      	mov	r1, r6
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff ff37 	bl	8005fc0 <_free_r>
 8006152:	e7e9      	b.n	8006128 <_realloc_r+0x1c>
 8006154:	4635      	mov	r5, r6
 8006156:	e7e7      	b.n	8006128 <_realloc_r+0x1c>

08006158 <_sbrk_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	2300      	movs	r3, #0
 800615c:	4d05      	ldr	r5, [pc, #20]	; (8006174 <_sbrk_r+0x1c>)
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fd fb08 	bl	8003778 <_sbrk>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_sbrk_r+0x1a>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_sbrk_r+0x1a>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000274 	.word	0x20000274

08006178 <__malloc_lock>:
 8006178:	4801      	ldr	r0, [pc, #4]	; (8006180 <__malloc_lock+0x8>)
 800617a:	f000 b811 	b.w	80061a0 <__retarget_lock_acquire_recursive>
 800617e:	bf00      	nop
 8006180:	2000027c 	.word	0x2000027c

08006184 <__malloc_unlock>:
 8006184:	4801      	ldr	r0, [pc, #4]	; (800618c <__malloc_unlock+0x8>)
 8006186:	f000 b80c 	b.w	80061a2 <__retarget_lock_release_recursive>
 800618a:	bf00      	nop
 800618c:	2000027c 	.word	0x2000027c

08006190 <_malloc_usable_size_r>:
 8006190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006194:	1f18      	subs	r0, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	bfbc      	itt	lt
 800619a:	580b      	ldrlt	r3, [r1, r0]
 800619c:	18c0      	addlt	r0, r0, r3
 800619e:	4770      	bx	lr

080061a0 <__retarget_lock_acquire_recursive>:
 80061a0:	4770      	bx	lr

080061a2 <__retarget_lock_release_recursive>:
 80061a2:	4770      	bx	lr

080061a4 <_init>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	bf00      	nop
 80061a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061aa:	bc08      	pop	{r3}
 80061ac:	469e      	mov	lr, r3
 80061ae:	4770      	bx	lr

080061b0 <_fini>:
 80061b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b2:	bf00      	nop
 80061b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061b6:	bc08      	pop	{r3}
 80061b8:	469e      	mov	lr, r3
 80061ba:	4770      	bx	lr
